### some console commands are found in other files, doubling regular effects and provinding a log
### SPAWN TROOPS

d_spawn_troops = {
	if = {
		limit = { is_debug = yes }
		division_template = {
			name = "Infantry Division"
			is_locked = no
			regiments = {	infantry = { x = 0 y = 0 }	infantry = { x = 0 y = 1 }	infantry = { x = 0 y = 2 }	infantry = { x = 1 y = 0 }	infantry = { x = 1 y = 1 }	infantry = { x = 1 y = 2 }	}
			priority = 1
		}
		division_template = {
			name = "Cavalry Division"
			is_locked = no
			regiments = {	cavalry = { x = 0 y = 0 }	cavalry = { x = 0 y = 1 }	cavalry = { x = 0 y = 2 }	cavalry = { x = 1 y = 0 }	cavalry = { x = 1 y = 1 }	cavalry = { x = 1 y = 2 }	}
			priority = 1
		}
		capital_scope = {
			create_unit = {
				division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			if = {
				limit = { OWNER = { num_of_controlled_states > 4 } }
				create_unit = {
					division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
					owner = PREV
				}
				create_unit = {
					division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
					owner = PREV
				}
			}
			if = {
				limit = { OWNER = { num_of_controlled_states > 8 } }
				create_unit = {
					division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
					owner = PREV
				}
				create_unit = {
					division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
					owner = PREV
				}
			}
		}
	} else = { log = "spawn_troops only works in debug mode" }
}

d_spawn_troops_all = {
	if = {
		limit = { is_debug = yes }
		every_country = {
			division_template = {
				name = "Infantry Division"
				is_locked = no
				regiments = {	infantry = { x = 0 y = 0 }	infantry = { x = 0 y = 1 }	infantry = { x = 0 y = 2 }	infantry = { x = 1 y = 0 }	infantry = { x = 1 y = 1 }	infantry = { x = 1 y = 2 }	}
				priority = 1
			}
			division_template = {
				name = "Cavalry Division"
				is_locked = no
				regiments = {	cavalry = { x = 0 y = 0 }	cavalry = { x = 0 y = 1 }	cavalry = { x = 0 y = 2 }	cavalry = { x = 1 y = 0 }	cavalry = { x = 1 y = 1 }	cavalry = { x = 1 y = 2 }	}
				priority = 1
			}
			capital_scope = {
				create_unit = {
					division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
					owner = PREV
				}
				create_unit = {
					division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
					owner = PREV
				}
				create_unit = {
					division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
					owner = PREV
				}
				create_unit = {
					division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
					owner = PREV
				}
				if = {
					limit = { OWNER = { num_of_controlled_states > 4 } }
					create_unit = {
						division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
						owner = PREV
					}
					create_unit = {
						division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
						owner = PREV
					}
				}
				if = {
					limit = { OWNER = { num_of_controlled_states > 8 } }
					create_unit = {
						division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
						owner = PREV
					}
					create_unit = {
						division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
						owner = PREV
					}
				}
			}
		}
	}	else = { log = "spawn_troops_all only works in debug mode" }
}
### OCCUPATION

d_add_compliance_to_all_states = {
	every_controlled_state = {
		limit = { NOT = { is_core_of = ROOT } }
		add_compliance = 100
		log = "[THIS.GetName]([ROOT.GetName]) add 100 compliance"
	}
}

d_remove_compliance_from_all_states = {
	every_controlled_state = {
		limit = { NOT = { is_core_of = ROOT } }
		add_compliance = -100
		log = "[THIS.GetName]([ROOT.GetName]) remove 100 compliance"
	}
}

### UNIFICATION

d_annex_all_southern_japan = {
	every_state = {
		limit = { has_state_flag = state_is_southern_japan }
		ROOT = {
			transfer_state  = PREV
		}
	}
}

d_annex_all_northern_japan = {
	every_state = {
		limit = { has_state_flag = state_is_northern_japan }
		ROOT = {
			transfer_state  = PREV
		}
	}
}

d_annex_all_central_japan = {
	every_state = {
		limit = { has_state_flag = state_is_central_japan }
		ROOT = {
			transfer_state  = PREV
		}
	}
}

### RELIGION

d_get_religion_drift = {
	get_country_religion_drift = yes
}
d_allow_cthulhu = {	# there is an equivalent on the SS_religion_effects.txt for non-debug use
	
	if = {
		limit = {
			NOT = { has_global_flag = religion_cthulhu_allowed }
		}
		set_global_flag = religion_cthulhu_allowed
		set_variable = { global.religion_xi_pos_1 = 40 }
		set_variable = { global.religion_xb_pos_1 = 20 }
		set_variable = { global.religion_xd_pos_1 = 10 }
		set_variable = { global.religion_xi_pos_2 = 140 }
		set_variable = { global.religion_xb_pos_2 = 120 }
		set_variable = { global.religion_xd_pos_2 = 110 }
		set_variable = { global.religion_xi_pos_3 = 240 }
		set_variable = { global.religion_xb_pos_3 = 220 }
		set_variable = { global.religion_xd_pos_3 = 210 }
		set_variable = { global.religion_xi_pos_4 = 340 }
		set_variable = { global.religion_xb_pos_4 = 320 }
		set_variable = { global.religion_xd_pos_4 = 310 }
		set_variable = { global.religion_xi_pos_5 = 440 }
		set_variable = { global.religion_xb_pos_5 = 420 }
		set_variable = { global.religion_xd_pos_5 = 410 }
		set_variable = { global.religion_xi_pos_6 = 540 }
		set_variable = { global.religion_xb_pos_6 = 520 }
		set_variable = { global.religion_xd_pos_6 = 510 }
		set_variable = { global.religion_xi_pos_7 = 640 }
		set_variable = { global.religion_xb_pos_7 = 620 }
		set_variable = { global.religion_xd_pos_7 = 610 }
		log = "cthulhu allowed"

	} else = {
		clr_global_flag = religion_cthulhu_allowed
		set_variable = { global.religion_xi_pos_1 = 70 }
		set_variable = { global.religion_xb_pos_1 = 50 }
		set_variable = { global.religion_xd_pos_1 = 40 }
		set_variable = { global.religion_xi_pos_2 = 170 }
		set_variable = { global.religion_xb_pos_2 = 150 }
		set_variable = { global.religion_xd_pos_2 = 140 }
		set_variable = { global.religion_xi_pos_3 = 270 }
		set_variable = { global.religion_xb_pos_3 = 250 }
		set_variable = { global.religion_xd_pos_3 = 240 }
		set_variable = { global.religion_xi_pos_4 = 370 }
		set_variable = { global.religion_xb_pos_4 = 350 }
		set_variable = { global.religion_xd_pos_4 = 340 }
		set_variable = { global.religion_xi_pos_5 = 470 }
		set_variable = { global.religion_xb_pos_5 = 450 }
		set_variable = { global.religion_xd_pos_5 = 440 }
		set_variable = { global.religion_xi_pos_6 = 570 }
		set_variable = { global.religion_xb_pos_6 = 550 }
		set_variable = { global.religion_xd_pos_6 = 540 }
		set_variable = { global.religion_xi_pos_7 = 670 }
		set_variable = { global.religion_xb_pos_7 = 650 }
		set_variable = { global.religion_xd_pos_7 = 640 }
		log = "cthulhu not allowed"
	}
	
}
d_set_country_religion = {
	
	find_highest_in_array = { 
		array = args 
		value = v 
		index = i
	}
	
	FROM = {
		if = {
			limit = {
				check_variable = { v = 1 }
			}
			set_variable = { country_religion = 1 }
		}
		if = {
			limit = {
				check_variable = { v = 2 }
			}
			set_variable = { country_religion = 2 }
		}
		if = {
			limit = {
				check_variable = { v = 3 }
			}
			set_variable = { country_religion = 3 }
		}
		if = {
			limit = {
				check_variable = { v = 4 }
			}
			set_variable = { country_religion = 4 }
		}
		if = {
			limit = {
				check_variable = { v = 5 }
			}
			set_variable = { country_religion = 5 }
		}
		if = {
			limit = {
				check_variable = { v = 6 }
			}
			set_variable = { country_religion = 6 }
		}
		if = {
			limit = {
				check_variable = { v = 7 }
			}
			set_variable = { country_religion = 7 }
		}
	}
}

d_set_country_religion_1 = {
	set_variable = { country_religion = 1 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_2 = {
	set_variable = { country_religion = 2 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_3 = {
	set_variable = { country_religion = 3 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_4 = {
	set_variable = { country_religion = 4 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_5 = {
	set_variable = { country_religion = 5 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_6 = {
	set_variable = { country_religion = 6 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_7 = {
	set_variable = { country_religion = 7 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_buddhism = {
	set_variable = { country_religion = 1 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_shinto = {
	set_variable = { country_religion = 2 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_christianity = {
	set_variable = { country_religion = 3 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_taoism = {
	set_variable = { country_religion = 4 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_confucianism = {
	set_variable = { country_religion = 5 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_secularism = {
	set_variable = { country_religion = 6 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_cthulhu = {
	set_variable = { country_religion = 7 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}

### CLANS

d_release_all_clans = {
	every_country = {
		if = { limit = { any_controlled_state = { is_core_of = DOS } NOT = { country_exists = DOS } } release_on_controlled = DOS }
		if = { limit = { any_controlled_state = { is_core_of = BUR } NOT = { country_exists = BUR } } release_on_controlled = BUR }
		if = { limit = { any_controlled_state = { is_core_of = ASO } NOT = { country_exists = ASO } } release_on_controlled = ASO }
		if = { limit = { any_controlled_state = { is_core_of = IKE } NOT = { country_exists = IKE } } release_on_controlled = IKE }
		if = { limit = { any_controlled_state = { is_core_of = TMA } NOT = { country_exists = TMA } } release_on_controlled = TMA }
		if = { limit = { any_controlled_state = { is_core_of = OIK } NOT = { country_exists = OIK } } release_on_controlled = OIK }
		if = { limit = { any_controlled_state = { is_core_of = MAT } NOT = { country_exists = MAT } } release_on_controlled = MAT }
		if = { limit = { any_controlled_state = { is_core_of = ABE } NOT = { country_exists = ABE } } release_on_controlled = ABE }
		if = { limit = { any_controlled_state = { is_core_of = NBS } NOT = { country_exists = NBS } } release_on_controlled = NBS }
		if = { limit = { any_controlled_state = { is_core_of = HOS } NOT = { country_exists = HOS } } release_on_controlled = HOS }
		if = { limit = { any_controlled_state = { is_core_of = NAI } NOT = { country_exists = NAI } } release_on_controlled = NAI }
		if = { limit = { any_controlled_state = { is_core_of = SAR } NOT = { country_exists = SAR } } release_on_controlled = SAR }
		if = { limit = { any_controlled_state = { is_core_of = KAR } NOT = { country_exists = KAR } } release_on_controlled = KAR }
		if = { limit = { any_controlled_state = { is_core_of = NAG } NOT = { country_exists = NAG } } release_on_controlled = NAG }
		if = { limit = { any_controlled_state = { is_core_of = TMK } NOT = { country_exists = TMK } } release_on_controlled = TMK }
		if = { limit = { any_controlled_state = { is_core_of = IYO } NOT = { country_exists = IYO } } release_on_controlled = IYO }
		if = { limit = { any_controlled_state = { is_core_of = IMA } NOT = { country_exists = IMA } } release_on_controlled = IMA }
		if = { limit = { any_controlled_state = { is_core_of = OKA } NOT = { country_exists = OKA } } release_on_controlled = OKA }
		if = { limit = { any_controlled_state = { is_core_of = TOU } NOT = { country_exists = TOU } } release_on_controlled = TOU }
		if = { limit = { any_controlled_state = { is_core_of = OMA } NOT = { country_exists = OMA } } release_on_controlled = OMA }
		if = { limit = { any_controlled_state = { is_core_of = MI0 } NOT = { country_exists = MI0 } } release_on_controlled = MI0 }
		if = { limit = { any_controlled_state = { is_core_of = SKI } NOT = { country_exists = SKI } } release_on_controlled = SKI }
		if = { limit = { any_controlled_state = { is_core_of = SKA } NOT = { country_exists = SKA } } release_on_controlled = SKA }
		if = { limit = { any_controlled_state = { is_core_of = OWA } NOT = { country_exists = OWA } } release_on_controlled = OWA }
		if = { limit = { any_controlled_state = { is_core_of = SE0 } NOT = { country_exists = SE0 } } release_on_controlled = SE0 }
		if = { limit = { any_controlled_state = { is_core_of = STK } NOT = { country_exists = STK } } release_on_controlled = STK }
		if = { limit = { any_controlled_state = { is_core_of = HRO } NOT = { country_exists = HRO } } release_on_controlled = HRO }
		if = { limit = { any_controlled_state = { is_core_of = MTS } NOT = { country_exists = MTS } } release_on_controlled = MTS }
		if = { limit = { any_controlled_state = { is_core_of = NAG } NOT = { country_exists = NAG } } release_on_controlled = NAG }
		if = { limit = { any_controlled_state = { is_core_of = SMZ } NOT = { country_exists = SMZ } } release_on_controlled = SMZ }
		if = { limit = { any_controlled_state = { is_core_of = RYU } NOT = { country_exists = RYU } } release_on_controlled = RYU }
		if = { limit = { any_controlled_state = { is_core_of = HOJ } NOT = { country_exists = HOJ } } release_on_controlled = HOJ }
		if = { limit = { any_controlled_state = { is_core_of = OTO } NOT = { country_exists = OTO } } release_on_controlled = OTO }
		if = { limit = { any_controlled_state = { is_core_of = MRI } NOT = { country_exists = MRI } } release_on_controlled = MRI }
		if = { limit = { any_controlled_state = { is_core_of = AMA } NOT = { country_exists = AMA } } release_on_controlled = AMA }
		if = { limit = { any_controlled_state = { is_core_of = CHO } NOT = { country_exists = CHO } } release_on_controlled = CHO }
		if = { limit = { any_controlled_state = { is_core_of = MIY } NOT = { country_exists = MIY } } release_on_controlled = MIY }
		if = { limit = { any_controlled_state = { is_core_of = AZA } NOT = { country_exists = AZA } } release_on_controlled = AZA }
		if = { limit = { any_controlled_state = { is_core_of = ASA } NOT = { country_exists = ASA } } release_on_controlled = ASA }
		if = { limit = { any_controlled_state = { is_core_of = ODA } NOT = { country_exists = ODA } } release_on_controlled = ODA }
		if = { limit = { any_controlled_state = { is_core_of = TAK } NOT = { country_exists = TAK } } release_on_controlled = TAK }
		if = { limit = { any_controlled_state = { is_core_of = UES } NOT = { country_exists = UES } } release_on_controlled = UES }
		if = { limit = { any_controlled_state = { is_core_of = SAT } NOT = { country_exists = SAT } } release_on_controlled = SAT }
		if = { limit = { any_controlled_state = { is_core_of = ASH } NOT = { country_exists = ASH } } release_on_controlled = ASH }
		if = { limit = { any_controlled_state = { is_core_of = DAT } NOT = { country_exists = DAT } } release_on_controlled = DAT }
		if = { limit = { any_controlled_state = { is_core_of = MOG } NOT = { country_exists = MOG } } release_on_controlled = MOG }
		if = { limit = { any_controlled_state = { is_core_of = NAN } NOT = { country_exists = NAN } } release_on_controlled = NAN }
	}
	every_country = {
		limit = { has_country_flag = is_clan }
		set_politics = {
			ruling_party = autocracy
		}
	}
}

d_random_ladies_all_clans = {
	every_country = {
		if = {
			limit = { has_country_flag = is_clan has_government = autocracy }
			random_character = {
				limit = { is_country_leader = yes }
				if = { limit = { has_character_flag = dual_leader_id_lady_1} clr_character_flag = dual_leader_id_lady_1	}
				if = { limit = { has_character_flag = dual_leader_id_lady_2} clr_character_flag = dual_leader_id_lady_2	}
				if = { limit = { has_character_flag = dual_leader_id_lady_3} clr_character_flag = dual_leader_id_lady_3	}
				if = { limit = { has_character_flag = dual_leader_id_lady_4} clr_character_flag = dual_leader_id_lady_4	}
				if = { limit = { has_character_flag = dual_leader_id_lady_5} clr_character_flag = dual_leader_id_lady_5	}
				if = { limit = { has_character_flag = dual_leader_id_lady_6} clr_character_flag = dual_leader_id_lady_6	}
				dual_leader_get_random_clan_lady = yes
			}
		}
	}
}

### OTHER

d_PRO_can_choose_zaibatu_leader = {
	PRO = {
		if = {
			limit = { NOT = { has_country_flag = PRO_can_choose_zaibatu_leader } }
			set_country_flag = PRO_can_choose_zaibatu_leader
		} else = {
			clr_country_flag = PRO_can_choose_zaibatu_leader
		}
	}
}

d_GER_SOV_pact = {
	if = {
		limit = { has_global_flag = GER_SOV_pact_enabled }
		clr_global_flag = GER_SOV_pact_enabled
		log = "disable Molotov-Ribbentrop Pact"
	} else = {
		set_global_flag = GER_SOV_pact_enabled
		log = "enable Molotov-Ribbentrop Pact"
	}
}

d_check_coalition_triggers = {
	ROOT = {
		if = {
			limit = { has_world_stage_coalition_allies = yes }
			log = "[THIS.GetName]: has_world_stage_coalition_allies"
		}
		if = {
			limit = { has_world_stage_coalition_komintern = yes }
			log = "[THIS.GetName]: has_world_stage_coalition_komintern"
		}
		if = {
			limit = { has_world_stage_coalition_axis = yes }
			log = "[THIS.GetName]: has_world_stage_coalition_axis"
		}
		if = {
			limit = { has_world_stage_coalition_unaligned = yes }
			log = "[THIS.GetName]: has_world_stage_coalition_unaligned"
		}
		if = {
			limit = { does_not_have_world_stage_coalition_allies = yes }
			log = "[THIS.GetName]: does_not_have_world_stage_coalition_allies"
		}
		if = {
			limit = { does_not_have_world_stage_coalition_komintern = yes }
			log = "[THIS.GetName]: does_not_have_world_stage_coalition_komintern"
		}
		if = {
			limit = { does_not_have_world_stage_coalition_axis = yes }
			log = "[THIS.GetName]: does_not_have_world_stage_coalition_axis"
		}
		if = {
			limit = { does_not_have_world_stage_coalition_unaligned = yes }
			log = "[THIS.GetName]: does_not_have_world_stage_coalition_unaligned"
		}
	}
}

d_show_world_stage_power = {
	log = "global.world_stage_power_usa [?global.world_stage_power_usa]"
	log = "global.world_stage_power_ger [?global.world_stage_power_ger]"
	log = "global.world_stage_power_chi [?global.world_stage_power_chi]"
	log = "global.world_stage_power_eng [?global.world_stage_power_eng]"
	log = "global.world_stage_power_fra [?global.world_stage_power_fra]"
	log = "global.world_stage_power_prt [?global.world_stage_power_prt]"
	log = "global.world_stage_power_net [?global.world_stage_power_net]"
	log = "global.world_stage_power_sov [?global.world_stage_power_sov]"
}

d_add_world_stage_power_all = {
	add_to_variable = { global.world_stage_power_usa = 25 }
	add_to_variable = { global.world_stage_power_ger = 25 }
	add_to_variable = { global.world_stage_power_chi = 25 }
	add_to_variable = { global.world_stage_power_eng = 25 }
	add_to_variable = { global.world_stage_power_fra = 25 }
	add_to_variable = { global.world_stage_power_prt = 25 }
	add_to_variable = { global.world_stage_power_net = 25 }
	add_to_variable = { global.world_stage_power_sov = 25 }
	d_show_world_stage_power = yes
}

d_world_stage_set_theater_active = {

	var:args^0 = {
		if = {
			limit = { has_variable = theater_owner }
			set_state_flag = theater_is_active
			log = "[args^0.GET_theater_name] ([?args^0]): set theater as active"
		} else = {
			log = "[args^0.GetName]([?args^0]) is not a proxy for the World Stage"
		}
	}
}

d_check_doctrine_level = {
	every_country = {
		log = "country: [THIS.GetName]"
		log = "land doc: [?land_doctrine_level]"
		log = "navy doc: [?navy_doctrine_level]"
		log = "air doc: [?air_doctrine_level]"
		log = ""
	}
}

d_reset_metropolis = {
	every_country = {
		set_variable = { world_stage_metropolis = 1 }
	}
	OSA = { set_variable = { world_stage_metropolis = 2 } }
	KOB = { set_variable = { world_stage_metropolis = 3 } }
	FER = { set_variable = { world_stage_metropolis = 4 } }
	AMC = { set_variable = { world_stage_metropolis = 5 } }	#
	OKI = { set_variable = { world_stage_metropolis = 5 } }	# both are America
	HIR = { set_variable = { world_stage_metropolis = 6 } }
	PRT = { set_variable = { world_stage_metropolis = 7 } }
	ROC = { set_variable = { world_stage_metropolis = 8 } }
	REI = { set_variable = { world_stage_metropolis = 9 } }
	every_country = {
		log = "[THIS.GetName]: metropolis = [?world_stage_metropolis]"
	}
}

d_reset_coalitions = {
	every_country = {	set_variable = { world_stage_coalition = 4 }	}
	OSA = { set_variable = { world_stage_coalition = 1 } }	# overwrite the general setting up
	KOB = { set_variable = { world_stage_coalition = 1 } }
	HIR = { set_variable = { world_stage_coalition = 4 } }	#4 = Non-Aligned
	PRT = { set_variable = { world_stage_coalition = 4 } }
	AMC = { set_variable = { world_stage_coalition = 4 } }
	OKI = { set_variable = { world_stage_coalition = 4 } }
	ROC = { set_variable = { world_stage_coalition = 4 } }
	FER = { set_variable = { world_stage_coalition = 2 } }
	REI = { set_variable = { world_stage_coalition = 3 } }
	every_country = {
		log = "[THIS.GetName]: coalition = [?world_stage_coalition]"
	}
}

d_reset_lon_member_relation_modifier = {
	every_country = {
		limit = { has_idea = SS_lon_member }
		log = "[THIS.GetName] is a LoN member"
		every_other_country = {
			limit = { has_idea = SS_lon_member }
			add_relation_modifier = {
				target = PREV
				modifier = lon_member_relation_modifier
			}
			log = "added LoN relation modifier: [THIS.GetAdjective]-[PREV.GetAdjective]"
		}
	}
}

d_netherlands_aligned_axis = {
	if = {
		limit = { has_global_flag = netherlands_aligned_axis }
		clr_global_flag = netherlands_aligned_axis
		log = "cleared global flag 'netherlands_aligned_axis'"
	} else = {
		set_global_flag = netherlands_aligned_axis
		log = "set global flag 'netherlands_aligned_axis'"
	}
}

d_portugal_aligned_axis = {
	if = {
		limit = { has_global_flag = portugal_aligned_axis }
		clr_global_flag = portugal_aligned_axis
		log = "cleared global flag 'portugal_aligned_axis'"
	} else = {
		set_global_flag = portugal_aligned_axis
		log = "set global flag 'portugal_aligned_axis'"
	}
}

d_force_poland_surrender = {
	if = {
		limit = { has_global_flag = world_stage_theater_poland_is_active_first }
		log = "force poland to surrender"
		set_variable = { global.GER_strength_poland_final = 999 }
		set_variable = { global.ENG_strength_poland_final = 0 }
		set_variable = { global.ALLIES_locals_poland = 0 }
		resolve_theater_poland_first = yes
	} else = { log = "poland is not at war" }
}

d_check_tags_allies = {
	every_country = {
		limit = {has_world_stage_coalition_allies = yes }
		log = "[THIS.GetName] is Allies"
	}
}

d_check_tags_komintern = {
	every_country = {
		limit = { has_world_stage_coalition_komintern = yes }
		log = "[THIS.GetName] is Komintern"
	}
}

d_check_tags_axis = {
	every_country = {
		limit = { has_world_stage_coalition_axis = yes }
		log = "[THIS.GetName] is Axis"
	}
}

d_check_tags_unaligned = {
	every_country = {
		limit = { has_world_stage_coalition_unaligned = yes }
		log = "[THIS.GetName] is Unaligned"
	}
}

d_waaaagh = {
	OSA = {  set_country_flag = can_play_alsace set_country_flag = can_play_westphalia set_country_flag = can_play_france set_country_flag = can_play_england set_country_flag = can_play_germany set_country_flag = can_play_netherlands set_country_flag = can_play_alpes set_country_flag = can_play_austria set_country_flag = can_play_italy set_country_flag = can_play_sicily set_country_flag = can_play_lybia set_country_flag = can_play_egypt set_country_flag = can_play_normandy set_country_flag = can_play_sealion }
	KOB = {  set_country_flag = can_play_alsace set_country_flag = can_play_westphalia set_country_flag = can_play_france set_country_flag = can_play_england set_country_flag = can_play_germany set_country_flag = can_play_netherlands set_country_flag = can_play_alpes set_country_flag = can_play_austria set_country_flag = can_play_italy set_country_flag = can_play_sicily set_country_flag = can_play_lybia set_country_flag = can_play_egypt set_country_flag = can_play_normandy set_country_flag = can_play_sealion }
	REI = {  set_country_flag = can_play_alsace set_country_flag = can_play_westphalia set_country_flag = can_play_france set_country_flag = can_play_england set_country_flag = can_play_germany set_country_flag = can_play_netherlands set_country_flag = can_play_alpes set_country_flag = can_play_austria set_country_flag = can_play_italy set_country_flag = can_play_sicily set_country_flag = can_play_poland set_country_flag = can_play_normandy set_country_flag = can_play_sealion }
}

d_cthulhu_boon_1 = {
	country_event = ostasiencthulhu.3
	log = "event $ostasiencthulhu.3.t$"
}

d_cthulhu_boon_2 = {
	country_event = ostasiencthulhu.4
	log = "event $ostasiencthulhu.4.t$"
}

d_cthulhu_boon_3 = {
	country_event = ostasiencthulhu.5
	log = "event $ostasiencthulhu.5.t$"
}

d_cthulhu_boon_4 = {
	country_event = ostasiencthulhu.6
	log = "event $ostasiencthulhu.6.t$"
}

### HELP

d_help_ss = {
	log = "spawn_troops"
	log = "   spawn divisions on country, scales slightly with controlled states"
	log = "spawn_trools_all"
	log = "   spawn divisions on all countries, scales slightly with controlled states"
	log = "add_compliance_to_all_states"
	log = "   adds 100 compliance to all controlled states"
	log = "remove_compliance_to_all_states"
	log = "   removes 100 compliance to all controlled states"
	log = "annex_all_southern_japan"
	log = "	  annexes all states in southern Japan"
	log = "annex_all_northern_japan"
	log = "   annexes all states in northern Japan"
	log = "annex_all_central_japan"
	log = "   annexes all states in central Japan"
	log = "get_religion_drift"
	log = "   updates the country's religion drift"
	log = "allow_cthulhu"
	log = "   enables Cthulhu religion in the game and interface"
	log = "set_country_religion [index]"
	log = "   changes the country's religion according to index"
	log = "set_country_religion_1"
	log = "   changes country's religion to Buddhism"
	log = "set_country_religion_2"
	log = "   changes country's religion to Shintoism"
	log = "set_country_religion_3"
	log = "   changes country's religion to Christianity"
	log = "set_country_religion_4"
	log = "   changes country's religion to Taoism"
	log = "set_country_religion_5"
	log = "   changes country's religion to Confucianism"
	log = "set_country_religion_6"
	log = "   changes country's religion to Secularism"
	log = "set_country_religion_7"
	log = "   changes country's religion to Cthulhu"
	log = "release_all_clans"
	log = "   every country releases all independent clans"
	log = "random_ladies_all_clans"
	log = "   adds random secondary leaders to clans that are monarchies from the pool of clan ladies"
	log = "PRO_can_choose_zaibatu_leader"
	log = "   switches the ability of [PRO.GetName] to select Zaibatsu leaders"
	log = "GER_SOV_pact"
	log = "   switches on/off the Molotov-Ribbentrop Pact"
	log = "check_coalition_triggers"
	log = "   returns the country's coalition in the World Stage"
	log = "show_world_stage_power"
	log = "   returns the power of every country in the World Stage"
	log = "add_world_stage_power_all"
	log = "   adds 25 to every countries' power in the World Stage and return values"
	log = "world_stage_set_theater_active [index]"
	log = "   switches on/off the theater given by index, if the state is a proxy to the World Stage"
	log = "check_doctrine_level"
	log = "   returns the country's doctrine level"
	log = "reset_metropolis"
	log = "   resets the metropolis for every existing country with a metropolis to starting values, and return values"
	log = "reset_coalitions"
	log = "   resets the coalition for every existing country to starting values, and return values"
	log = "reset_lon_member_relation_modifier"
	log = "   adds relation modifiers ($lon_member_relation_modifier$) between all members of League of Nations"
	log = "netherlands_aligned_axis"
	log = "   sets global flag for Netherlands joining Axis"
	log = "portugal_aligned_axis"
	log = "  sets global flag for Portugal joining Axis"
	log = "force_poland_surrender"
	log = "   (depricated)"
	log = "check_tags_allies"
	log = "   returns every country that belongs to Allies in the World Stage"
	log = "check_tags_komintern"
	log = "   returns every country that belongs to Komintern in the World Stage"
	log = "check_tags_axis"
	log = "   returns every country that belongs to Axis in the World Stage"
	log = "check_tags_unaligned"
	log = "   returns every country that does not belong to a coalition in the World Stage"
	log = "waaaagh"
	log = "   (depricated) allows [REI.GetName], [KOB.GetName] and [OSA.GetName] to act on every theater in the World Stage"
	log = "cthulhu_boon_1"
	log = "   fires event ostasiencthulhu.3"
	log = "cthulhu_boon_2"
	log = "   fires event ostasiencthulhu.4"
	log = "cthulhu_boon_3"
	log = "   fires event ostasiencthulhu.5"
	log = "cthulhu_boon_4"
	log = "   fires event ostasiencthulhu.6"
	log = "unification_get_score"
	log = "   returns the country's unification score"
	log = "unification_count_states_southern_japan"
	log = "   returns the number of controlled states in southern Japan"
	log = "unification_count_states_central_japan"
	log = "   returns the number of controlled states in central Japan"
	log = "unification_count_states_northern_japan"
	log = "   returns the number of controlled states in northern Japan"
}