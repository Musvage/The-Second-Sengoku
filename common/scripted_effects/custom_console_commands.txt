### some console commands are found in other files, doubling regular effects and provinding a log
#brackets for navigation

### SPAWN TROOPS {

d_spawn_troops = {
	if = {
		limit = { is_debug = yes }
		division_template = {
			name = "Infantry Division"
			is_locked = no
			regiments = {	infantry = { x = 0 y = 0 }	infantry = { x = 0 y = 1 }	infantry = { x = 0 y = 2 }	infantry = { x = 1 y = 0 }	infantry = { x = 1 y = 1 }	infantry = { x = 1 y = 2 }	}
			priority = 1
		}
		division_template = {
			name = "Cavalry Division"
			is_locked = no
			regiments = {	cavalry = { x = 0 y = 0 }	cavalry = { x = 0 y = 1 }	cavalry = { x = 0 y = 2 }	cavalry = { x = 1 y = 0 }	cavalry = { x = 1 y = 1 }	cavalry = { x = 1 y = 2 }	}
			priority = 1
		}
		capital_scope = {
			create_unit = {
				division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
				owner = PREV
			}
			create_unit = {
				division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
				owner = PREV
			}
			if = {
				limit = { OWNER = { num_of_controlled_states > 4 } }
				create_unit = {
					division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
					owner = PREV
				}
				create_unit = {
					division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
					owner = PREV
				}
			}
			if = {
				limit = { OWNER = { num_of_controlled_states > 8 } }
				create_unit = {
					division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
					owner = PREV
				}
				create_unit = {
					division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
					owner = PREV
				}
			}
		}
	} else = { log = "spawn_troops only works in debug mode" }
}

d_spawn_troops_all = {
	if = {
		limit = { is_debug = yes }
		every_country = {
			division_template = {
				name = "Infantry Division"
				is_locked = no
				regiments = {	infantry = { x = 0 y = 0 }	infantry = { x = 0 y = 1 }	infantry = { x = 0 y = 2 }	infantry = { x = 1 y = 0 }	infantry = { x = 1 y = 1 }	infantry = { x = 1 y = 2 }	}
				priority = 1
			}
			division_template = {
				name = "Cavalry Division"
				is_locked = no
				regiments = {	cavalry = { x = 0 y = 0 }	cavalry = { x = 0 y = 1 }	cavalry = { x = 0 y = 2 }	cavalry = { x = 1 y = 0 }	cavalry = { x = 1 y = 1 }	cavalry = { x = 1 y = 2 }	}
				priority = 1
			}
			capital_scope = {
				create_unit = {
					division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
					owner = PREV
				}
				create_unit = {
					division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
					owner = PREV
				}
				create_unit = {
					division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
					owner = PREV
				}
				create_unit = {
					division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
					owner = PREV
				}
				if = {
					limit = { OWNER = { num_of_controlled_states > 4 } }
					create_unit = {
						division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
						owner = PREV
					}
					create_unit = {
						division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
						owner = PREV
					}
				}
				if = {
					limit = { OWNER = { num_of_controlled_states > 8 } }
					create_unit = {
						division = "name = \"Infantry Division\" division_template = \"Infantry Division\" start_experience_factor = 0.5 start_equipment_factor = 1"
						owner = PREV
					}
					create_unit = {
						division = "name = \"Cavalry Division\" division_template = \"Cavalry Division\" start_experience_factor = 1 start_equipment_factor = 1"
						owner = PREV
					}
				}
			}
		}
	}	else = { log = "spawn_troops_all only works in debug mode" }
}
### } OCCUPATION {

d_add_compliance_to_all_states = {
	every_controlled_state = {
		limit = { NOT = { is_core_of = ROOT } }
		add_compliance = 100
		log = "[THIS.GetName]([ROOT.GetName]) add 100 compliance"
	}
}

d_remove_compliance_from_all_states = {
	every_controlled_state = {
		limit = { NOT = { is_core_of = ROOT } }
		add_compliance = -100
		log = "[THIS.GetName]([ROOT.GetName]) remove 100 compliance"
	}
}

### } UNIFICATION {

d_annex_all_southern_japan = {
	every_state = {
		limit = { has_state_flag = state_is_southern_japan }
		ROOT = {
			transfer_state  = PREV
		}
	}
}

d_annex_all_northern_japan = {
	every_state = {
		limit = { has_state_flag = state_is_northern_japan }
		ROOT = {
			transfer_state  = PREV
		}
	}
}

d_annex_all_central_japan = {
	every_state = {
		limit = { has_state_flag = state_is_central_japan }
		ROOT = {
			transfer_state  = PREV
		}
	}
}

### } RELIGION {

d_get_religion_drift = {
	get_country_religion_drift = yes
}
d_allow_cthulhu = {	# there is an equivalent on the SS_religion_effects.txt for non-debug use
	
	if = {
		limit = {
			NOT = { has_global_flag = religion_cthulhu_allowed }
		}
		set_global_flag = religion_cthulhu_allowed
		set_variable = { global.religion_xi_pos_1 = 40 }
		set_variable = { global.religion_xb_pos_1 = 20 }
		set_variable = { global.religion_xd_pos_1 = 10 }
		set_variable = { global.religion_xi_pos_2 = 140 }
		set_variable = { global.religion_xb_pos_2 = 120 }
		set_variable = { global.religion_xd_pos_2 = 110 }
		set_variable = { global.religion_xi_pos_3 = 240 }
		set_variable = { global.religion_xb_pos_3 = 220 }
		set_variable = { global.religion_xd_pos_3 = 210 }
		set_variable = { global.religion_xi_pos_4 = 340 }
		set_variable = { global.religion_xb_pos_4 = 320 }
		set_variable = { global.religion_xd_pos_4 = 310 }
		set_variable = { global.religion_xi_pos_5 = 440 }
		set_variable = { global.religion_xb_pos_5 = 420 }
		set_variable = { global.religion_xd_pos_5 = 410 }
		set_variable = { global.religion_xi_pos_6 = 540 }
		set_variable = { global.religion_xb_pos_6 = 520 }
		set_variable = { global.religion_xd_pos_6 = 510 }
		set_variable = { global.religion_xi_pos_7 = 640 }
		set_variable = { global.religion_xb_pos_7 = 620 }
		set_variable = { global.religion_xd_pos_7 = 610 }
		log = "cthulhu allowed"

	} else = {
		clr_global_flag = religion_cthulhu_allowed
		set_variable = { global.religion_xi_pos_1 = 70 }
		set_variable = { global.religion_xb_pos_1 = 50 }
		set_variable = { global.religion_xd_pos_1 = 40 }
		set_variable = { global.religion_xi_pos_2 = 170 }
		set_variable = { global.religion_xb_pos_2 = 150 }
		set_variable = { global.religion_xd_pos_2 = 140 }
		set_variable = { global.religion_xi_pos_3 = 270 }
		set_variable = { global.religion_xb_pos_3 = 250 }
		set_variable = { global.religion_xd_pos_3 = 240 }
		set_variable = { global.religion_xi_pos_4 = 370 }
		set_variable = { global.religion_xb_pos_4 = 350 }
		set_variable = { global.religion_xd_pos_4 = 340 }
		set_variable = { global.religion_xi_pos_5 = 470 }
		set_variable = { global.religion_xb_pos_5 = 450 }
		set_variable = { global.religion_xd_pos_5 = 440 }
		set_variable = { global.religion_xi_pos_6 = 570 }
		set_variable = { global.religion_xb_pos_6 = 550 }
		set_variable = { global.religion_xd_pos_6 = 540 }
		set_variable = { global.religion_xi_pos_7 = 670 }
		set_variable = { global.religion_xb_pos_7 = 650 }
		set_variable = { global.religion_xd_pos_7 = 640 }
		log = "cthulhu not allowed"
	}
	
}
d_set_country_religion = {
	
	find_highest_in_array = { 
		array = args 
		value = v 
		index = i
	}
	
	FROM = {
		if = {
			limit = {
				check_variable = { v = 1 }
			}
			set_variable = { country_religion = 1 }
		}
		if = {
			limit = {
				check_variable = { v = 2 }
			}
			set_variable = { country_religion = 2 }
		}
		if = {
			limit = {
				check_variable = { v = 3 }
			}
			set_variable = { country_religion = 3 }
		}
		if = {
			limit = {
				check_variable = { v = 4 }
			}
			set_variable = { country_religion = 4 }
		}
		if = {
			limit = {
				check_variable = { v = 5 }
			}
			set_variable = { country_religion = 5 }
		}
		if = {
			limit = {
				check_variable = { v = 6 }
			}
			set_variable = { country_religion = 6 }
		}
		if = {
			limit = {
				check_variable = { v = 7 }
			}
			set_variable = { country_religion = 7 }
		}
	}
}

d_set_country_religion_1 = {
	set_variable = { country_religion = 1 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_2 = {
	set_variable = { country_religion = 2 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_3 = {
	set_variable = { country_religion = 3 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_4 = {
	set_variable = { country_religion = 4 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_5 = {
	set_variable = { country_religion = 5 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_6 = {
	set_variable = { country_religion = 6 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_7 = {
	set_variable = { country_religion = 7 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_buddhism = {
	set_variable = { country_religion = 1 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_shinto = {
	set_variable = { country_religion = 2 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_christianity = {
	set_variable = { country_religion = 3 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_taoism = {
	set_variable = { country_religion = 4 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_confucianism = {
	set_variable = { country_religion = 5 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_secularism = {
	set_variable = { country_religion = 6 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}
d_set_country_religion_cthulhu = {
	set_variable = { country_religion = 7 }
	get_country_religion_drift = yes
	get_official_religion_popularity = yes
	scale_country_religion_effect = yes
	set_country_religion_modifier = yes
}

### } CLANS {

d_release_all_clans = {
	every_country = {
		if = { limit = { any_controlled_state = { is_core_of = DOS } NOT = { country_exists = DOS } } release_on_controlled = DOS }
		if = { limit = { any_controlled_state = { is_core_of = BUR } NOT = { country_exists = BUR } } release_on_controlled = BUR }
		if = { limit = { any_controlled_state = { is_core_of = ASO } NOT = { country_exists = ASO } } release_on_controlled = ASO }
		if = { limit = { any_controlled_state = { is_core_of = IKE } NOT = { country_exists = IKE } } release_on_controlled = IKE }
		if = { limit = { any_controlled_state = { is_core_of = TMA } NOT = { country_exists = TMA } } release_on_controlled = TMA }
		if = { limit = { any_controlled_state = { is_core_of = OIK } NOT = { country_exists = OIK } } release_on_controlled = OIK }
		if = { limit = { any_controlled_state = { is_core_of = MAT } NOT = { country_exists = MAT } } release_on_controlled = MAT }
		if = { limit = { any_controlled_state = { is_core_of = ABE } NOT = { country_exists = ABE } } release_on_controlled = ABE }
		if = { limit = { any_controlled_state = { is_core_of = NBS } NOT = { country_exists = NBS } } release_on_controlled = NBS }
		if = { limit = { any_controlled_state = { is_core_of = HOS } NOT = { country_exists = HOS } } release_on_controlled = HOS }
		if = { limit = { any_controlled_state = { is_core_of = NAI } NOT = { country_exists = NAI } } release_on_controlled = NAI }
		if = { limit = { any_controlled_state = { is_core_of = SAR } NOT = { country_exists = SAR } } release_on_controlled = SAR }
		if = { limit = { any_controlled_state = { is_core_of = KAR } NOT = { country_exists = KAR } } release_on_controlled = KAR }
		if = { limit = { any_controlled_state = { is_core_of = TMK } NOT = { country_exists = TMK } } release_on_controlled = TMK }
		if = { limit = { any_controlled_state = { is_core_of = IYO } NOT = { country_exists = IYO } } release_on_controlled = IYO }
		if = { limit = { any_controlled_state = { is_core_of = IMA } NOT = { country_exists = IMA } } release_on_controlled = IMA }
		if = { limit = { any_controlled_state = { is_core_of = OKA } NOT = { country_exists = OKA } } release_on_controlled = OKA }
		if = { limit = { any_controlled_state = { is_core_of = TOU } NOT = { country_exists = TOU } } release_on_controlled = TOU }
		if = { limit = { any_controlled_state = { is_core_of = OMA } NOT = { country_exists = OMA } } release_on_controlled = OMA }
		if = { limit = { any_controlled_state = { is_core_of = MI0 } NOT = { country_exists = MI0 } } release_on_controlled = MI0 }
		if = { limit = { any_controlled_state = { is_core_of = SKI } NOT = { country_exists = SKI } } release_on_controlled = SKI }
		if = { limit = { any_controlled_state = { is_core_of = SKA } NOT = { country_exists = SKA } } release_on_controlled = SKA }
		if = { limit = { any_controlled_state = { is_core_of = OWA } NOT = { country_exists = OWA } } release_on_controlled = OWA }
		if = { limit = { any_controlled_state = { is_core_of = SE0 } NOT = { country_exists = SE0 } } release_on_controlled = SE0 }
		if = { limit = { any_controlled_state = { is_core_of = STK } NOT = { country_exists = STK } } release_on_controlled = STK }
		if = { limit = { any_controlled_state = { is_core_of = HRO } NOT = { country_exists = HRO } } release_on_controlled = HRO }
		if = { limit = { any_controlled_state = { is_core_of = MTS } NOT = { country_exists = MTS } } release_on_controlled = MTS }
		if = { limit = { any_controlled_state = { is_core_of = NAG } NOT = { country_exists = NAG } } release_on_controlled = NAG }
		if = { limit = { any_controlled_state = { is_core_of = SMZ } NOT = { country_exists = SMZ } } release_on_controlled = SMZ }
		if = { limit = { any_controlled_state = { is_core_of = RYU } NOT = { country_exists = RYU } } release_on_controlled = RYU }
		if = { limit = { any_controlled_state = { is_core_of = HOJ } NOT = { country_exists = HOJ } } release_on_controlled = HOJ }
		if = { limit = { any_controlled_state = { is_core_of = OTO } NOT = { country_exists = OTO } } release_on_controlled = OTO }
		if = { limit = { any_controlled_state = { is_core_of = MRI } NOT = { country_exists = MRI } } release_on_controlled = MRI }
		if = { limit = { any_controlled_state = { is_core_of = AMA } NOT = { country_exists = AMA } } release_on_controlled = AMA }
		if = { limit = { any_controlled_state = { is_core_of = CHO } NOT = { country_exists = CHO } } release_on_controlled = CHO }
		if = { limit = { any_controlled_state = { is_core_of = MIY } NOT = { country_exists = MIY } } release_on_controlled = MIY }
		if = { limit = { any_controlled_state = { is_core_of = AZA } NOT = { country_exists = AZA } } release_on_controlled = AZA }
		if = { limit = { any_controlled_state = { is_core_of = ASA } NOT = { country_exists = ASA } } release_on_controlled = ASA }
		if = { limit = { any_controlled_state = { is_core_of = ODA } NOT = { country_exists = ODA } } release_on_controlled = ODA }
		if = { limit = { any_controlled_state = { is_core_of = TAK } NOT = { country_exists = TAK } } release_on_controlled = TAK }
		if = { limit = { any_controlled_state = { is_core_of = UES } NOT = { country_exists = UES } } release_on_controlled = UES }
		if = { limit = { any_controlled_state = { is_core_of = SAT } NOT = { country_exists = SAT } } release_on_controlled = SAT }
		if = { limit = { any_controlled_state = { is_core_of = ASH } NOT = { country_exists = ASH } } release_on_controlled = ASH }
		if = { limit = { any_controlled_state = { is_core_of = DAT } NOT = { country_exists = DAT } } release_on_controlled = DAT }
		if = { limit = { any_controlled_state = { is_core_of = MOG } NOT = { country_exists = MOG } } release_on_controlled = MOG }
		if = { limit = { any_controlled_state = { is_core_of = NAN } NOT = { country_exists = NAN } } release_on_controlled = NAN }
		if = { limit = { any_controlled_state = { is_core_of = UCK } NOT = { country_exists = UCK } } release_on_controlled = UCK }
		if = { limit = { any_controlled_state = { is_core_of = UCC } NOT = { country_exists = UCC } } release_on_controlled = UCC }
		# now, second round
		every_controlled_state = { limit = { is_core_of = DOS country_exists = DOS } transfer_state_to = BUR }
		every_controlled_state = { limit = { is_core_of = BUR country_exists = BUR } transfer_state_to = BUR }
		every_controlled_state = { limit = { is_core_of = ASO country_exists = ASO } transfer_state_to = ASO }
		every_controlled_state = { limit = { is_core_of = IKE country_exists = IKE } transfer_state_to = IKE }
		every_controlled_state = { limit = { is_core_of = TMA country_exists = TMA } transfer_state_to = TMA }
		every_controlled_state = { limit = { is_core_of = OIK country_exists = OIK } transfer_state_to = OIK }
		every_controlled_state = { limit = { is_core_of = MAT country_exists = MAT } transfer_state_to = MAT }
		every_controlled_state = { limit = { is_core_of = ABE country_exists = ABE } transfer_state_to = ABE }
		every_controlled_state = { limit = { is_core_of = NBS country_exists = NBS } transfer_state_to = NBS }
		every_controlled_state = { limit = { is_core_of = HOS country_exists = HOS } transfer_state_to = HOS }
		every_controlled_state = { limit = { is_core_of = NAI country_exists = NAI } transfer_state_to = NAI }
		every_controlled_state = { limit = { is_core_of = SAR country_exists = SAR } transfer_state_to = SAR }
		every_controlled_state = { limit = { is_core_of = KAR country_exists = KAR } transfer_state_to = KAR }
		every_controlled_state = { limit = { is_core_of = TMK country_exists = TMK } transfer_state_to = TMK }
		every_controlled_state = { limit = { is_core_of = IYO country_exists = IYO } transfer_state_to = IYO }
		every_controlled_state = { limit = { is_core_of = IMA country_exists = IMA } transfer_state_to = IMA }
		every_controlled_state = { limit = { is_core_of = OKA country_exists = OKA } transfer_state_to = OKA }
		every_controlled_state = { limit = { is_core_of = TOU country_exists = TOU } transfer_state_to = TOU }
		every_controlled_state = { limit = { is_core_of = OMA country_exists = OMA } transfer_state_to = OMA }
		every_controlled_state = { limit = { is_core_of = MI0 country_exists = MI0 } transfer_state_to = MI0 }
		every_controlled_state = { limit = { is_core_of = SKI country_exists = SKI } transfer_state_to = SKI }
		every_controlled_state = { limit = { is_core_of = SKA country_exists = SKA } transfer_state_to = SKA }
		every_controlled_state = { limit = { is_core_of = OWA country_exists = OWA } transfer_state_to = OWA }
		every_controlled_state = { limit = { is_core_of = SE0 country_exists = SE0 } transfer_state_to = SE0 }
		every_controlled_state = { limit = { is_core_of = STK country_exists = STK } transfer_state_to = STK }
		every_controlled_state = { limit = { is_core_of = HRO country_exists = HRO } transfer_state_to = HRO }
		every_controlled_state = { limit = { is_core_of = MTS country_exists = MTS } transfer_state_to = MTS }
		every_controlled_state = { limit = { is_core_of = NAG country_exists = NAG } transfer_state_to = NAG }
		every_controlled_state = { limit = { is_core_of = SMZ country_exists = SMZ } transfer_state_to = SMZ }
		every_controlled_state = { limit = { is_core_of = RYU country_exists = RYU } transfer_state_to = RYU }
		every_controlled_state = { limit = { is_core_of = HOJ country_exists = HOJ } transfer_state_to = HOJ }
		every_controlled_state = { limit = { is_core_of = OTO country_exists = OTO } transfer_state_to = OTO }
		every_controlled_state = { limit = { is_core_of = MRI country_exists = MRI } transfer_state_to = MRI }
		every_controlled_state = { limit = { is_core_of = AMA country_exists = AMA } transfer_state_to = AMA }
		every_controlled_state = { limit = { is_core_of = CHO country_exists = CHO } transfer_state_to = CHO }
		every_controlled_state = { limit = { is_core_of = MIY country_exists = MIY } transfer_state_to = MIY }
		every_controlled_state = { limit = { is_core_of = AZA country_exists = AZA } transfer_state_to = AZA }
		every_controlled_state = { limit = { is_core_of = ASA country_exists = ASA } transfer_state_to = ASA }
		every_controlled_state = { limit = { is_core_of = ODA country_exists = ODA } transfer_state_to = ODA }
		every_controlled_state = { limit = { is_core_of = TAK country_exists = TAK } transfer_state_to = TAK }
		every_controlled_state = { limit = { is_core_of = UES country_exists = UES } transfer_state_to = UES }
		every_controlled_state = { limit = { is_core_of = SAT country_exists = SAT } transfer_state_to = SAT }
		every_controlled_state = { limit = { is_core_of = ASH country_exists = ASH } transfer_state_to = ASH }
		every_controlled_state = { limit = { is_core_of = DAT country_exists = DAT } transfer_state_to = DAT }
		every_controlled_state = { limit = { is_core_of = MOG country_exists = MOG } transfer_state_to = MOG }
		every_controlled_state = { limit = { is_core_of = NAN country_exists = NAN } transfer_state_to = NAN }
		every_controlled_state = { limit = { is_core_of = UCK country_exists = UCK } transfer_state_to = UCK }
		every_controlled_state = { limit = { is_core_of = UCC country_exists = UCC } transfer_state_to = UCC }
	}
	every_country = {
		limit = { has_country_flag = is_clan }
		set_politics = {
			ruling_party = autocracy
		}
	}
}

d_random_ladies_all_clans = {
	every_country = {
		if = {
			limit = { has_country_flag = is_clan has_government = autocracy }
			random_character = {
				limit = { is_country_leader = yes }
				if = { limit = { has_character_flag = dual_leader_id_lady_1} clr_character_flag = dual_leader_id_lady_1	}
				if = { limit = { has_character_flag = dual_leader_id_lady_2} clr_character_flag = dual_leader_id_lady_2	}
				if = { limit = { has_character_flag = dual_leader_id_lady_3} clr_character_flag = dual_leader_id_lady_3	}
				if = { limit = { has_character_flag = dual_leader_id_lady_4} clr_character_flag = dual_leader_id_lady_4	}
				if = { limit = { has_character_flag = dual_leader_id_lady_5} clr_character_flag = dual_leader_id_lady_5	}
				if = { limit = { has_character_flag = dual_leader_id_lady_6} clr_character_flag = dual_leader_id_lady_6	}
				dual_leader_get_random_clan_lady = yes
			}
		}
	}
}

### } OTHER {

d_easer_egg_rule = {
	if = {
		limit = { has_global_flag = eastereggs_enabled }
		clr_global_flag = eastereggs_enabled
		log = "clr_global_flag = eastereggs_enabled"
	} else = {
		set_global_flag = eastereggs_enabled
		log = "set_global_flag = eastereggs_enabled"
	}
}

d_load_generic_focus_tree = {
	load_focus_tree = { tree = generic_focus keep_completed = no }
}

d_PRO_can_choose_zaibatu_leader = {
	PRO = {
		if = {
			limit = { NOT = { has_country_flag = PRO_can_choose_zaibatu_leader } }
			set_country_flag = PRO_can_choose_zaibatu_leader
		} else = {
			clr_country_flag = PRO_can_choose_zaibatu_leader
		}
	}
}

d_cthulhu_boon_1 = {
	country_event = ostasiencthulhu.3
	log = "event $ostasiencthulhu.3.t$"
}

d_cthulhu_boon_2 = {
	country_event = ostasiencthulhu.4
	log = "event $ostasiencthulhu.4.t$"
}

d_cthulhu_boon_3 = {
	country_event = ostasiencthulhu.5
	log = "event $ostasiencthulhu.5.t$"
}

d_cthulhu_boon_4 = {
	country_event = ostasiencthulhu.6
	log = "event $ostasiencthulhu.6.t$"
}

d_add_modifier_for_party_popularity = {
	if = {
		limit = {
			NOT = { has_dynamic_modifier = { modifier = PRO_modifier_ruling_party_popularity } }
		}
		add_dynamic_modifier = { modifier = PRO_modifier_ruling_party_popularity }
	}
}

### } WORLD STAGE {

d_GER_SOV_pact = {
	if = {
		limit = { has_global_flag = GER_SOV_pact_enabled }
		clr_global_flag = GER_SOV_pact_enabled
		log = "disable Molotov-Ribbentrop Pact"
	} else = {
		set_global_flag = GER_SOV_pact_enabled
		log = "enable Molotov-Ribbentrop Pact"
	}
}

d_world_stage_set_theater_active = {

	var:args^0 = {
		if = {
			limit = { has_variable = theater_owner }
			set_state_flag = theater_is_active
			log = "[args^0.GetTheaterName] ([?args^0]): set theater as active"
		} else = {
			log = "[args^0.GetName]([?args^0]) is not a proxy for the World Stage"
		}
	}
}

d_check_doctrine_level = {
	every_country = {
		log = "country: [THIS.GetName]"
		log = "land doc: [?land_doctrine_level]"
		log = "navy doc: [?navy_doctrine_level]"
		log = "air doc: [?air_doctrine_level]"
	}
}

d_reset_metropolis = {
	REI = { set_variable = { world_stage_metropolis = 101 } }	# for these ones it should be enough to get them once in start-up, the redundancy here works as safety mechanism
	OSA = { set_variable = { world_stage_metropolis = 102 } }
	KOB = { set_variable = { world_stage_metropolis = 103 } }
	FER = { set_variable = { world_stage_metropolis = 104 } }
	AMC = { set_variable = { world_stage_metropolis = 105 } }	#
	OKI = { set_variable = { world_stage_metropolis = 105 } }	# both are America	(NOTE: possibility of OKI becoming independent and not being USA anymore should be considered here)
	ROC = { set_variable = { world_stage_metropolis = 106 } }
	HIR = { set_variable = { world_stage_metropolis = 107 } }
	PRT = { set_variable = { world_stage_metropolis = 108 } }
	#KIT = { set_variable = { world_stage_metropolis = 109 } }	# Italy, not implemented
	PRO = { set_variable = { world_stage_metropolis = 110 } }	# Internationally recognized Japan
	#SPR = { set_variable = { world_stage_metropolis = 111 } }	# Spain, not implemented
	every_country = {
		log = "[THIS.GetName]: metropolis = [?world_stage_metropolis]"
	}
}

d_reset_coalitions = {
	every_country = {	set_variable = { world_stage_coalition = 4 }	}
	OSA = { set_variable = { world_stage_coalition = 1 } }	# overwrite the general setting up
	KOB = { set_variable = { world_stage_coalition = 1 } }
	HIR = { set_variable = { world_stage_coalition = 4 } }	#4 = Non-Aligned
	PRT = { set_variable = { world_stage_coalition = 4 } }
	AMC = { set_variable = { world_stage_coalition = 4 } }
	OKI = { set_variable = { world_stage_coalition = 4 } }
	ROC = { set_variable = { world_stage_coalition = 4 } }
	FER = { set_variable = { world_stage_coalition = 2 } }
	REI = { set_variable = { world_stage_coalition = 3 } }
	every_country = {
		log = "[THIS.GetName]: coalition = [?world_stage_coalition]"
	}
}

d_reset_lon_member_relation_modifier = {
	every_country = {
		limit = { has_idea = SS_lon_member }
		log = "[THIS.GetName] is a LoN member"
		every_other_country = {
			limit = { has_idea = SS_lon_member }
			add_relation_modifier = {
				target = PREV
				modifier = lon_member_relation_modifier
			}
			log = "added LoN relation modifier: [THIS.GetAdjective]-[PREV.GetAdjective]"
		}
	}
}

d_check_lon_relation_modifier = {
	if = {
		limit = {
			any_other_country = {
				has_relation_modifier = {
					target = PREV
					modifier = lon_member_relation_modifier
				}
			}
			log = "someone has lon_member_relation_modifier active towards [THIS.GetName]"
		} else = { log = "no one has lon_member_relation_modifier active towards [THIS.GetName]" }
	}
}

d_netherlands_aligned_axis = {
	HIR = {
		if = {
			limit = { has_country_flag = will_join_axis }
			clr_country_flag = will_join_axis
			log = "HIR: cleared country flag 'will_join_axis'"
		} else = {
			set_country_flag = will_join_axis
			log = "HIR: set country flag 'will_join_axis'"
		}
	}
}

d_portugal_aligned_axis = {
	PRT = {
		if = {
			limit = { has_country_flag = will_join_axis }
			clr_country_flag = will_join_axis
			log = "PRT: cleared country flag 'will_join_axis'"
		} else = {
			set_country_flag = will_join_axis
			log = "PRT: set country flag 'will_join_axis'"
		}
	}
}

#d_force_poland_surrender = {	# DEPRICATED
#	if = {
#		limit = { has_global_flag = world_stage_theater_poland_is_active_first }
#		log = "force poland to surrender"
#		set_variable = { global.GER_strength_poland_final = 999 }
#		set_variable = { global.ENG_strength_poland_final = 0 }
#		set_variable = { global.ALLIES_locals_poland = 0 }
#		resolve_theater_poland_first = yes
#	} else = { log = "poland is not at war" }
#}

d_check_tags_allies = {
	every_country = {
		limit = {has_world_stage_coalition_allies = yes }
		log = "[THIS.GetName] is Allies"
	}
}

d_check_tags_komintern = {
	every_country = {
		limit = { has_world_stage_coalition_komintern = yes }
		log = "[THIS.GetName] is Komintern"
	}
}

d_check_tags_axis = {
	every_country = {
		limit = { has_world_stage_coalition_axis = yes }
		log = "[THIS.GetName] is Axis"
	}
}

d_check_tags_nonaligned = {
	every_country = {
		limit = { has_world_stage_coalition_nonaligned = yes }
		log = "[THIS.GetName] is nonaligned"
	}
}

d_check_tags_leagueofnations = {
	every_country = {
		limit = { has_world_stage_coalition_leagueofnations = yes }
		log = "[THIS.GetName] is League of Nations"
	}
}

d_check_tags_pactofsteel = {
	every_country = {
		limit = { has_world_stage_coalition_pactofsteel = yes }
		log = "[THIS.GetName] is Pact of Steel"
	}
}

d_waaaagh = {
	OSA = {  set_country_flag = can_play_alsace set_country_flag = can_play_westphalia set_country_flag = can_play_france set_country_flag = can_play_england set_country_flag = can_play_germany set_country_flag = can_play_netherlands set_country_flag = can_play_alpes set_country_flag = can_play_austria set_country_flag = can_play_italy set_country_flag = can_play_sicily set_country_flag = can_play_lybia set_country_flag = can_play_egypt set_country_flag = can_play_normandy set_country_flag = can_play_sealion }
	KOB = {  set_country_flag = can_play_alsace set_country_flag = can_play_westphalia set_country_flag = can_play_france set_country_flag = can_play_england set_country_flag = can_play_germany set_country_flag = can_play_netherlands set_country_flag = can_play_alpes set_country_flag = can_play_austria set_country_flag = can_play_italy set_country_flag = can_play_sicily set_country_flag = can_play_lybia set_country_flag = can_play_egypt set_country_flag = can_play_normandy set_country_flag = can_play_sealion }
	REI = {  set_country_flag = can_play_alsace set_country_flag = can_play_westphalia set_country_flag = can_play_france set_country_flag = can_play_england set_country_flag = can_play_germany set_country_flag = can_play_netherlands set_country_flag = can_play_alpes set_country_flag = can_play_austria set_country_flag = can_play_italy set_country_flag = can_play_sicily set_country_flag = can_play_poland set_country_flag = can_play_normandy set_country_flag = can_play_sealion }
}

d_show_proxy_info = {
	if = {
		limit = { has_variable = theater_owner }
			log = "[THIS.GetName] is theater proxy for [THIS.GetTheaterName]"
			log = "theater_owner: [?theater_owner]"
			log = "theater_owner_coalition: [?theater_owner_coalition]"
			log = "Deployed power:"
			log = "[?world_stage_power_deployed_by^100] other"
			log = "[?world_stage_power_deployed_by^101] germany"
			log = "[?world_stage_power_deployed_by^102] england"
			log = "[?world_stage_power_deployed_by^103] france"
			log = "[?world_stage_power_deployed_by^104] sovietunion"
			log = "[?world_stage_power_deployed_by^105] usa"
			log = "[?world_stage_power_deployed_by^106] china"
			log = "[?world_stage_power_deployed_by^107] netherlands"
			log = "[?world_stage_power_deployed_by^108] portugal"
			log = "[?world_stage_power_deployed_by^109] italy"
			log = "[?world_stage_power_deployed_by^110] japan"
			log = "[?world_stage_power_deployed_by^111] spain"
			log = "[?world_stage_power_deployed_by^112] other"
			log = "[?world_stage_power_deployed_by^113] nazigermany"
			log = "[?world_stage_power_deployed_by^114] manchuria"
			log = "[?world_stage_power_deployed_by^115] poland"
			log = "[?world_stage_power_deployed_by^116] mongolia"
			log = "[?world_stage_power_deployed_by^117] norway"
			log = "[?world_stage_power_deployed_by^118] ethiopia"
			log = "[?world_stage_power_deployed_by^119] austria"
		}
	if = {
		limit = { has_variable = world_stage_metropolis }
			log = "[THIS.GetName] is metropolis proxy for [THIS.GetMetropolisName]"
			log = "world_stage_metropolis: [?world_stage_metropolis]"
			log = "world_stage_coalition: [?world_stage_coalition]"
			log = "world_stage_power: [?world_stage_power]"
			log = "doctrine_bonus_land: [?doctrine_bonus_land]"
			log = "doctrine_bonus_navy: [?doctrine_bonus_navy]"
	}
	if = { limit = { NOT = { has_variable = theater_owner has_variable = world_stage_metropolis } } log = "[THIS.GetName] is not proxy" }
}

d_test_invasion_of_poland = {
	log = "test_invasion_of_poland"
	REI = {
		set_global_flag = REI_attack_poland_completed
		3 = { set_state_flag = theater_is_active }
		news_event = worldstage.15
		news_event = worldstage.55
		if = {
			limit = { has_global_flag = GER_SOV_pact_enabled }
			news_event = { id = worldstage.16 days = 7 random_days  = 10 }
		}
		add_named_threat = { 
			threat = 25
			name = REI_threat_attack_poland
		}
		101 = { subtract_from_variable = { world_stage_power = 60 } }
		3 = { add_to_variable = { world_stage_power_deployed_by^101 = 60 } }	# proxy for Poland
		3 = { add_to_variable = { attacker_strategic_advantage = 60 } }	
		3 = { set_variable = { coalition_side_attack = 3 } }				# different from focus, here Germany is Axis already
		3 = { world_stage_state_update_current_day = yes }
		set_global_flag = world_stage_world_war_2_is_active
	}
}

d_test_barbarossa = {
	REI = {
		set_global_flag = REI_barbarossa_completed
		set_temp_variable = { ger_forces_value = world_stage_power }
		multiply_temp_variable = { ger_forces_value = 0.75 }
		round_temp_variable = ger_forces_value
		clamp_temp_variable = { var = ger_forces_value min = 150 max = 999 }
		add_named_threat = { 
			threat = 25
			name = REI_threat_barbarossa
		}
		if = {
			limit = { has_global_flag = GER_SOV_pact_enabled }
			clr_global_flag = GER_SOV_pact_enabled
			# add soviet advantage here
			#news_event = worldstage.33	# fix event later	# has molotov
		} else = {
			#news_event = worldstage.34	# fix event later	# no molotov
			hidden_effect = {
				9 = {	# Belarus proxy
					set_state_flag = theater_is_active
					set_variable = { world_stage_power_deployed_by^101 = ger_forces_value }
					set_variable = { world_stage_power_deployed_by^104 = 30 }
					set_variable = { coalition_side_attack = 3 }
				}
				101 = {
					set_variable = { world_state_power_deployed_in^101 = ger_forces_value }
					subtract_from_variable = { world_stage_power = ger_forces_value }
				}
				104 = {
					set_variable = { world_state_power_deployed_in^104 = 30 }
					subtract_from_variable = { world_stage_power = 30 }
				}
			}
		}
	}
}

d_op_poland = {
	3 = { add_to_variable = { world_stage_power_deployed_by^115 = 150 } }	# proxy for Poland, theater
	log = "OP Poland is not real, it can't hurt you"
	log = "OP Poland: Deploys 150 of its overall strength in the Wolrd Stage to Poland"
}

d_defender_strategic_advantage = {
	if = {
		limit = { has_state_flag = theater_is_active }
		add_to_variable = { defender_strategic_advantage = args^0?100 }
		log = "added [?args^0?100] strategic advantage to defenders in [GetTheaterName]"
	} else = { log = "no active theater selected" }
}

d_attacker_strategic_advantage = {
	if = {
		limit = { has_state_flag = theater_is_active }
		add_to_variable = { attacker_strategic_advantage = args^0?100 }
		log = "added [?args^0?100] strategic advantage to attackers in [GetTheaterName]"
	} else = { log = "no active theater selected" }
}

d_fast_theaters = {
	if = {
		limit = { has_global_flag = debug_fast_theaters }
		log = "disable fast theaters"
		clr_global_flag = debug_fast_theaters
		every_state = { limit = { has_variable = theater_timer_base } multiply_variable = { theater_timer_base = 5 } }
	} else = {
		log = "enabable fast theaters"
		set_global_flag = debug_fast_theaters
		every_state = {
			limit = { has_variable = theater_timer_base }
			divide_variable = { theater_timer_base = 5 }
			if = {
				limit = { check_variable = { theater_timer_base < theater_timer } }
				set_variable = { theater_timer = theater_timer_base }
			}
		}
	}
}

d_world_stage_end_round = {
	if = {
		limit = { has_variable = theater_owner }
		if = {
			limit = { has_state_flag = theater_is_active }
			world_stage_end_round = yes
			log = "world_stage_end_round"
		} else = { log = "this theater is not active" }
	} else = { log = "no theater selected" }
}

d_rio_treaty = {
	if = {
		limit = { NOT = { has_global_flag = tiar_exists } }
		set_global_flag = tiar_exists
		log = "Create the Rio Treaty"
		AMC = { set_variable = { world_stage_coalition = 7 } }
		OKI = { set_variable = { world_stage_coalition = 7 } }
		105 = { set_variable = { world_stage_coalition = 7 } }
		every_state = {
			limit = { check_variable = { theater_owner = 105 } }
			set_variable = { theater_owner_coalition = 7 }
		}
	}
}

d_add_deployed_power = {
	if = {
		limit = { has_state_flag = theater_is_active }
		if = {
			set_temp_variable = { added_power = args^0?50 }
			limit = { has_variable = theater_owner }
			add_to_variable = { world_stage_power_deployed_by^theater_owner = added_power }
			log = "[GetTheaterName] added [?added_power] deployed power to defender"
		}
	} else = { log ="no active theater selected" }
}

d_set_world_stage_coalition = {
	if = {
		limit = { has_variable = world_stage_metropolis }
		set_temp_variable = { new_coalition = args^0?4 }
		var:world_stage_metropolis = {
			set_variable = { world_stage_coalition = new_coalition }
			log = "[GetMetropolisName] now belongs to [GetCoalitionName]"
			every_state = {
				limit = { check_variable = { theater_owner = PREV.world_stage_metropolis } }
				set_variable = { theater_owner_coalition = PREV.world_stage_coalition }
			}
		}
		world_stage_get_country_icon = yes
	} else = { log = "[THIS.GetName] does not have a metropolis" }
}

d_set_world_stage_owner_coalition = {
	if = {
		limit = { has_variable = theater_owner_coalition }
		set_variable = { theater_owner_coalition = args^0?4 }
		log = "[GetTheaterName] now belongs to [GetTheaterCoalitionOwner]"
	} else = { log = "[THIS.GetName] does not have a theater" }
}

d_start_phoney_war = {
	if = {
		limit = { NOT = { has_global_flag = world_stage_phoney_war_rages_on } }
		log = "Start the Phoney War!"
		every_country = {
			limit = { check_variable = { world_stage_metropolis > 100 } }
			if = {
				limit = {
					OR = {
						tag = KOB
						tag = OSA
						has_country_flag = will_join_allies
					}
				}
				activate_mission = world_stage_phoney_war_countdown_allies
			} else = {	# everyone else gets the axis versions
				activate_mission = world_stage_phoney_war_countdown_axis
			}
		}
		set_global_flag = world_stage_phoney_war_rages_on
	} else = { log = "The Phoney War already rages on" }
}

d_end_phoney_war = {
	if = {
		limit = { has_global_flag = world_stage_phoney_war_rages_on }
		log = "End the Phoney War"
		every_country = {
			limit = { has_active_mission = world_stage_phoney_war_countdown_allies }
			add_days_mission_timeout = {
				mission = world_stage_phoney_war_countdown_allies
				days = -180
			}
		}
		every_country = {
			limit = { has_active_mission = world_stage_phoney_war_countdown_axis }
			add_days_mission_timeout = {
				mission = world_stage_phoney_war_countdown_axis
				days = -180
			}
		}
		# does not clr_global_flag = world_stage_phoney_war_rages_on lest the actual effects do not fire from KOB
	} else = { log = "the Phoney War already ended" }
}

d_world_stage_phoney_war_rages_on = {
	if = {
		limit = { has_global_flag = world_stage_phoney_war_rages_on }
		log = "clr_global_flag = world_stage_phoney_war_rages_on"
		clr_global_flag = world_stage_phoney_war_rages_on
	} else = {
		log = "set_global_flag = world_stage_phoney_war_rages_on"
		set_global_flag = world_stage_phoney_war_rages_on
	}
}

d_add_operation_count = {
	add_to_variable = { global.overlord_number = 1 } log = "global.torch_number = [?global.overlord_number]"
	add_to_variable = { global.sealion_number = 1 } log = "global.torch_number = [?global.sealion_number]"
	add_to_variable = { global.husky_number = 1 } log = "global.torch_number = [?global.husky_number]"
	add_to_variable = { global.torch_number = 1 } log = "global.torch_number = [?global.torch_number]"
}

### } SIEGES {

d_allow_sieges_rule = {
	if = {
		limit = { has_global_flag = allow_sieges_rule }
		clr_global_flag = allow_sieges_rule
		log = "Disable Sieges"
	} else = {
		set_global_flag = allow_sieges_rule
		log = "Enable sieges"
	}
}

### } HELP

d_help_ss = {
	log = "------------ HELP ------------"
	log = "spawn_troops"
	log = "   spawn divisions on country, scales slightly with controlled states"
	log = "spawn_trools_all"
	log = "   spawn divisions on all countries, scales slightly with controlled states"
	log = "add_compliance_to_all_states"
	log = "   adds 100 compliance to all controlled states"
	log = "remove_compliance_to_all_states"
	log = "   removes 100 compliance to all controlled states"
	log = "annex_all_southern_japan"
	log = "	  annexes all states in southern Japan"
	log = "annex_all_northern_japan"
	log = "   annexes all states in northern Japan"
	log = "annex_all_central_japan"
	log = "   annexes all states in central Japan"
	log = "get_religion_drift"
	log = "   updates the country's religion drift"
	log = "allow_cthulhu"
	log = "   enables Cthulhu religion in the game and interface"
	log = "set_country_religion [argument]"
	log = "   changes the country's religion according to argument"
	log = "set_country_religion_1"
	log = "   changes country's religion to Buddhism"
	log = "set_country_religion_2"
	log = "   changes country's religion to Shintoism"
	log = "set_country_religion_3"
	log = "   changes country's religion to Christianity"
	log = "set_country_religion_4"
	log = "   changes country's religion to Taoism"
	log = "set_country_religion_5"
	log = "   changes country's religion to Confucianism"
	log = "set_country_religion_6"
	log = "   changes country's religion to Secularism"
	log = "set_country_religion_7"
	log = "   changes country's religion to Cthulhu"
	log = "release_all_clans"
	log = "   every country releases all independent clans"
	log = "random_ladies_all_clans"
	log = "   adds random secondary leaders to clans that are monarchies from the pool of clan ladies"
	log = "easer_egg_rule"
	log = "   switches on or off the easter egg game rule"
	log = "load_generic_focus_tree"
	log = "   loads the generic focus tree for the player country and resets all focuses"
	log = "PRO_can_choose_zaibatu_leader"
	log = "   switches the ability of [PRO.GetName] to select Zaibatsu leaders"
	log = "cthulhu_boon_1"
	log = "   fires event ostasiencthulhu.3"
	log = "cthulhu_boon_2"
	log = "   fires event ostasiencthulhu.4"
	log = "cthulhu_boon_3"
	log = "   fires event ostasiencthulhu.5"
	log = "cthulhu_boon_4"
	log = "   fires event ostasiencthulhu.6"
	log = "add_modifier_for_party_popularity"
	log = "   adds the dynamic modifier for party popularity bonuses"
	log = "check_doctrine_level"
	log = "   returns the country's doctrine level"
	log = "GER_SOV_pact"
	log = "   switches on/off the Molotov-Ribbentrop Pact"
	log = "check_coalition_triggers"
	log = "   returns the country's coalition in the World Stage"
	log = "show_world_stage_power"
	log = "   returns the power of every country in the World Stage"
	log = "add_world_stage_power_all"
	log = "   adds 25 to every countries' power in the World Stage and return values"
	log = "world_stage_set_theater_active [argument]"
	log = "   switches on/off the theater given by argument, if the state is a proxy to the World Stage"
	log = "reset_metropolis"
	log = "   resets the metropolis for every existing country with a metropolis to starting values, and return values"
	log = "reset_coalitions"
	log = "   resets the coalition for every existing country to starting values, and return values"
	log = "reset_lon_member_relation_modifier"
	log = "   adds relation modifiers ($lon_member_relation_modifier$) between all members of League of Nations"
	log = "check_lon_relation_modifier"
	log = "   returns whether any other country has the modifier ($lon_member_relation_modifier$) active towards this country"
	log = "netherlands_aligned_axis"
	log = "   sets country flag for Netherlands joining Axis (will_join_axis)"
	log = "portugal_aligned_axis"
	log = "   sets country flag for Portugal joining Axis (will_join_axis)"
#	log = "force_poland_surrender"
#	log = "   (depricated)"
	log = "check_tags_allies"
	log = "   returns every country that belongs to Allies in the World Stage"
	log = "check_tags_komintern"
	log = "   returns every country that belongs to Komintern in the World Stage"
	log = "check_tags_axis"
	log = "   returns every country that belongs to Axis in the World Stage"
	log = "check_tags_nonaligned"
	log = "   returns every country that does not belong to a coalition in the World Stage"
	log = "check_tags_leagueofnations"
	log = "   returns every country that belongs to League of Nations in the World Stage"
	log = "check_tags_pactofsteel"
	log = "   returns every country that belongs to Pact of Steel in the World Stage"
	log = "waaaagh"
	log = "   (depricated) allows [REI.GetName], [KOB.GetName] and [OSA.GetName] to act on every theater in the World Stage"
	log = "show_proxy_info"
	log = "   returns whether or not the current state is a proxy for theater or metropolis and displays relevant information"
	log = "world_stage_get_theater_info_from_metropolis"
	log = "   imports to theater proxy all information from metropolis proxy, for all suitable states"
	log = "world_stage_get_tag_info_from_metropolis"
	log = "   imports to country all information from metropolis proxy, for all suitable states"
	log = "world_stage_get_country_icon"
	log = "   calculates and returns the country's flag icon frame on the world stage menu"
	log = "world_stage_join_allies"
	log = "   makes the selected country joins the Allies and updates any proxy for its metropolis"
	log = "world_stage_join_komintern"
	log = "   makes the selected country joins the Comintern and updates any proxy for its metropolis"
	log = "world_stage_join_axis"
	log = "   makes the selected country joins the Axis and updates any proxy for its metropolis"
	log = "world_stage_join_nonaligned"
	log = "   makes the selected country leaves World Stage coalitions and updates any proxy for its metropolis"
	log = "world_stage_join_leagueofnations"
	log = "   makes the selected country joins the League of Nations and updates any proxy for its metropolis, updates the national spirit and relations modifiers, and if the League of Nations no longer exists, joins no one instead"
	log = "world_stage_join_pactofsteel"
	log = "   makes the selected country joins the Pact of Steel and updates any proxy for its metropolis, and if the Pact of Steel no longer exists, joins Axis instead"
	log = "world_stage_join_tiar"
	log = "   if the Rio Treaty, makes the selected country joins the Rio Treaty and updates any proxy for its metropolis"
	log = "world_stage_update_tag"
	log = "   updates the current country according to the variables held by its corresponding metropolis proxy"
	log = "world_stage_state_update_current_day"
	log = "   updates the current proxy theater (replicating world_stage_state_daily_effect) without decreasing the timer or resolving the theater"
	log = "defender_strategic_advantage [argument]"
	log = "   adds the specified argument to the defenders’ strategic advantage in the currently selected proxy theater, if it is an active theater. If there is no argument, defaults to 100"
	log = "attacker_strategic_advantage [argument]"
	log = "   adds the specified argument to the attackers’ strategic advantage in the currently selected proxy theater, if it is an active theater. If there is no argument, defaults to 100"
	log = "fast_theaters"
	log = "   divides the duration of all theaters by 5, or returns them to their original values"
	log = "world_stage_end_round"
	log = "   ends the round in the currently selected theater, if it is active"
	log = "rio_treaty"
	log = "   creates the Rio Treaty coalition in the World Stage, adds American Chiba and American Okinawa to it"
	log = "op_poland"
	log = "   adds 150 to Poland’s deployed power in Poland"
	log = "add_deployed_power [argument]"
	log = "   for an active theater's selected proxy, adds the argument to the theater owner's deployed power (defaults to 50 if no argument is provided)"
	log = "set_world_stage_coalition"
	log = "   for a country with a metropolis, sets the coalition according to argument (if no argument is provided, defaults to 4 [non-aligned])"
	log = "set_world_stage_owner_coalition"
	log = "   for a theater's selected proxy, sets its coalition owner according to argument (if no argument is provided, defaults to 4 [non-aligned])"
	log = "start_phoney_war"
	log = "   activates the missions for the Phoney War for every eligible country and sets the global flag world_stage_phoney_war_rages_on"
	log = "end_phoney_war"
	log = "   for all Phoney War active missions, sets the timers to zero"
	log = "world_stage_phoney_war_rages_on"
	log = "   switches the global flag world_stage_phoney_war_rages_on on and off"
	log = "add_operation_count"
	log = "   increases the cosmetic counter of every World Stage operation (such as Overlord)"
	log = "unification_get_score"
	log = "   returns the country's unification score"
	log = "unification_count_states_southern_japan"
	log = "   returns the number of controlled states in southern Japan"
	log = "unification_count_states_central_japan"
	log = "   returns the number of controlled states in central Japan"
	log = "unification_count_states_northern_japan"
	log = "   returns the number of controlled states in northern Japan"
	log = "allow_sieges_rule"
	log = "   switches on and off the siege mechanic (disabling the rule when there are on-going sieges can cause bugs)"
}