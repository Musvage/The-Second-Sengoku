###
###	these effects are exectued on on_actions/daily by one random country
### for simplicity, all possible axis and allies countries will be featured in each theater
### since kominter will never go to war with allies, the code will treat komintern as allies
###
### each country has it's own doctrine modifiers
### off-map-only countries have a 'generic' doctrine modifier updated yearly
### japanese nations/Korea/Manchuria do not appear here since they have no off-map presence
###

world_stage_activate_daily_state_effect_depricated = {		### REMOVE LATER	### REMOVE LATER	### REMOVE LATER	### REMOVE LATER	### REMOVE LATER
	1 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	2 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	3 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	4 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	5 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	6 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	7 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	8 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	9 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	10 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	11 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	12 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	13 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	14 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	15 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	16 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	17 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	18 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	19 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	20 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	21 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	22 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	23 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	24 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	25 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	26 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
	27 = { if = { limit = {  has_state_flag = theater_is_active } world_stage_state_daily_effect = yes } }
}		### REMOVE LATER	### REMOVE LATER	### REMOVE LATER	### REMOVE LATER	### REMOVE LATER	### REMOVE LATER	### REMOVE LATER

world_stage_state_daily_effect_depricated = {	# activated from on_actions/daily from a random scope
		### REMOVE LATER		### REMOVE LATER		### REMOVE LATER		### REMOVE LATER		### REMOVE LATER		### REMOVE LATER
	subtract_from_variable = { theater_timer = 1 }
	# axis strength
	set_variable = { AXIS_strength_final = 0 }
	add_to_variable = { AXIS_strength_final = AXIS_strength_bonus }
	set_variable = { AXIS_number = 0 }
	if = {
		limit = { check_variable = { GER_strength > 0 } }
		set_temp_variable = { strength_value = GER_strength }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.GER_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.GER_doctrine_bonus_navy }
		}
		add_to_variable = { AXIS_strength_final = strength_value }
		add_to_variable = { AXIS_number = 1 }
	}
	if = {
		limit = { china_is_axis = yes check_variable = { CHI_strength > 0 } }
		set_temp_variable = { strength_value = CHI_strength }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.CHI_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.CHI_doctrine_bonus_navy }
		}
		add_to_variable = { AXIS_strength_final = strength_value }
		add_to_variable = { AXIS_number = 1 }
	}
	if = {
		limit = { netherlands_is_axis = yes check_variable = { NET_strength > 0 } }
		set_temp_variable = { strength_value = NET_strength }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.NET_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.NET_doctrine_bonus_navy }
		}
		add_to_variable = { AXIS_strength_final = strength_value }
		add_to_variable = { AXIS_number = 1 }
	}
	if = {
		limit = { portugal_is_axis = yes check_variable = { PRT_strength > 0 } }
		set_temp_variable = { strength_value = PRT_strength }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.PRT_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.PRT_doctrine_bonus_navy }
		}
		add_to_variable = { AXIS_strength_final = strength_value }
		add_to_variable = { AXIS_number = 1 }
	}
	if = {
		limit = { check_variable = { AXIS_locals > 0 } }
		set_temp_variable = { strength_value = AXIS_locals }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.generic_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.generic_doctrine_bonus_navy }
		}
		add_to_variable = { AXIS_strength_final = strength_value }
		add_to_variable = { AXIS_number = 1 }
	}
	# allies strength
	set_variable = { ALLIES_strength_final = 0 }
	add_to_variable = { ALLIES_strength_final = ALLIES_strength_bonus }
	set_variable = { ALLIES_number = 0 }
	if = {
		limit = { france_is_allies = yes check_variable = { FRA_strength > 0 } }
		set_temp_variable = { strength_value = FRA_strength }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.FRA_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.FRA_doctrine_bonus_navy }
		}
		add_to_variable = { ALLIES_strength_final = strength_value }
		add_to_variable = { ALLIES_number = 1 }
	}
	if = {
		limit = { england_is_allies = yes check_variable = { ENG_strength > 0 } }
		set_temp_variable = { strength_value = ENG_strength }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.ENG_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.ENG_doctrine_bonus_navy }
		}
		add_to_variable = { ALLIES_strength_final = strength_value }
		add_to_variable = { ALLIES_number = 1 }
	}
	if = {
		limit = { netherlands_is_allies = yes check_variable = { NET_strength > 0 } }
		set_temp_variable = { strength_value = NET_strength }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.NET_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.NET_doctrine_bonus_navy }
		}
		add_to_variable = { ALLIES_strength_final = strength_value }
		add_to_variable = { ALLIES_number = 1 }
	}
	if = {
		limit = { portugal_is_allies = yes check_variable = { PRT_strength > 0 } }
		set_temp_variable = { strength_value = PRT_strength }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.PRT_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.PRT_doctrine_bonus_navy }
		}
		add_to_variable = { ALLIES_strength_final = strength_value }
		add_to_variable = { ALLIES_number = 1 }
	}
	if = {
		limit = { OR = { china_is_komin = yes china_is_allies = yes } check_variable = { CHI_strength > 0 } }
		set_temp_variable = { strength_value = CHI_strength }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.CHI_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.CHI_doctrine_bonus_navy }
		}
		add_to_variable = { ALLIES_strength_final = strength_value }
		add_to_variable = { ALLIES_number = 1 }
	}
	if = {
		limit = { OR = { russia_is_komin = yes russia_is_allies = yes } check_variable = { SOV_strength > 0 } }
		set_temp_variable = { strength_value = SOV_strength }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.SOV_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.SOV_doctrine_bonus_navy }
		}
		add_to_variable = { ALLIES_strength_final = strength_value }
		add_to_variable = { ALLIES_number = 1 }
	}
	if = {
		limit = { usa_is_allies = yes check_variable = { USA_strength > 0 } }
		set_temp_variable = { strength_value = USA_strength }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.USA_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.USA_doctrine_bonus_navy }
		}
		add_to_variable = { ALLIES_strength_final = strength_value }
		add_to_variable = { ALLIES_number = 1 }
	}
	if = {
		limit = { check_variable = { ALLIES_locals > 0 } }
		set_temp_variable = { strength_value = ALLIES_locals }
		if = {
			limit = { NOT = { has_state_flag = is_naval_theater } }
			multiply_variable = { strength_value = global.generic_doctrine_bonus_land }
		} else = {
			multiply_variable = { strength_value = global.generic_doctrine_bonus_navy }
		}
		add_to_variable = { ALLIES_strength_final = strength_value }
		add_to_variable = { ALLIES_number = 1 }
	}
	#world_s tage_g et_time r_fra me = yes
	if = {
		limit = { OR = { check_variable = { theater_timer < 1 } check_variable = { AXIS_number < 1 } check_variable = { ALLIES_number < 1 } } }
		resolve_threater = yes
	}
			### REMOVE LATER		### REMOVE LATER		### REMOVE LATER		### REMOVE LATER		### REMOVE LATER
}

resolve_threater = {
	clamp_variable = { var = AXIS_number min = 1 max = 10 }									# safety check to avoid divisions by zero
	clamp_variable = { var = ALLIES_number min = 1 max = 10 }								# safety check to avoid divisions by zero
	set_temp_variable = { AXIS_remaining_forces = 0 }
	set_temp_variable = { ALLIES_remaining_forces = 0 }
	# get axis attack
	randomize_temp_variable = {	var = axis_attack distribution = uniform min = 0.05 max = 0.2 }					# each side causes damage equal to [5;20]% of their final strength
	multiply_temp_variable = { axis_attack = AXIS_strength_final }
	divide_temp_variable = { axis_attack = ALLIES_number }										# damage is divided among enemies
	clamp_temp_variable = { var = axis_attack min = 1 max = 999 } round_temp_variable = axis_attack											# it will rounded to minimum 1 damage for evey enemy
	# get allies attack
	randomize_temp_variable = {	var = allies_attack distribution = uniform min = 0.05 max = 0.2 }
	multiply_temp_variable = { allies_attack = ALLIES_strength_final }
	divide_temp_variable = { allies_attack = AXIS_number }
	clamp_temp_variable = { var = allies_attack min = 1 max = 999 } round_temp_variable = allies_attack
	# damage axis countries
	if = {
		limit = { check_variable = { GER_strength > 0 } }
		subtract_from_variable = { GER_strength = allies_attack }
		add_to_temp_variable = { AXIS_remaining_forces = GER_strength }
		clamp_variable = {var = GER_strength min = 0 max = 999 }
	}
	if = {
		limit = { china_is_axis = yes check_variable = { CHI_strength > 0 } }
		subtract_from_variable = { CHI_strength = allies_attack }
		add_to_temp_variable = { AXIS_remaining_forces = CHI_strength }
		clamp_variable = {var = CHI_strength min = 0 max = 999 }
	}
	if = {
		limit = { netherlands_is_axis = yes check_variable = { NET_strength > 0 } }
		subtract_from_variable = { NET_strength = allies_attack }
		add_to_temp_variable = { AXIS_remaining_forces = NET_strength }
		clamp_variable = {var = NET_strength min = 0 max = 999 }
	}
	if = {
		limit = { portugal_is_axis = yes check_variable = { PRT_strength > 0 } }
		subtract_from_variable = { PRT_strength = allies_attack }
		add_to_temp_variable = { AXIS_remaining_forces = PRT_strength }
		clamp_variable = {var = PRT_strength min = 0 max = 999 }
	}
	if = {
		limit = { check_variable = { AXIS_locals > 0 } }
		subtract_from_variable = { AXIS_locals = allies_attack }
		add_to_temp_variable = { AXIS_remaining_forces = AXIS_locals }
		clamp_variable = {var = AXIS_locals min = 0 max = 999 }
	}
	# damage axis countries
	if = {
		limit = { france_is_allies = yes check_variable = { FRA_strength > 0 } }
		subtract_from_variable = { FRA_strength = axis_attack }
		add_to_temp_variable = { ALLIES_remaining_forces = FRA_strength }
		clamp_variable = {var = FRA_strength min = 0 max = 999 }
	}
	if = {
		limit = { england_is_allies = yes check_variable = { ENG_strength > 0 } }
		subtract_from_variable = { ENG_strength = axis_attack }
		add_to_temp_variable = { ALLIES_remaining_forces = ENG_strength }
		clamp_variable = {var = ENG_strength min = 0 max = 999 }
	}
	if = {
		limit = { netherlands_is_allies = yes check_variable = { NET_strength > 0 } }
		subtract_from_variable = { NET_strength = axis_attack }
		add_to_temp_variable = { ALLIES_remaining_forces = NET_strength }
		clamp_variable = {var = NET_strength min = 0 max = 999 }
	}
	if = {
		limit = { portugal_is_allies = yes check_variable = { PRT_strength > 0 } }
		subtract_from_variable = { PRT_strength = axis_attack }
		add_to_temp_variable = { ALLIES_remaining_forces = PRT_strength }
		clamp_variable = {var = PRT_strength min = 0 max = 999 }
	}
	if = {
		limit = { OR = { china_is_allies = yes china_is_komin = yes } check_variable = { CHI_strength > 0 } }
		subtract_from_variable = { CHI_strength = axis_attack }
		add_to_temp_variable = { ALLIES_remaining_forces = CHI_strength }
		clamp_variable = {var = CHI_strength min = 0 max = 999 }
	}
	if = {
		limit = { OR = { russia_is_allies = yes russia_is_komin = yes } check_variable = { SOV_strength > 0 } }
		subtract_from_variable = { SOV_strength = axis_attack }
		add_to_temp_variable = { ALLIES_remaining_forces = SOV_strength }
		 clamp_variable = {var = SOV_strength min = 0 max = 999 }
	}
	if = {
		limit = { usa_is_allies = yes check_variable = { USA_strength > 0 } }
		subtract_from_variable = { USA_strength = axis_attack }
		add_to_temp_variable = { ALLIES_remaining_forces = USA_strength }
		clamp_variable = {var = USA_strength min = 0 max = 999 }
	}
	if = {
		limit = { check_variable = { ALLIES_locals > 0 } }
		subtract_from_variable = { ALLIES_locals = axis_attack }
		add_to_temp_variable = { ALLIES_remaining_forces = ALLIES_locals }
		clamp_variable = {var = ALLIES_locals min = 0 max = 999 }
	}
	# check for winners
	if = {																												# someone wins
		limit = { OR = { check_variable = { AXIS_remaining_forces < 1 } check_variable = { ALLIES_remaining_forces < 1 } } }
		if = {
			limit = { check_variable = { ALLIES_remaining_forces < AXIS_remaining_forces } }						# AXIS wins
			news_event = worldstage.1
		} else = {																										# ALLIES wins
			news_event = worldstage.2
		}
		set_variable = { AXIS_strength_bonus = 0 }														# clear strategic advantages when someone wins
		set_variable = { ALLIES_strength_bonus = 0 }
	} else = {																											# no one wins, theater continues
		divide_variable = { AXIS_strength_bonus = 2 }														# halves strategic advantages
		round_variable = AXIS_strength_bonus 
		divide_variable = { ALLIES_strength_bonus = 2 }
		round_variable = ALLIES_strength_bonus 
	}
	set_variable = { theater_timer = theater_timer_base }																	# always restarts clock
}

### NEW CODE STARTS HERE

world_stage_activate_daily_state_effect = { # activated from on_actions/daily from a random scope
	every_state = { limit = { has_state_flag = theater_is_active } world_stage_state_daily_effect = yes }
}

world_stage_state_daily_effect = {
	subtract_from_variable = { theater_timer = 10 }	### DEBUG, CHANGE TO 1 LATER ### DEBUG, CHANGE TO 1 LATER ### DEBUG, CHANGE TO 1 LATER ### DEBUG, CHANGE TO 1 LATER 
	log = "theater_timer [?theater_timer]"
	# calculate deployed forces (everyone is either axis or allies)
	set_variable = { attacker_deployed_power = 0 }
	set_variable = { defender_deployed_power = 0 }
	every_state = {
		limit = { has_variable = world_stage_metropolis }
		# defender (variable theater_owner_coalition)
		if = {
			limit = { check_variable = { world_stage_coalition = PREV.theater_owner_coalition } }
			set_temp_variable = { deployed_power_here = world_stage_power_deployed^var:PREV.theater_id }
			if = { limit = { PREV = { has_state_flag = is_navy_theater } } multiply_temp_variable = { deployed_power_here = doctrine_bonus_navy }
			} else = { multiply_temp_variable = { deployed_power_here = doctrine_bonus_land } }
			add_to_variable = { PREV.defender_deployed_power = deployed_power_here }
		}
		if = {	# special permissions
			limit = { OR = {
				AND = { check_variable = { world_stage_coalition = 2 } check_variable = { PREV.theater_owner_coalition = 1 } has_global_flag = russia_joined_ww2 }
				AND = { check_variable = { world_stage_coalition = 1 } check_variable = { PREV.theater_owner_coalition = 2 } has_global_flag = russia_joined_ww2 }
			} }
			set_temp_variable = { deployed_power_here = world_stage_power_deployed^var:PREV.theater_id }
			if = { limit = { PREV = { has_state_flag = is_navy_theater } } multiply_temp_variable = { deployed_power_here = doctrine_bonus_navy }
			} else = { multiply_temp_variable = { deployed_power_here = doctrine_bonus_land } }
			add_to_variable = { PREV.defender_deployed_power = deployed_power_here }
		}
		# attacker (variable coalition_side_attack)
		if = {
			limit = { check_variable = { world_stage_coalition = PREV.coalition_side_attack } }
			set_temp_variable = { deployed_power_here = world_stage_power_deployed^var:PREV.theater_id }
			if = { limit = { PREV = { has_state_flag = is_navy_theater } } multiply_temp_variable = { deployed_power_here = doctrine_bonus_navy }
			} else = { multiply_temp_variable = { deployed_power_here = doctrine_bonus_land } }
			add_to_variable = { PREV.attacker_deployed_power = deployed_power_here }
		}
		if = {	# special permissions
			limit = { OR = {
				AND = { check_variable = { world_stage_coalition = 2 } check_variable = { PREV.coalition_side_attack = 1 } has_global_flag = russia_joined_ww2 }
				AND = { check_variable = { world_stage_coalition = 1 } check_variable = { PREV.coalition_side_attack = 2 } has_global_flag = russia_joined_ww2 }
			} }
			set_temp_variable = { deployed_power_here = world_stage_power_deployed^var:PREV.theater_id }
			if = { limit = { PREV = { has_state_flag = is_navy_theater } } multiply_temp_variable = { deployed_power_here = doctrine_bonus_navy }
			} else = { multiply_temp_variable = { deployed_power_here = doctrine_bonus_land } }
			add_to_variable = { PREV.attacker_deployed_power = deployed_power_here }
		}
		### ADD LOCAL FORCES
	}
	world_stage_get_timer_frame = yes	# GUI burocracy
	if = {
		limit = { OR = { check_variable = { theater_timer < 1 } check_variable = { defender_deployed_power < 1 } check_variable = { attacker_deployed_power < 1 } } }
		log = "[THIS.GetTheaterName]: world_stage_end_round [THIS.GetName]" 
		world_stage_end_round = yes
	}
}

world_stage_state_update_current_day = {	# same as "world_stage_state_daily_effect", but does not changes the timer or resolve the theater (if it should be the case)
	# calculate deployed forces (everyone is either axis or allies)
	set_variable = { attacker_deployed_power = 0 }
	set_variable = { defender_deployed_power = 0 }
	every_state = {
		limit = { has_variable = world_stage_metropolis }
		# defender (variable theater_owner_coalition)
		if = {
			limit = { check_variable = { world_stage_coalition = PREV.theater_owner_coalition } }
			set_temp_variable = { deployed_power_here = world_stage_power_deployed^var:PREV.theater_id }
			if = { limit = { PREV = { has_state_flag = is_navy_theater } } multiply_temp_variable = { deployed_power_here = doctrine_bonus_navy }
			} else = { multiply_temp_variable = { deployed_power_here = doctrine_bonus_land } }
			add_to_variable = { PREV.defender_deployed_power = deployed_power_here }
		}
		if = {	# special permissions
			limit = { OR = {
				AND = { check_variable = { world_stage_coalition = 2 } check_variable = { PREV.theater_owner_coalition = 1 } has_global_flag = russia_joined_ww2 }
				AND = { check_variable = { world_stage_coalition = 1 } check_variable = { PREV.theater_owner_coalition = 2 } has_global_flag = russia_joined_ww2 }
			} }
			set_temp_variable = { deployed_power_here = world_stage_power_deployed^var:PREV.theater_id }
			if = { limit = { PREV = { has_state_flag = is_navy_theater } } multiply_temp_variable = { deployed_power_here = doctrine_bonus_navy }
			} else = { multiply_temp_variable = { deployed_power_here = doctrine_bonus_land } }
			add_to_variable = { PREV.defender_deployed_power = deployed_power_here }
		}
		# attacker (variable coalition_side_attack)
		if = {
			limit = { check_variable = { world_stage_coalition = PREV.coalition_side_attack } }
			set_temp_variable = { deployed_power_here = world_stage_power_deployed^var:PREV.theater_id }
			if = { limit = { PREV = { has_state_flag = is_navy_theater } } multiply_temp_variable = { deployed_power_here = doctrine_bonus_navy }
			} else = { multiply_temp_variable = { deployed_power_here = doctrine_bonus_land } }
			add_to_variable = { PREV.attacker_deployed_power = deployed_power_here }
		}
		if = {	# special permissions
			limit = { OR = {
				AND = { check_variable = { world_stage_coalition = 2 } check_variable = { PREV.coalition_side_attack = 1 } has_global_flag = russia_joined_ww2 }
				AND = { check_variable = { world_stage_coalition = 1 } check_variable = { PREV.coalition_side_attack = 2 } has_global_flag = russia_joined_ww2 }
			} }
			set_temp_variable = { deployed_power_here = world_stage_power_deployed^var:PREV.theater_id }
			if = { limit = { PREV = { has_state_flag = is_navy_theater } } multiply_temp_variable = { deployed_power_here = doctrine_bonus_navy }
			} else = { multiply_temp_variable = { deployed_power_here = doctrine_bonus_land } }
			add_to_variable = { PREV.attacker_deployed_power = deployed_power_here }
		}
	}
	world_stage_get_timer_frame = yes	# GUI burocracy
} d_world_stage_state_update_current_day = { world_stage_state_update_current_day = yes log = "world_stage_state_update_current_day" }

world_stage_end_round = {
	log = "AA!"
	# get number of combatants on each side (damage tanken is divided)
	set_temp_variable = { number_of_defenders = 0 }
	set_temp_variable = { number_of_attackers = 0 }
	every_state = {
		limit = { has_variable = world_stage_metropolis }
		# defender (variable theater_owner_coalition)
		if = {
			limit = { check_variable = { world_stage_coalition = PREV.theater_owner_coalition } }
			add_to_variable = { PREV.number_of_defenders = 1 }
		}
		if = {	# special permissions
			limit = { OR = {
				AND = { check_variable = { world_stage_coalition = 2 } check_variable = { PREV.theater_owner_coalition = 1 } has_global_flag = russia_joined_ww2 }
				AND = { check_variable = { world_stage_coalition = 1 } check_variable = { PREV.theater_owner_coalition = 2 } has_global_flag = russia_joined_ww2 }
			} }
			add_to_variable = { PREV.number_of_defenders = 1 }
		}
		# attacker (variable coalition_side_attack)
		if = {
			limit = { check_variable = { world_stage_coalition = PREV.coalition_side_attack } }
			add_to_variable = { PREV.number_of_attackers = 1 }
		}
		if = {	# special permissions
			limit = { OR = {
				AND = { check_variable = { world_stage_coalition = 2 } check_variable = { PREV.coalition_side_attack = 1 } has_global_flag = russia_joined_ww2 }
				AND = { check_variable = { world_stage_coalition = 1 } check_variable = { PREV.coalition_side_attack = 2 } has_global_flag = russia_joined_ww2 }
			} }
			add_to_variable = { PREV.number_of_attackers = 1 }
		}
	}
	clamp_variable = {var = number_of_defenders min = 1 max = 999 }
	clamp_variable = {var = number_of_attackers min = 1 max = 999 }
	# roll dices for attack (5%-20% of deployed power)
	randomize_temp_variable = {	var = defender_dice distribution = uniform min = 0.05 max = 0.2 }
	randomize_temp_variable = {	var = attacker_dice distribution = uniform min = 0.05 max = 0.2 }
	multiply_temp_variable = { defender_dice = defender_deployed_power }
	multiply_temp_variable = { attacker_dice = attacker_deployed_power }
	#add_to_temp_variable = { defender_dice = defender_strategic_advantage }		# find a rule for this later # TO-DO # TO-DO # TO-DO # TO-DO # TO-DO # TO-DO # TO-DO # TO-DO 
	#add_to_temp_variable = { attacker_dice = attacker_strategic_advantage }		# find a rule for this later # TO-DO # TO-DO # TO-DO # TO-DO # TO-DO # TO-DO # TO-DO # TO-DO 
	subtract_from_variable = { defender_deployed_power = attacker_dice }		# subtratcs from the whole forces before calculating indivudual damage to save code
	subtract_from_variable = { attacker_deployed_power = defender_dice }
	divide_temp_variable = { defender_dice = number_of_attackers }				# damage is divided among all combatants
	divide_temp_variable = { attacker_dice = number_of_defender }
	clamp_temp_variable = { var = defender_dice min = 1 max = 999 } round_temp_variable = defender_dice
	clamp_temp_variable = { var = attacker_dice min = 1 max = 999 } round_temp_variable = attacker_dice
	# causes damage to enemy (reduces their deployed power)
	# goes through the array, checks each actually deployed and causes de damage
	set_variable = { attacker_deployed_power = 0 }	## DEBUG ## DEBUG ## DEBUG ## DEBUG ## DEBUG ## DEBUG ## DEBUG ## DEBUG 
	log = "BB! [THIS.GetName]"
	if = {
		limit = { check_variable = { attacker_deployed_power < 1 } }	# checks if attacker lost first (if both loose, draw favours defender)
		log = "defender won, pushes front towards enemy"
		# defender won, pushes front towards enemy
		set_temp_variable = { new_fronts = 0 }
		for_loop_effect = {
			value = theater
			start = 0
			end = 3
			add = 1
			var:connects_to^theater = {
				log = "SCOPE TEST: index ([?theater]) // GetTheaterName: [GetTheaterName] // THIS: [THIS.GetName] // PREV: [?PREV.GetName]"	# SCOPE TEST
				if = {
					limit = { NOT = { check_variable = { connects_to^theater = 0 } } }
					if = {
						limit = { check_variable = { theater_owner_coalition = PREV.coalition_side_attack } }
						log = "PREV.coalition_side_attack [?PREV.coalition_side_attack]"
						set_state_flag = theater_is_active
					}
				}
				
			}
		}
	}
	if = {
		limit = { check_variable = { defender_deployed_power < 1 } }
		# attacker won, pushes front towards enemy
	}
}

