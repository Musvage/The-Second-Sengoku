on_actions = {
	# flavour game start
	on_startup = {
		effect = {
			### CENSORED / UNCENSORED GERMAN FLAGS ##
			if = {
				limit = { has_game_rule = { rule = censored_or_uncensored_german_flag option = UNCENSORED } }
				REI = {
					set_cosmetic_tag = REI_UNCENSORED
					set_country_leader_ideology = nazism_2
					mark_focus_tree_layout_dirty = yes
				}
				FER = {
					set_cosmetic_tag = FER_uncensored
					mark_focus_tree_layout_dirty = yes
				}
				random_country = {
					set_global_flag = has_uncensored_german_flag
				}
			}
			### RANDOM ADVISER PORTRAITS ###
				# The Japans
			AMO = { set_up_specific_portraits_of_random_advisers = yes }
			CHU = { set_up_specific_portraits_of_random_advisers = yes }
			EZO = { set_up_specific_portraits_of_random_advisers = yes }
			KAN = { set_up_specific_portraits_of_random_advisers = yes }
			KYU = { set_up_specific_portraits_of_random_advisers = yes }
			PRO = { set_up_specific_portraits_of_random_advisers = yes }
			SHI = { set_up_specific_portraits_of_random_advisers = yes }
			SHO = { set_up_specific_portraits_of_random_advisers = yes }
			TOH = { set_up_specific_portraits_of_random_advisers = yes }
				# The Nanbans
			AMC = { set_up_specific_portraits_of_random_advisers = yes }
			OKI = { set_up_specific_portraits_of_random_advisers = yes }
			FER = { set_up_specific_portraits_of_random_advisers = yes }
			HIR = { set_up_specific_portraits_of_random_advisers = yes }
			KOB = { set_up_specific_portraits_of_random_advisers = yes }
			OSA = { set_up_specific_portraits_of_random_advisers = yes }
			PRT = { set_up_specific_portraits_of_random_advisers = yes }
			REI = { set_up_specific_portraits_of_random_advisers = yes }
			WIT = { set_up_specific_portraits_of_random_advisers = yes }
			KIT = { set_up_specific_portraits_of_random_advisers = yes }
			SPR = { set_up_specific_portraits_of_random_advisers = yes }
				# The others
			JOS = { set_up_specific_portraits_of_random_advisers = yes }
			GAN = { set_up_specific_portraits_of_random_advisers = yes }
				# The clans
			every_possible_country = {
				limit = { has_country_flag = is_clan }
				set_up_specific_portraits_of_random_advisers = yes
			}
			### EASTER EGG CHARACTERS ###
			if = {
				limit = { has_game_rule = { rule = allow_easteregg_characters option = EASTERGG_ALLOWED } }
				set_global_flag = eastereggs_enabled
				log = "recruit easter egg characters"
				PRT = { fernando_pessoa_heteronym_rotation = yes }
				# old code
				#FER = { recruit_character = FER_alexei_ivanov }	# chemical warfare
				#AMC = {
				#	recruit_character = AMC_indiana_niedell	# media personality
				#	recruit_character = AMC_willis_snake_corto	# commando
				#}
				#HIR = { recruit_character = HIR_rutger_hauer }	# blocked runner
				#ROC = {
				#	recruit_character = ROC_lo_pan	# big trouble!
				#	ROC_lo_pan = {
				#		set_character_flag = dual_leader_first_title_emperor_sorcerer
				#		set_character_flag = dual_leader_id_miao_yin
				#		set_character_flag = dual_leader_second_title_empress
				#	}
				#}
				#REI = {
				#	recruit_character = REI_doctor_strangelove	# yes, Mein FÃ¼hrer... I mean... mister president
				#	recruit_character = REI_rene_belloq	# hello, dr jones!
				#	recruit_character = REI_arnold_toht	# what do you want? / the same as your friend dr jones
				#}
				#PRO = { recruit_character = PRO_saburo_arasaka }	# cyberpunk 1936
				#KOB = { recruit_character = KOB_louis_renault }	# casablanca
			}
			### CHEMICAL WEAPONS RULE ### #rule depricated
			#if = {
			#	limit = { has_game_rule = { rule = allow_chemical_weapons option = CHEMICAL_ALLOWED } }
			#	log = "allow chemical weapons"
			#	set_global_flag = chemical_weapons_allowed_flag
			#}
			### COALITION STABILITY BONUS ###
			every_possible_country = {
				add_dynamic_modifier = { modifier = coalition_stability_modifier }
				if = {
					limit = {
						NOT = {
							# generic ideas
							has_idea_with_trait = coalition_with_democratic
							has_idea_with_trait = coalition_with_democratic_socialism
							has_idea_with_trait = coalition_with_communism
							has_idea_with_trait = coalition_with_neutrality
							has_idea_with_trait = coalition_with_autocracy
							has_idea_with_trait = coalition_with_fascism
							# generic characters
							has_idea_with_trait = coalition_with_democratic_char
							has_idea_with_trait = coalition_with_democratic_socialism_char
							has_idea_with_trait = coalition_with_communism_char
							has_idea_with_trait = coalition_with_neutrality_char
							has_idea_with_trait = coalition_with_autocracy_char
							has_idea_with_trait = coalition_with_fascism_char
							# special characters
							has_idea_with_trait = PRT_monarchist_writer	# special character rule
							# secondary leaders (checks character flag on main leader, trait on secondary needs a scripted loc for display)
							any_character = { is_country_leader = yes has_character_flag = coalition_with_fascism_secondary }
						}
					}
					set_variable = { coalition_stability_bonus = 0 }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic }
					set_variable = { coalition_stability_bonus = party_popularity@democratic }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic_socialism }
					set_variable = { coalition_stability_bonus = party_popularity@democratic_socialism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_neutrality }
					set_variable = { coalition_stability_bonus = party_popularityneutrality}
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_autocracy }
					set_variable = { coalition_stability_bonus = party_popularity@autocracy }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_fascism }
					set_variable = { coalition_stability_bonus = party_popularity@fascism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_communism }
					set_variable = { coalition_stability_bonus = party_popularity@communism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic_char }
					set_variable = { coalition_stability_bonus = party_popularity@democratic }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic_socialism_char }
					set_variable = { coalition_stability_bonus = party_popularity@democratic_socialism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_neutrality_char }
					set_variable = { coalition_stability_bonus = party_popularityneutrality}
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_autocracy_char }
					set_variable = { coalition_stability_bonus = party_popularity@autocracy }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_fascism_char }
					set_variable = { coalition_stability_bonus = party_popularity@fascism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_communism_char }
					set_variable = { coalition_stability_bonus = party_popularity@communism }
				}
				if = {
					limit = { has_idea_with_trait = PRT_monarchist_writer }
					set_variable = { coalition_stability_bonus = party_popularity@autocracy }
				}
				if = {
					limit = { any_character = { is_country_leader = yes has_character_flag = coalition_with_fascism_secondary } }
					set_variable = { coalition_stability_bonus = party_popularity@fascism }
				}
				multiply_variable = { coalition_stability_bonus = 0.15 }
			}
			### DIVISION LIMIT SYSTEM	###
			random_country = {
				set_up_global_division_limit_system = yes
			}	
			### 1929 CRASH ###
			random_country = {
				crash_1929_system_set_up = yes
			}
			### PLANED ECONOMY ###
			every_country = {
				limit = { has_government = communism }
				planned_economy_set_up = yes
			}
			### TRADE CITIES 2.0 ###
			random_country = {
				# hirado
				set_variable = { global.tc_base_hirado_aluminium = 4 }
				set_variable = { global.tc_base_hirado_chromium = 0 }
				set_variable = { global.tc_base_hirado_oil = 4 }
				set_variable = { global.tc_base_hirado_rubber = 68 }
				set_variable = { global.tc_base_hirado_steel = 0 }
				set_variable = { global.tc_base_hirado_tungsten = 0 }
				# kobe
				set_variable = { global.tc_base_kobe_aluminium = 4 }
				set_variable = { global.tc_base_kobe_chromium = 0 }
				set_variable = { global.tc_base_kobe_oil = 0 }
				set_variable = { global.tc_base_kobe_rubber = 6 }
				set_variable = { global.tc_base_kobe_steel = 28 }
				set_variable = { global.tc_base_kobe_tungsten = 12 }
				# osaka
				set_variable = { global.tc_base_osaka_aluminium = 4 }
				set_variable = { global.tc_base_osaka_chromium = 0 }
				set_variable = { global.tc_base_osaka_oil = 12 }
				set_variable = { global.tc_base_osaka_rubber = 12 }
				set_variable = { global.tc_base_osaka_steel = 99 }
				set_variable = { global.tc_base_osaka_tungsten = 34 }
				# chiba
				set_variable = { global.tc_base_chiba_aluminium = 32 }
				set_variable = { global.tc_base_chiba_chromium = 0 }
				set_variable = { global.tc_base_chiba_oil = 132 }
				set_variable = { global.tc_base_chiba_rubber = 0 }
				set_variable = { global.tc_base_chiba_steel = 51 }
				set_variable = { global.tc_base_chiba_tungsten = 19 }
				# yawatahama
				set_variable = { global.tc_base_yawatahama_aluminium = 35 }
				set_variable = { global.tc_base_yawatahama_chromium = 1 }
				set_variable = { global.tc_base_yawatahama_oil = 1 }
				set_variable = { global.tc_base_yawatahama_rubber = 0 }
				set_variable = { global.tc_base_yawatahama_steel = 103 }
				set_variable = { global.tc_base_yawatahama_tungsten = 1 }
				# okinawa
				set_variable = { global.tc_base_okinawa_aluminium = 0 }
				set_variable = { global.tc_base_okinawa_chromium = 0 }
				set_variable = { global.tc_base_okinawa_oil = 0 }
				set_variable = { global.tc_base_okinawa_rubber = 0 }
				set_variable = { global.tc_base_okinawa_steel = 0 }
				set_variable = { global.tc_base_okinawa_tungsten = 0 }
				# nagasaki
				set_variable = { global.tc_base_nagasaki_aluminium = 0 }
				set_variable = { global.tc_base_nagasaki_chromium = 8 }
				set_variable = { global.tc_base_nagasaki_oil = 0 }
				set_variable = { global.tc_base_nagasaki_rubber = 0 }
				set_variable = { global.tc_base_nagasaki_steel = 0 }
				set_variable = { global.tc_base_nagasaki_tungsten = 72 }
				# khabarovsky
				set_variable = { global.tc_base_khabarovsky_aluminium = 33 }
				set_variable = { global.tc_base_khabarovsky_chromium = 88 }
				set_variable = { global.tc_base_khabarovsky_oil = 48 }
				set_variable = { global.tc_base_khabarovsky_rubber = 0 }
				set_variable = { global.tc_base_khabarovsky_steel = 135 }
				set_variable = { global.tc_base_khabarovsky_tungsten = 16 }
				# fengtian
				set_variable = { global.tc_base_fengtian_aluminium = 0 }
				set_variable = { global.tc_base_fengtian_chromium = 12 }	# it was 16
				set_variable = { global.tc_base_fengtian_oil = 2 }
				set_variable = { global.tc_base_fengtian_rubber = 0 }
				set_variable = { global.tc_base_fengtian_steel = 89 }		# it was 119
				set_variable = { global.tc_base_fengtian_tungsten = 62 }	# it was 82
				# muroran
				set_variable = { global.tc_base_muroran_aluminium = 3 }
				set_variable = { global.tc_base_muroran_chromium = 3 }
				set_variable = { global.tc_base_muroran_oil = 0 }
				set_variable = { global.tc_base_muroran_rubber = 0 }
				set_variable = { global.tc_base_muroran_steel = 0 }
				set_variable = { global.tc_base_muroran_tungsten = 0 }
				#
				set_global_flag = tc_chiba_enabled
			}
			every_country = {
				check_trade_cities = yes
				set_variable = { show_SS_trade = 0 }
			}
			### TOTAL POPULATION & JAPANESE POPULATION ###
			every_country = {
				set_variable = { country_total_population = 0 }
				set_variable = { country_japanese_population = 0 }
				every_controlled_state = {
					add_to_variable = { PREV.country_total_population = state_population_k }
					if = {
						limit = { OR = { is_on_continent = europe is_on_continent = honshu is_on_continent = kyushu is_on_continent = hokkaido is_on_continent = shikoku } }
						add_to_variable = { PREV.country_japanese_population = state_population_k }
					}
				}
			}
			### RANDOM EXILED WHITE RUSSIANS (NSB VERSION) ###
			log = "get initial random general"
			set_variable = { global.generic_exiled_general_id = 1 }
			set_variable = { global.random_name = 1 }
			set_variable = { global.random_surname = 1 }
			set_variable = { global.random_portrait = 1 }
			set_variable = { global.random_land_trait = 0 }
			set_variable = { global.random_navy_trait = 0 }
			random_country = { get_random_general_dna = yes }
			### RELIGION SYSTEM 2.0 ###
			every_possible_country = {
				set_up_global_religion_variables = yes
				state_religion_error_catcher = yes
				set_variable = { show_SS_religion = 0 }
			}
			every_state = {
				check_state_main_religion = yes
				multiply_variable = { state_religion_buddhism = 100 }	# scales everything to [0;100] ranges
				multiply_variable = { state_religion_shinto = 100 }
				multiply_variable = { state_religion_christianity = 100 }
				multiply_variable = { state_religion_taoism = 100 }
				multiply_variable = { state_religion_confucianism = 100 }
				multiply_variable = { state_religion_secularism = 100 }
				multiply_variable = { state_religion_cthulhu = 100 }
				add_dynamic_modifier = { modifier = religion_state_compliance_modifier }
				add_dynamic_modifier = { modifier = religion_state_resistance_modifier }
				add_dynamic_modifier = { modifier = religion_state_syncretism_modifier }
			}
			every_country = {
				get_country_religion_buddhism = yes
				get_country_religion_shinto = yes
				get_country_religion_christianity = yes
				get_country_religion_taoism = yes
				get_country_religion_confucianism = yes
				get_country_religion_secularism = yes
				get_country_religion_cthulhu = yes
				get_official_religion_popularity = yes
				scale_country_religion_effect = yes
				set_country_religion_modifier = yes
				get_country_religion_drift = yes
				every_controlled_state = {
					get_religion_state_compliance_modifier = yes
				}
			}
			set_variable = { global.religion_xi_pos_1 = 70 }
			set_variable = { global.religion_xb_pos_1 = 50 }
			set_variable = { global.religion_xd_pos_1 = 40 }
			set_variable = { global.religion_xi_pos_2 = 170 }
			set_variable = { global.religion_xb_pos_2 = 150 }
			set_variable = { global.religion_xd_pos_2 = 140 }
			set_variable = { global.religion_xi_pos_3 = 270 }
			set_variable = { global.religion_xb_pos_3 = 250 }
			set_variable = { global.religion_xd_pos_3 = 240 }
			set_variable = { global.religion_xi_pos_4 = 370 }
			set_variable = { global.religion_xb_pos_4 = 350 }
			set_variable = { global.religion_xd_pos_4 = 340 }
			set_variable = { global.religion_xi_pos_5 = 470 }
			set_variable = { global.religion_xb_pos_5 = 450 }
			set_variable = { global.religion_xd_pos_5 = 440 }
			set_variable = { global.religion_xi_pos_6 = 570 }
			set_variable = { global.religion_xb_pos_6 = 550 }
			set_variable = { global.religion_xd_pos_6 = 540 }
			set_variable = { global.religion_xi_pos_7 = 670 }
			set_variable = { global.religion_xb_pos_7 = 650 }
			set_variable = { global.religion_xd_pos_7 = 640 }
			### CORING OF STATES ###
			every_state = {
				set_variable = { coring_progress = 0 }
			}
			### VARIABLES FOR ADVISERS ###
			every_possible_country = {
				if = { limit = { has_government = democratic } set_country_flag = initial_ideology_democratic }
				if = { limit = { has_government = democratic_socialism } set_country_flag = initial_ideology_democratic_socialism }
				if = { limit = { has_government = communism } set_country_flag = initial_ideology_communism }
				if = { limit = { has_government = fascism } set_country_flag = initial_ideology_fascism }
				if = { limit = { has_government = neutrality } set_country_flag = initial_ideology_neutrality }
				if = { limit = { has_government = autocratic } set_country_flag = initial_ideology_autocratic }
			}
			### WORLD STAGE 2.0 ###
			# League of Nations members:
			every_country = {
				limit = { OR = { has_idea = SS_lon_member has_idea = SS_lon_member_japan } }
				every_other_country = {
					limit = { OR = { has_idea = SS_lon_member has_idea = SS_lon_member_japan } }	# maybe turns this into a trait to dispense with multiple idea checks
					add_relation_modifier = {
						target = PREV
						modifier = lon_member_relation_modifier
					}
				}
			}
			every_country = { set_variable = { current_theater = 0 } }
			# initial flags/conditions
			set_global_flag = world_stage_germany_exists
			set_global_flag = world_stage_france_exists					# set_global_flag = world_stage_vichy_exists after "Fall of France" (worldstage_surrender.103)
			set_global_flag = world_stage_england_exists
			set_global_flag = world_stage_sovietunion_exists
			set_global_flag = world_stage_netherlands_exists
			set_global_flag = world_stage_china_exists
			set_global_flag = world_stage_usa_exists
			set_global_flag = world_stage_portugal_exists
			set_global_flag = world_stage_italy_exists
			#set_global_flag = phoney_war_rages_on						# gets removed when either germany or france invade each other
			#set_global_flag = league_of_nations_exists					# must be set in history file (it's in OSA's) otherwise the game will remove the SS_lon_member ideas (that require this flag) on startup
			set_variable = { global.worldstage_europe_map_frame = 1 }	# initial frame for European map (it changes when Germany grabs more land before ww2)
			set_variable = { global.worldstage_asia_map_frame = 1 }	# initial frame for Asian map (it changes if Manchuria becomes independent)
			# PROXIES: states used as proxys for theaters and metropolises
			# metropolis, double as check for states that hold metropolises, indexes are 100's to avoid confusion with proxy theaters
			100 = { set_variable = { world_stage_metropolis = 100 } }		# No one/other
			101 = { set_variable = { world_stage_metropolis = 101 } }		# Germany
			102 = { set_variable = { world_stage_metropolis = 102 } }		# England
			103 = { set_variable = { world_stage_metropolis = 103 } }		# France
			104 = { set_variable = { world_stage_metropolis = 104 } }		# Soviet Union
			105 = { set_variable = { world_stage_metropolis = 105 } }		# USA
			106 = { set_variable = { world_stage_metropolis = 106 } }		# China
			107 = { set_variable = { world_stage_metropolis = 107 } }		# Netherlands
			108 = { set_variable = { world_stage_metropolis = 108 } }		# Portugal
			109 = { set_variable = { world_stage_metropolis = 109 } }		# Italy (not implemented in game, works on world stage)
			110 = { set_variable = { world_stage_metropolis = 110 } }		# Recognized Japan
			111 = { set_variable = { world_stage_metropolis = 111 } }		# Spain, not implemented							# these two are added to the game just so the arrays work properly
			112 = { set_variable = { world_stage_metropolis = 112 } }		# nothing yet, maybe tags that are not colonies		# these two are added to the game just so the arrays work properly
			113 = { set_variable = { world_stage_metropolis = 112 } }		# Nazi Germany, unused
			114 = { set_variable = { world_stage_metropolis = 114 } }		# Manchuria (does not exist at start)	# the ones bellow only exist off-map
			115 = { set_variable = { world_stage_metropolis = 115 } }		# Poland
			116 = { set_variable = { world_stage_metropolis = 116 } }		# Mongolia
			117 = { set_variable = { world_stage_metropolis = 117 } }		# Norway, not implemented
			118 = { set_variable = { world_stage_metropolis = 118 } }		# Ethiopia, not implemented	
			119 = { set_variable = { world_stage_metropolis = 119 } }		# Austria
			120 = { set_variable = { world_stage_metropolis = 120 } }		# Vichy France
			121 = { set_variable = { world_stage_metropolis = 121 } }		# Falangist Spain
			122 = { set_variable = { world_stage_metropolis = 122 } }		# Finland
			123 = { set_variable = { world_stage_metropolis = 123 } }		# India
			# coalition (no zero index to match number of frames for an icon)
			100 = { set_variable = { world_stage_coalition = 4 } }	# Non-Aligned
			101 = { set_variable = { world_stage_coalition = 6 } }	# Pact of Steel
			102 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			103 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			104 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			105 = { set_variable = { world_stage_coalition = 4 } }	# Non-Aligned
			106 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			107 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			108 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			109 = { set_variable = { world_stage_coalition = 6 } }	# Pact of Steel
			110 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			111 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			112 = { set_variable = { world_stage_coalition = 4 } }	# Non-Aligned
			113 = { set_variable = { world_stage_coalition = 6 } }	# Pact of Steel
			114 = { set_variable = { world_stage_coalition = 4 } }	# Non-Aligned
			115 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			116 = { set_variable = { world_stage_coalition = 4 } }	# Non-Aligned
			117 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			118 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			119 = { set_variable = { world_stage_coalition = 5 } }	# League of Nation
			120 = { set_variable = { world_stage_coalition = 6 } }	# Pact of Steel
			121 = { set_variable = { world_stage_coalition = 4 } }	# Non-Aligned
			122 = { set_variable = { world_stage_coalition = 4 } }	# Non-Aligned
			123 = { set_variable = { world_stage_coalition = 4 } }	# Non-Aligned
			# overall strength
			101 = { set_variable = { world_stage_power = 100 } }
			102 = { set_variable = { world_stage_power = 75 } }
			103 = { set_variable = { world_stage_power = 75 } }
			104 = { set_variable = { world_stage_power = 100 } }
			105 = { set_variable = { world_stage_power = 100 } }
			106 = { set_variable = { world_stage_power = 25 } }
			107 = { set_variable = { world_stage_power = 25 } }
			108 = { set_variable = { world_stage_power = 5 } }
			109 = { set_variable = { world_stage_power = 30 } }	# the ones bellow may not be used but I'll write down just in case they are referenced in other parts of the code
			110 = { set_variable = { world_stage_power = 0 } }
			111 = { set_variable = { world_stage_power = 30 } }
			112 = { set_variable = { world_stage_power = 0 } }
			113 = { set_variable = { world_stage_power = 0 } }
			114 = { set_variable = { world_stage_power = 0 } }
			115 = { set_variable = { world_stage_power = 30 } }
			116 = { set_variable = { world_stage_power = 0 } }
			117 = { set_variable = { world_stage_power = 0 } }
			118 = { set_variable = { world_stage_power = 0 } }
			119 = { set_variable = { world_stage_power = 0 } }
			120 = { set_variable = { world_stage_power = 0 } }
			121 = { set_variable = { world_stage_power = 0 } }	# does not exist when game starts
			122 = { set_variable = { world_stage_power = 0 } }
			123 = { set_variable = { world_stage_power = 0 } }
			every_possible_country = {
				set_variable = { world_stage_metropolis = 100 }
				set_variable = { world_stage_coalition = 4 }
				set_variable = { world_stage_power = 0 }
			}
			REI = { set_variable = { world_stage_metropolis = 101 } }	# for these ones it should be enough to get them once in start-up, the redundancy here works as safety mechanism
			OSA = { set_variable = { world_stage_metropolis = 102 } }	# note from myself from the future: actually there's no redundancy! I can use this variable to fetch the state scope from the country scope, useful to find deployed country by the player on a theater
			KOB = { set_variable = { world_stage_metropolis = 103 } }
			FER = { set_variable = { world_stage_metropolis = 104 } }
			AMC = { set_variable = { world_stage_metropolis = 105 } }	#
			OKI = { set_variable = { world_stage_metropolis = 105 } }	# both are America	(NOTE: possibility of OKI becoming independent and not being USA anymore should be considered here, if it happens, this var should be 100 for OKI)
			ROC = { set_variable = { world_stage_metropolis = 106 } }
			HIR = { set_variable = { world_stage_metropolis = 107 } }
			PRT = { set_variable = { world_stage_metropolis = 108 } }
			#KIT = { set_variable = { world_stage_metropolis = 109 } }	# Italy, not implemented
			PRO = { set_variable = { world_stage_metropolis = 110 } }	# Internationally recognized Japan
			#SPR = { set_variable = { world_stage_metropolis = 111 } }	# Spain, not implemented
			# every_possible_country...									#...that does not have this variable should have this variable assigned randomly to a number greater than the last index value so the interface knows how much power your proxy have (OR non-internationally recon. Jap just dont play this game!)
			# doctrine leves
			every_state = {
				limit = { has_variable = world_stage_metropolis }	# they are increased by 0.1 for each level. "air doctrine" is added directly to the other two. base value is 1
				set_variable = { doctrine_bonus_land = 1 }
				set_variable = { doctrine_bonus_navy = 1 }
			}
			# some countries have one doctrine at start of the game, this will be set manually
			101 = { add_to_variable = { doctrine_bonus_land = 0.1 } }
			102 = { add_to_variable = { doctrine_bonus_land = 0.1 } }
			103 = { add_to_variable = { doctrine_bonus_land = 0.1 } }
			104 = { add_to_variable = { doctrine_bonus_land = 0.1 } }
			105 = { add_to_variable = { doctrine_bonus_land = 0.1 } }
			109 = { add_to_variable = { doctrine_bonus_land = 0.1 } }
			# owners, double as check for states that hold theaters (the ones commented were depricated), the owner is a proxy metropolis
			1 = { set_variable = { theater_owner = 100 } 	set_variable = { theater_id = 1 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } }			# Spain (currently not implemented))
			2 = { set_variable = { theater_owner = 116 } 	set_variable = { theater_id = 2 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Mongolia
			3 = { set_variable = { theater_owner = 115 } 	set_variable = { theater_id = 3 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Poland
			4 = { set_variable = { theater_owner = 100 } 	set_variable = { theater_id = 4 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Ardennes (currently not implemented))
			5 = { set_variable = { theater_owner = 103 } 	set_variable = { theater_id = 5 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Alsace
			6 = { set_variable = { theater_owner = 101 } 	set_variable = { theater_id = 6 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Westphalia
			7 = { set_variable = { theater_owner = 101 } 	set_variable = { theater_id = 7 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Germany
			8 = { set_variable = { theater_owner = 103 } 	set_variable = { theater_id = 8 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# France
			9 = { set_variable = { theater_owner = 104 } 	set_variable = { theater_id = 9 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Belarus
			10 = { set_variable = { theater_owner = 104 } 	set_variable = { theater_id = 10 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Smolensk
			11 = { set_variable = { theater_owner = 104 } 	set_variable = { theater_id = 11 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Russia (Moscow)
			12 = { set_variable = { theater_owner = 100 } 	set_variable = { theater_id = 12 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } }		# Norway (currently not implemented))
			13 = { set_variable = { theater_owner = 100 } 	set_variable = { theater_id = 13 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } }		# Ethiopia (currently not implemented))
			14 = { set_variable = { theater_owner = 109 } 	set_variable = { theater_id = 14 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Lybia
			15 = { set_variable = { theater_owner = 102 } 	set_variable = { theater_id = 15 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Egypt
			16 = { set_variable = { theater_owner = 102 } 	set_variable = { theater_id = 16 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# India (south)
			17 = { set_variable = { theater_owner = 102 } 	set_variable = { theater_id = 17 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Bengal
			18 = { set_variable = { theater_owner = 106 } 	set_variable = { theater_id = 18 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Tibet
			19 = { set_variable = { theater_owner = 106 } 	set_variable = { theater_id = 19 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# China (west)
			20 = { set_variable = { theater_owner = 107 } 	set_variable = { theater_id = 20 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Indies
			21 = { set_variable = { theater_owner = 105 } 	set_variable = { theater_id = 21 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Philipines
			22 = { set_variable = { theater_owner = 104 } 	set_variable = { theater_id = 22 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Siberia
			23 = { set_variable = { theater_owner = 109 } 	set_variable = { theater_id = 23 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Italy (Rome)
			24 = { set_variable = { theater_owner = 109 } 	set_variable = { theater_id = 24 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Sicily
			25 = { set_variable = { theater_owner = 109 } 	set_variable = { theater_id = 25 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Alpes
			26 = { set_variable = { theater_owner = 119 } 	set_variable = { theater_id = 26 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Austria
			27 = { set_variable = { theater_owner = 107 } 	set_variable = { theater_id = 27 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Netherlands
			28 = { set_variable = { theater_owner = 106 } 	set_variable = { theater_id = 28 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Guanxi
			29 = { set_variable = { theater_owner = 104 } 	set_variable = { theater_id = 29 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Urals
			30 = { set_variable = { theater_owner = 102 } 	set_variable = { theater_id = 30 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# England
			31 = { set_variable = { theater_owner = 100 } 	set_variable = { theater_id = 31 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# no owner (Normandy)
			32 = { set_variable = { theater_owner = 100 } 	set_variable = { theater_id = 32 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# no owner (Sealion)
			33 = { set_variable = { theater_owner = 105 } 	set_variable = { theater_id = 33 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Formosa/Taiwan
			34 = { set_variable = { theater_owner = 108 } 	set_variable = { theater_id = 34 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Portugal (Lisbon)
			35 = { set_variable = { theater_owner = 111 } 	set_variable = { theater_id = 35 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Madrid
			36 = { set_variable = { theater_owner = 111 } 	set_variable = { theater_id = 36 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Zaragoza
			37 = { set_variable = { theater_owner = 111 } 	set_variable = { theater_id = 37 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Barcelona
			38 = { set_variable = { theater_owner = 103 } 	set_variable = { theater_id = 38 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Marseille
			39 = { set_variable = { theater_owner = 103 } 	set_variable = { theater_id = 39 } set_variable = { defender_strategic_advantage = 0 } set_variable = { attacker_strategic_advantage = 0 } } 		# Morocco
			every_state = {	# world_stage_get_theater_info_from_metropolis
				limit = { has_variable = theater_owner }
				add_to_array = { global.theater_list = THIS.id }				# this is used by AI later
				var:theater_owner = { set_variable = { PREV.theater_owner_coalition = world_stage_coalition } }	# imports from theater owner info about its coalition
				add_to_array = { world_stage_power_deployed_by = -1 } 			# this array is how much power each metropolis have deployed in this theater # this command creates the array, first 100 entries are filler
				set_temp_variable = { temporary_index = 1 }
				while_loop_effect = {
					limit = { check_variable = { temporary_index < 100 } }		# 101 is the first 'actual' metropolis
					add_to_array = { world_stage_power_deployed_by = -1 }		# this 'fills' the first 100 entries so that the index of the array matches the index of the metropolis and the proxy state's id
					add_to_temp_variable = { temporary_index = 1 }
				}
				every_state = {
					limit = { has_variable = world_stage_metropolis }
					add_to_array = { PREV.world_stage_power_deployed_by = 0 }	# now adds each metropolis' own deployed power (which is zero at start) across all theaters
				}
			}
			# manually adding the deployed forces of minor powers:
			3 = { set_variable = { world_stage_power_deployed_by^115 = 30 } }
			12 = { set_variable = { world_stage_power_deployed_by^117 = 10 } }
			13 = { set_variable = { world_stage_power_deployed_by^118 = 5 } }
			26 = { set_variable = { world_stage_power_deployed_by^119 = 10 } }			
			#1 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			2 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			3 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			#4 = { set_variable = { theater_timer_base = 45 } set_variable = { theater_timer = theater_timer_base } }
			5 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			6 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			7 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			8 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			9 = { set_variable = { theater_timer_base = 90 } set_variable = { theater_timer = theater_timer_base } }
			10 = { set_variable = { theater_timer_base = 90 } set_variable = { theater_timer = theater_timer_base } }
			11 = { set_variable = { theater_timer_base = 90 } set_variable = { theater_timer = theater_timer_base } }
			#12 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			#13 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			14 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			15 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			16 = { set_variable = { theater_timer_base = 90 } set_variable = { theater_timer = theater_timer_base } }
			17 = { set_variable = { theater_timer_base = 90 } set_variable = { theater_timer = theater_timer_base } }
			18 = { set_variable = { theater_timer_base = 90 } set_variable = { theater_timer = theater_timer_base } }
			19 = { set_variable = { theater_timer_base = 90 } set_variable = { theater_timer = theater_timer_base } }
			20 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			21 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			22 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			23 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			24 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			25 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			26 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			27 = { set_variable = { theater_timer_base = 60 } set_variable = { theater_timer = theater_timer_base } }
			28 = { set_variable = { theater_timer_base = 90 } set_variable = { theater_timer = theater_timer_base } }
			29 = { set_variable = { theater_timer_base = 90 } set_variable = { theater_timer = theater_timer_base } }
			30 = { set_variable = { theater_timer_base = 90 } set_variable = { theater_timer = theater_timer_base } }
			31 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			32 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			33 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			34 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			35 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			36 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			37 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			38 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			39 = { set_variable = { theater_timer_base = 30 } set_variable = { theater_timer = theater_timer_base } }
			#1 = { set_variable = { theater_timer_frame = 9 } }
			2 = { set_variable = { theater_timer_frame = 9 } }
			3 = { set_variable = { theater_timer_frame = 9 } }
			#4 = { set_variable = { theater_timer_frame = 9 } }
			5 = { set_variable = { theater_timer_frame = 9 } }
			6 = { set_variable = { theater_timer_frame = 9 } }
			7 = { set_variable = { theater_timer_frame = 9 } }
			8 = { set_variable = { theater_timer_frame = 9 } }
			9 = { set_variable = { theater_timer_frame = 9 } }
			10 = { set_variable = { theater_timer_frame = 9 } }
			11 = { set_variable = { theater_timer_frame = 9 } }
			#12 = { set_variable = { theater_timer_frame = 9 } }
			#13 = { set_variable = { theater_timer_frame = 9 } }
			14 = { set_variable = { theater_timer_frame = 9 } }
			15 = { set_variable = { theater_timer_frame = 9 } }
			16 = { set_variable = { theater_timer_frame = 9 } }
			17 = { set_variable = { theater_timer_frame = 9 } }
			18 = { set_variable = { theater_timer_frame = 9 } }
			19 = { set_variable = { theater_timer_frame = 9 } }
			20 = { set_variable = { theater_timer_frame = 9 } }
			21 = { set_variable = { theater_timer_frame = 9 } }
			22 = { set_variable = { theater_timer_frame = 9 } }
			23 = { set_variable = { theater_timer_frame = 9 } }
			24 = { set_variable = { theater_timer_frame = 9 } }
			25 = { set_variable = { theater_timer_frame = 9 } }
			26 = { set_variable = { theater_timer_frame = 9 } }
			27 = { set_variable = { theater_timer_frame = 9 } }
			28 = { set_variable = { theater_timer_frame = 9 } }
			29 = { set_variable = { theater_timer_frame = 9 } }
			30 = { set_variable = { theater_timer_frame = 9 } }
			31 = { set_variable = { theater_timer_frame = 9 } }
			32 = { set_variable = { theater_timer_frame = 9 } }
			33 = { set_variable = { theater_timer_frame = 9 } }
			34 = { set_variable = { theater_timer_frame = 9 } }
			35 = { set_variable = { theater_timer_frame = 9 } }
			36 = { set_variable = { theater_timer_frame = 9 } }
			37 = { set_variable = { theater_timer_frame = 9 } }
			38 = { set_variable = { theater_timer_frame = 9 } }
			39 = { set_variable = { theater_timer_frame = 9 } }
			# connections
			#1 = { add_to_array = { connects_to = [none] } }
			2 = { add_to_array = { connects_to = 18 } add_to_array = { connects_to = 22 } }
			3 = { add_to_array = { connects_to = 7 } add_to_array = { connects_to = 9 } }
			#4 = { add_to_array = { connects_to = [none] } }
			5 = { add_to_array = { connects_to = 8 } add_to_array = { connects_to = 6 } add_to_array = { connects_to = 25 } }
			6 = { add_to_array = { connects_to = 7 } add_to_array = { connects_to = 5 } add_to_array = { connects_to = 27 } add_to_array = { connects_to = 26 } }
			7 = { add_to_array = { connects_to = 6 } add_to_array = { connects_to = 3 } }
			8 = { add_to_array = { connects_to = 5 } add_to_array = { connects_to = 27 } add_to_array = { connects_to = 38 } }	# add sealion later
			9 = { add_to_array = { connects_to = 3 } add_to_array = { connects_to = 10 } }
			10 = { add_to_array = { connects_to = 9 } add_to_array = { connects_to = 11 } }
			11 = { add_to_array = { connects_to = 10 } add_to_array = { connects_to = 29 } }
			#12 = { add_to_array = { connects_to = [none] } }
			#13 = { add_to_array = { connects_to = [none] } }
			14 = { add_to_array = { connects_to = 15 } add_to_array = { connects_to = 24 } add_to_array = { connects_to = 39 } }
			15 = { add_to_array = { connects_to = 14 } }
			16 = { add_to_array = { connects_to = 17 } }
			17 = { add_to_array = { connects_to = 16 } add_to_array = { connects_to = 28 }}
			18 = { add_to_array = { connects_to = 2 } add_to_array = { connects_to = 28 } }
			19 = { add_to_array = { connects_to = 28 } add_to_array = { connects_to = 33 } }
			#20 = { add_to_array = { connects_to = 33 } }	# isolated, only accessible by special operation
			#21 = { add_to_array = { connects_to = 33 } }	# isolated, only accessible by special operation
			22 = { add_to_array = { connects_to = 29 } add_to_array = { connects_to = 2 } }
			23 = { add_to_array = { connects_to = 24 } add_to_array = { connects_to = 25 } }
			24 = { add_to_array = { connects_to = 14 } add_to_array = { connects_to = 23 } }
			25 = { add_to_array = { connects_to = 5 } add_to_array = { connects_to = 23 } add_to_array = { connects_to = 26 } add_to_array = { connects_to = 38 } }
			26 = { add_to_array = { connects_to = 6 } add_to_array = { connects_to = 25 } }
			27 = { add_to_array = { connects_to = 6 } add_to_array = { connects_to = 8 } }
			28 = { add_to_array = { connects_to = 17 } add_to_array = { connects_to = 18 } add_to_array = { connects_to = 19 } }
			29 = { add_to_array = { connects_to = 11 } add_to_array = { connects_to = 22 } }
			#30 = { add_to_array = { connects_to = 8 } } # isolated, only accessible by special operation
			#31 = { not used }
			#32 = { not used }
			#33 = { add_to_array = { connects_to = 19 } add_to_array = { connects_to = 20 } add_to_array = { connects_to = 21 } }	# isolated, only accessible by special operation
			34 = { add_to_array = { connects_to = 35 } add_to_array = { connects_to = 36 } }
			35 = { add_to_array = { connects_to = 34 } add_to_array = { connects_to = 36 } add_to_array = { connects_to = 37 } }
			36 = { add_to_array = { connects_to = 34 } add_to_array = { connects_to = 35 } add_to_array = { connects_to = 37 } add_to_array = { connects_to = 39 } }
			37 = { add_to_array = { connects_to = 35 } add_to_array = { connects_to = 36 } add_to_array = { connects_to = 38 } }
			38 = { add_to_array = { connects_to = 8 } add_to_array = { connects_to = 25 } add_to_array = { connects_to = 37 } }
			39 = { add_to_array = { connects_to = 14 } add_to_array = { connects_to = 36 }}
			# capitals
			3 = { set_state_flag = metroplis_capital_poland }
			7 = { set_state_flag = metroplis_capital_germany }
			8 = { set_state_flag = metroplis_capital_france }
			11 = { set_state_flag = metroplis_capital_sovietunion }
			19 = { set_state_flag = metroplis_capital_china }
			23 = { set_state_flag = metroplis_capital_italy }
			27 = { set_state_flag = metroplis_capital_netherlands }
			30 = { set_state_flag = metroplis_capital_england }
			34 = { set_state_flag = metroplis_capital_portugal }
			# = { set_state_flag = metroplis_capital_usa }
			# arrays of tags for each alliance, useful for tag aliases later
			every_country = {
				if = {
					limit = { var:world_stage_metropolis = { check_variable = { world_stage_coalition = 1 } } }
					add_to_array = { global.array_allies = THIS.id }
				}
				if = {
					limit = { var:world_stage_metropolis = { check_variable = { world_stage_coalition = 2 } } }
					add_to_array = { global.array_komintern = THIS.id }
				}
				if = {
					limit = { var:world_stage_metropolis = { check_variable = { world_stage_coalition = 3 } } }
					add_to_array = { global.array_axis = THIS.id }
				}
				if = {
					limit = { var:world_stage_metropolis = { check_variable = { world_stage_coalition = 5 } } }	# 4 is non-aligned, no array for that
					add_to_array = { global.array_leagueofnations = THIS.id }
				}
				if = {
					limit = { var:world_stage_metropolis = { check_variable = { world_stage_coalition = 6 } } }
					add_to_array = { global.array_pactofsteel = THIS.id }
				}
				if = {
					limit = { var:world_stage_metropolis = { check_variable = { world_stage_coalition = 7 } } }
					add_to_array = { global.array_tiar = THIS.id }
				}
			}
			# kickstart AIs
			every_state = {
				limit = { has_variable = world_stage_metropolis }
				set_state_flag = AI_took_an_action
				set_variable = { ai_prefers_reinforce = 1 }
				set_variable = { ai_prefers_supply = 1 }		# DEPRICATED
				set_variable = { ai_prefers_offensive = 1 }
				set_variable = { ai_prefers_defenses = 1 }
				set_variable = { ai_prefers_retreat = 1 }
				set_variable = { ai_save_strength = 5 }			# every country will try to keep a reserve of points that they'll only use if their capital (highest priority theater) is under threat.
			}
			random_country = { set_up_ai_for_world_stage = yes }	# this must come AFTER the default variables are set for everyone
			# add offmapers later
			set_global_flag = world_stage_ai_germany_focus							### I think there are no benefits to using standardized state flags here, since non-exclaves dont partake in this part of the system
			set_global_flag = world_stage_ai_sovietunion_focus
			set_global_flag = world_stage_ai_usa_focus
			set_global_flag = world_stage_ai_england_focus
			set_global_flag = world_stage_ai_portugal_focus
			set_global_flag = world_stage_ai_netherlands_focus
			set_global_flag = world_stage_ai_china_focus
			set_global_flag = world_stage_ai_france_focus
			# operation counters
			set_variable = { global.overlord_number = 1 }
			set_variable = { global.sealion_number = 1 }
			set_variable = { global.husky_number = 1 }
			set_variable = { global.torch_number = 1 }
			# a few variables related to operating buttons in the World Stage menu
			every_country = {			# adding cooldown for buttons
				limit = { is_ai = no }	# only humans interact with those buttons, AI has its own cooldown
				add_to_array = { array_worldstage_action_cooldown = 0 }	# first array entry has index 0, which correspond to no theater
				every_state = {			# each country has a list of theaters, each one with it's own cooldown
					limit = { has_variable = theater_owner }
					PREV = { add_to_array = { array_worldstage_action_cooldown = 0 } }	# number of days of cooldown
					PREV = { add_to_array = { array_worldstage_action_ongoing = 0 } }	# index of types of actions (1:reinforce, 2:offensive, 3:denfese, 4:retreat)
					log = "[PREV.GetName] adding cooldown entry to [THIS.GetName]'s proxy"
				}
			}
			every_possible_country = {
				limit = { is_ai = yes }
				set_country_flag = enable_worldstage_autopilot	### By setting this flag, we can check only for that when calculating AI moves, without needing to ask if it's an AI player or a human player with autopilot
			}
			### OLD WORLD STAGE BELOW: REMOVE LATER ###### OLD WORLD STAGE BELOW: REMOVE LATER ###### OLD WORLD STAGE BELOW: REMOVE LATER ###
			OSA = { set_country_flag = can_play_alsace set_country_flag = can_play_westphalia set_country_flag = can_play_france set_country_flag = can_play_england set_country_flag = can_play_germany set_country_flag = can_play_netherlands set_country_flag = can_play_alpes set_country_flag = can_play_austria set_country_flag = can_play_italy set_country_flag = can_play_sicily set_country_flag = can_play_lybia set_country_flag = can_play_egypt set_country_flag = can_play_normandy set_country_flag = can_play_sealion set_country_flag = can_play_india set_country_flag = can_play_bengal set_country_flag = can_play_guanxi set_country_flag = can_play_china }
			KOB = { set_country_flag = can_play_alsace set_country_flag = can_play_westphalia set_country_flag = can_play_france set_country_flag = can_play_england set_country_flag = can_play_germany set_country_flag = can_play_netherlands set_country_flag = can_play_alpes set_country_flag = can_play_austria set_country_flag = can_play_italy set_country_flag = can_play_sicily set_country_flag = can_play_lybia set_country_flag = can_play_egypt set_country_flag = can_play_normandy set_country_flag = can_play_sealion }
			FER = { set_country_flag = can_play_germany set_country_flag = can_play_poland set_country_flag = can_play_belarus set_country_flag = can_play_smolensk set_country_flag = can_play_russia set_country_flag = can_play_urals set_country_flag = can_play_siberia set_country_flag = can_play_mongolia set_country_flag = can_play_tibet set_country_flag = can_play_guanxi set_country_flag = can_play_china }
			AMC = { set_country_flag = can_play_philipines set_country_flag = can_play_indies }
			OKI = { set_country_flag = can_play_philipines set_country_flag = can_play_indies }
			HIR = { set_country_flag = can_play_philipines set_country_flag = can_play_indies set_country_flag = can_play_netherlands set_country_flag = can_play_germany set_country_flag = can_play_france set_country_flag = can_play_alsace set_country_flag = can_play_westphalia set_country_flag = can_play_sealion set_country_flag = can_play_normandy set_country_flag = can_play_england }
			PRT = { set_country_flag = can_play_india set_country_flag = can_play_bengal set_country_flag = can_play_guanxi set_country_flag = can_play_china set_country_flag = can_play_indies set_country_flag = can_play_philipines }
			ROC = { set_country_flag = can_play_indies set_country_flag = can_play_philipines set_country_flag = can_play_china set_country_flag = can_play_guanxi set_country_flag = can_play_tibet set_country_flag = can_play_mongolia set_country_flag = can_play_bengal set_country_flag = can_play_india }
			REI = { set_country_flag = can_play_alsace set_country_flag = can_play_westphalia set_country_flag = can_play_france set_country_flag = can_play_england set_country_flag = can_play_germany set_country_flag = can_play_netherlands set_country_flag = can_play_alpes set_country_flag = can_play_austria set_country_flag = can_play_italy set_country_flag = can_play_sicily set_country_flag = can_play_poland set_country_flag = can_play_normandy set_country_flag = can_play_sealion }

			### UNIFICATION OF JAPAN ###
			set_global_flag = international_recognition_changed_flag	# this flag works as a tooltip
			every_country = {
				if = {
					limit = { unification_candidate = yes }
					unification_get_score = yes
					unification_count_states_southern_japan = yes
					unification_count_states_central_japan = yes
					unification_count_states_northern_japan = yes
					unification_count_total_states = yes
					add_ideas = SS_the_second_sengoku
				}
			}
			every_state = {
				limit = {
					OR = {
						is_on_continent = honshu
						is_on_continent = hokkaido
						is_on_continent = shikoku
						is_on_continent = kyushu
					}
				}
				add_dynamic_modifier = { modifier = ss_unification_state_modifier }
			}
			random_country = {
				unification_count_total_required_states_japan = yes
				get_all_unification_score_firsts = yes
				unification_get_highter_score = yes
				set_variable = { global.unification_shield_frame = 1 }
			}
			## STARTING COUNTS:
			set_variable = { global.total_states_southern_japan = 58 }
			set_variable = { global.required_states_southern_japan = 38 }	# 2/3 of total
			set_variable = { global.total_states_central_japan = 37 }
			set_variable = { global.required_states_central_japan = 25 }	# 2/3 of total
			set_variable = { global.total_states_northern_japan = 48 }
			set_variable = { global.required_states_northern_japan = 32 }	# 2/3 of total
			AMO = { set_variable = { number_of_states_controlled_central_japan = 1 } }
			CHU = { set_variable = { number_of_states_controlled_southern_japan = 16 } }
			IMS = { set_variable = { number_of_states_controlled_southern_japan = 4 } }
			EZO = { set_variable = { number_of_states_controlled_northern_japan = 17 } }
			IMS = { set_variable = { number_of_states_controlled_central_japan = 1 } }
			KAN = { set_variable = { number_of_states_controlled_central_japan = 22 } }
			KYU = { set_variable = { number_of_states_controlled_southern_japan = 21 } }
			PRO = { set_variable = { number_of_states_controlled_central_japan = 11 } }
			SHI = { set_variable = { number_of_states_controlled_southern_japan = 10 } }
			SHI = { set_variable = { number_of_states_controlled_central_japan = 1 } }
			SHO = { set_variable = { number_of_states_controlled_central_japan = 21 } }
			SHO = { set_variable = { number_of_states_controlled_northern_japan = 4 } }
			TOH = { set_variable = { number_of_states_controlled_northern_japan = 25 } }
			### FLAVOUR EVENTS ###
			SHI = {
				country_event = { id = startup_flavour.1 } 
			}
			PRO = {
				#country_event = { id = pro.1 days = 55 }	# depricated
				news_event = { id = pro.21 }	# flavour event for previous PM's death
			}
			#SHO = {
			#	country_event = { id = shogunate.28 days = 1616 }	# Depricated
			#}
			KYU = {
				country_event = { id = startup_flavour.2 }
			}
			FER = {
				country_event = { id = startup_flavour.3 }
			}
			REI = {
				country_event = { id = ostasien.1 days = 305 random_days = 60 }
				country_event = { id = ostasien.9 days = 2 random_days = 5 }
			}
			KOB = {
				country_event = { id = dualleader.1 days = 4030 }
				country_event = { id = dualleader.2 days = 6585 }
			}
			OSA = {
				country_event = { id = dualleader.3 days = 512 }
				country_event = { id = dualleader.4 days = 1589 }
				country_event = { id = dualleader.5 days = 3492 }
			}
			HIR = {
				country_event = { id = dualleader.6 days = 1316 }
				country_event = { id = dualleader.7 days = 1705 }
				country_event = { id = dualleader.8 days = 3460 }
				country_event = { id = dualleader.9 days = 3833 }
				country_event = { id = dualleader.10 days = 4598 }
			}
			AMC = {
				country_event = { id = dualleader.11 days = 3386 }
				country_event = { id = dualleader.12 days = 6224 }
			}
			OKI = {
				country_event = { id = dualleader.11 days = 3386 }
				country_event = { id = dualleader.12 days = 6224 }
			}
			JOS = {
				country_event = { id = joseon.1 days = 365 }
			}
			#KAN = {
			#		set_autonomy = { target = IMS autonomy_state = autonomy_puppet }
			#	}
			IMS = {
				country_event = { id = seto_islands.0 }
				set_variable = { global.IMS_favor_CHU_other = 0 }
				set_variable = { global.IMS_favor_SHI_other = 0 }
				set_variable = { global.IMS_favor_IMS_other = 0 }
				IMS_get_favor_all = yes
			}

			#random_country = {
			#	limit = { is_ai = no }
			#	add_political_power = 1
			#	country_event = { id = options.1 }
			#} DISABLED INITIAL OPTIONS
			
			### RESISTANCE IN KYUSHU ###
			KYU = {
				every_controlled_state = {
					limit = {
						OR = {
							is_core_of = NBS
							is_core_of = OTO
							is_core_of = UCK
							is_core_of = HOS
							is_core_of = SAR
							is_core_of = KAR
							is_core_of = NAI
							is_core_of = SMZ
						}
					}
					set_state_flag = has_clan_resistance
				}
				every_controlled_state = {
					limit = { has_state_flag = has_clan_resistance }
					start_resistance = yes
					set_compliance = 100
					add_dynamic_modifier  = { modifier = KYU_clan_resistance_modifier }
					get_KYU_clan_resistance_modifier = yes
				}	
			}
		}
	}
	
	on_weekly = {
		effect = {	### EXECUTE ON ONLY ONE COUNRTY A.K.A. "GLOBAL" ON DAILY ###
			if = {
				limit = { controls_state = 1 }
			}
			every_state = {
				limit = { has_dynamic_modifier = { modifier = KYU_clan_resistance_modifier } }
				get_KYU_clan_resistance_modifier = yes
			}
		}
		effect = {
			if = {
				limit = { is_ai = no }	### PLAYER WEEKLY EFFECTS (THESE ARE MONTHLY FOR AI)
				### PLANNED ECONOMY ###
				if = {
					limit = { has_government = communism }
					planned_economy_update = yes
				} else = {
					if = {
						limit = { has_dynamic_modifier = { modifier = planned_economy_modifier } }
						remove_dynamic_modifier = { modifier = planned_economy_modifier }
					}
				}
			}
		}
		effect = {
			if = {
				limit = { is_ai = yes }	### AI WEEKLY EFFECTS (THESE ARE DAILY FOR PLAYERS)
				### UNIFICATION OF JAPAN ###
				if = {
					limit = { unification_candidate = yes }
					unification_get_score = yes
					unification_count_states_southern_japan = yes
					unification_count_states_central_japan = yes
					unification_count_states_northern_japan = yes
					get_all_unification_score_firsts = yes
					unification_count_total_states = yes
					unification_get_highter_score = yes
					every_controlled_state = {
						set_variable = { state_unification_compliance = PREV.country_unification_bonus }
						set_variable = { state_unification_resistance = PREV.country_unification_bonus2 }
					}
				}
				### COALITION STABILITY BONUS ###
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic NOT = { has_government = democratic } }
					set_variable = { coalition_stability_bonus = party_popularity@democratic }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic_socialism NOT = { has_government = democratic_socialism } }
					set_variable = { coalition_stability_bonus = party_popularity@democratic_socialism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_neutrality NOT = { has_government = neutrality } }
					set_variable = { coalition_stability_bonus = party_popularity@neutrality}
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_autocracy NOT = { has_government = autocracy } }
					set_variable = { coalition_stability_bonus = party_popularity@autocracy }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_fascism NOT = { has_government = fascism } }
					set_variable = { coalition_stability_bonus = party_popularity@fascism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_communism NOT = { has_government = communism } }
					set_variable = { coalition_stability_bonus = party_popularity@communism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic_char NOT = { has_government = democratic } }
					set_variable = { coalition_stability_bonus = party_popularity@democratic }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic_socialism_char NOT = { has_government = democratic_socialism } }
					set_variable = { coalition_stability_bonus = party_popularity@democratic_socialism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_neutrality_char NOT = { has_government = neutrality } }
					set_variable = { coalition_stability_bonus = party_popularity@neutrality}
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_autocracy_char NOT = { has_government = autocracy } }
					set_variable = { coalition_stability_bonus = party_popularity@autocracy }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_fascism_char NOT = { has_government = fascism } }
					set_variable = { coalition_stability_bonus = party_popularity@fascism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_communism_char NOT = { has_government = communism } }
					set_variable = { coalition_stability_bonus = party_popularity@communism }
				}
				if = {
					limit = { has_idea_with_trait = PRT_monarchist_writer NOT = { has_government = autocracy } }
					set_variable = { coalition_stability_bonus = party_popularity@autocracy }
				}
				if = {
					limit = { any_character = { is_country_leader = yes has_character_flag = coalition_with_fascism_secondary } }
					set_variable = { coalition_stability_bonus = party_popularity@fascism }
				}
				multiply_variable = { coalition_stability_bonus = 0.15 }
				if = {
					limit = {
						NOT = {
							# generic ideas
							has_idea_with_trait = coalition_with_democratic
							has_idea_with_trait = coalition_with_democratic_socialism
							has_idea_with_trait = coalition_with_communism
							has_idea_with_trait = coalition_with_neutrality
							has_idea_with_trait = coalition_with_autocracy
							has_idea_with_trait = coalition_with_fascism
							# generic character
							has_idea_with_trait = coalition_with_democratic_char
							has_idea_with_trait = coalition_with_democratic_socialism_char
							has_idea_with_trait = coalition_with_communism_char
							has_idea_with_trait = coalition_with_neutrality_char
							has_idea_with_trait = coalition_with_autocracy_char
							has_idea_with_trait = coalition_with_fascism_char
							# special character
							has_idea_with_trait = PRT_monarchist_writer
							# secondary leaders (checks character flag on main leader, trait on secondary needs a scripted loc for display)
							any_character = { is_country_leader = yes has_character_flag = coalition_with_fascism_secondary }
						}
					}
					set_variable = { coalition_stability_bonus = 0 }
				}
				### DIVISION LIMIT SYSTEM	###
				calculate_division_limit = yes
				check_division_limit = yes
				### PARTY POPULARITY BONUSES
				if = {
					limit = { has_dynamic_modifier = { modifier = PRO_modifier_ruling_party_popularity } }	# it uses a PRO modifier but can work for every one
					set_temp_variable = { pop_bonus = party_popularity@ruling_party }
					multiply_temp_variable = { pop_bonus = 0.15 }											# attention to scale
					if = {
						limit = { has_idea_with_trait = party_popularity_war_support_bonus }
						set_variable = { PRO_war_support_propaganda_bonus = pop_bonus }						# please dont mind the very specific variable names
					} else = { set_variable = { PRO_war_support_propaganda_bonus = 0 } }
					if = {
						limit = { has_idea_with_trait = party_popularity_policial_power_bonus }
						set_variable = { PRO_politica_power_ban_extremism_bonus = pop_bonus }
					} else = { set_variable = { PRO_politica_power_ban_extremism_bonus = 0 } }
					if = {
						limit = { has_idea_with_trait = party_popularity_army_org_bonus }
						set_variable = { PRO_organization_codes_of_conduct_bonus = pop_bonus }
					} else = { set_variable = { PRO_organization_codes_of_conduct_bonus = 0 } }
					if = {
						limit = { has_idea_with_trait = party_popularity_legitimacy_bonus }
						set_variable = { legitimacy_popularity_bonus = pop_bonus }
					} else = { set_variable = { legitimacy_popularity_bonus = 0 } }
				}
			}
		}
		effect = {
			### TOTAL POPULATION & JAPANESE POPULATION ###
			set_variable = { country_total_population = 0 }
			set_variable = { country_japanese_population = 0 }
			every_controlled_state = {
				add_to_variable = { PREV.country_total_population = state_population_k }
				if = {
					limit = { OR = { is_on_continent = europe is_on_continent = honshu is_on_continent = kyushu is_on_continent = hokkaido is_on_continent = shikoku } }
					add_to_variable = { PREV.country_japanese_population = state_population_k }
				}
			}
		}
		effect = {
			### RELIGION 2.0 ###
			get_country_religion_buddhism = yes
			get_country_religion_shinto = yes
			get_country_religion_christianity = yes
			get_country_religion_taoism = yes
			get_country_religion_confucianism = yes
			get_country_religion_secularism = yes
			get_country_religion_cthulhu = yes
			get_country_religion_drift = yes
			get_official_religion_popularity = yes
			scale_country_religion_effect = yes
			set_country_religion_modifier = yes
			every_controlled_state = {
				get_religion_state_compliance_modifier = yes
			}
		}
		effect = {
			# 1929 1929 1929 1929 1929 1929 1929 1929
			if = {
				limit = {
					has_global_flag = crash_1929_global_enabled
				}
				every_country = {
					if = {
						limit = {
							NOT = { has_country_flag = crash_1929_country_enabled }
						}
						crash_1929_country_set_up = yes
					}
				}
				every_country = {
					if = {
						limit = { NOT = { has_government = communism } }	# this is meant for countries that spawn later in the game or change from communism to any other ideology
						crash_1929_calculate_effect = yes
						crash_1929_recalc_newspaper_icon_frames = yes
						if = {
							limit = {
								NOT = { has_active_mission = automatic_economic_recovery }
							}
							set_country_flag = automatic_economic_recovery_ready # it does not impede "regular" countries from yearly recovery, that start their count on january 1st, but should be reset later
							activate_mission = automatic_economic_recovery
							set_country_flag = reset_me_please
						}
					}
				}
				every_country = {
					if = {
						limit = {
							has_government = communism
							has_dynamic_modifier = { modifier = crash_1929_national_spirit }
						}
						remove_dynamic_modifier = { modifier = crash_1929_national_spirit }
						if = {
							limit = { has_active_mission = automatic_economic_recovery }
							remove_mission = automatic_economic_recovery
						}
					}
				}
			}
			if = {
				limit = {
					check_variable = { global.crash_1929_level < 1 }
				}
				crash_1929_end = yes
			}
		}
		effect = {
			### PRO SANCTION TOH ### PRO SANCTION TOH ### PRO SANCTION TOH ### PRO SANCTION TOH
			if = {
				limit = {
					country_exists = PRO
					PRO = {
						has_country_flag = PRO_enacted_sanctions_against_TOH
						NOT = { is_subject_of = TOH }
					}
					TOH = {
						NOT = { has_war_with = PRO }
						NOT = { is_in_faction_with = PRO }
						NOT = { is_subject_of = PRO }
					}
				}
				every_country = {
					limit = {
						OR = {
							tag = PRO
							is_subject_of = PRO
						}
						NOT = { has_idea = PRO_idea_economic_sanction }
					}
					add_ideas = PRO_idea_economic_sanction
				}
				every_country = {
					limit = {
						has_idea = PRO_idea_economic_sanction
						NOT = {
							is_subject_of = PRO
							tag = PRO
						}
					}
					remove_ideas = PRO_idea_economic_sanction
				}
			} else = {
				every_country = {
					limit = {
						has_idea = PRO_idea_economic_sanction
					}
					remove_ideas = PRO_idea_economic_sanction
				}
			}
		}
		effect = {
			### WORLD STAGE ###
			world_stage_get_coalitions = yes	# maybe depricated
		}
	}
	
	on_daily = {
		effect = {	### EXECUTE ON ONLY ONE COUNRTY A.K.A. "GLOBAL" ON DAILY ###
			if = {
				limit = { controls_state = 1 }
				world_stage_activate_daily_state_effect = yes
				# first we check the focuses
				if = {
					limit = { NOT = { country_exists = REI } has_global_flag = { flag = world_stage_ai_germany_focus days > 35 } NOT = { 101 = { has_state_flag = metropolis_capitulated } } }
					world_stage_ai_germany_focus = yes
				}
				if = {
					limit = { NOT = { country_exists = OSA } has_global_flag = { flag = world_stage_ai_england_focus days > 35 } NOT = { 101 = { has_state_flag = metropolis_capitulated } } }
					world_stage_ai_england_focus = yes
				}
				if = {
					limit = { NOT = { country_exists = KOB } has_global_flag = { flag = world_stage_ai_france_focus days > 35 } NOT = { 103 = { has_state_flag = metropolis_capitulated } } }	# currently there are no French focuses, this trigger has effectively no purpose but will be used in the future
					world_stage_ai_france_focus = yes
				}
				if = {
					limit = { NOT = { country_exists = FER } }
					world_stage_ai_sovietunion_focus = yes
				}
				if = {
					limit = {
						NOT = { country_exists = AMC }
						OR = {
							OKI = { exists = no }
							OKI = {exists = yes has_country_flag = OKI_is_independent }	# i'm not sure if this trigger is right, gotta check later TODO TO-DO TO DO
						}
						has_global_flag = { flag = world_stage_ai_usa_focus days > 35 }
					}
					world_stage_ai_usa_focus = yes
				}
				if = {
					limit = { NOT = { country_exists = HIR } }
					world_stage_ai_netherlands_focus = yes
				}
				if = {
					limit = { NOT = { country_exists = ROC } has_global_flag = { flag = world_stage_ai_china_focus days > 35 } NOT = { has_global_flag = world_stage_china_capitulated } }
					world_stage_ai_china_focus = yes
				}
				# now we check for moves in the world stage (actions, equivalent to human player pressing buttons)
				# every AI will run the same code
				101 = {
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } OR = { REI = { has_country_flag = enable_worldstage_autopilot } NOT = { country_exists = REI } } }	# there's an on_action / on_annex that sets autopilot if a human player is annexed
						chose_theater_to_act = yes
					}
				}
				102 = {
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } OR = { OSA = { has_country_flag = enable_worldstage_autopilot } NOT = { country_exists = OSA } } }
						chose_theater_to_act = yes
					}
				}
				103 = {
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } OR = { KOB = { has_country_flag = enable_worldstage_autopilot } NOT = { country_exists = KOB } } }
						chose_theater_to_act = yes
					}
				}
				104 = {
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } OR = { FER = { has_country_flag = enable_worldstage_autopilot } NOT = { country_exists = FER } } }
						chose_theater_to_act = yes
					}
				}
				105 = {
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } OR = { MUS = { has_country_flag = enable_worldstage_autopilot } NOT = { country_exists = MUS } } }	# MUS: Main US Colony (aliases tag)
						chose_theater_to_act = yes
					}
				}
				106 = {
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } OR = { ROC = { has_country_flag = enable_worldstage_autopilot } NOT = { country_exists = ROC } } }
						chose_theater_to_act = yes
					}
				}
				107 = {
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } OR = { HIR = { has_country_flag = enable_worldstage_autopilot } NOT = { country_exists = HIR } } }
						chose_theater_to_act = yes
					}
				}
				108 = {
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } OR = { PRT = { has_country_flag = enable_worldstage_autopilot } NOT = { country_exists = PRT } } }
						chose_theater_to_act = yes
					}
				}
				109 = {
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } OR = { KIT = { has_country_flag = enable_worldstage_autopilot } NOT = { country_exists = KIT } } }
						chose_theater_to_act = yes
					}
				}
				111 = {	# 110 does not exist
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } SPR = { OR = { has_country_flag = enable_worldstage_autopilot } exists = no has_government = fascism has_government = neutrality has_government = autocracy } }
						chose_theater_to_act = yes
					}
				}
				115 = {	# 112, 113: unused proxy tags	# 114: Manchuria is not off map
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } }	# Poland: always off-map
						chose_theater_to_act = yes
					}
				}
#				116 = {
#					if = {
#						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } }	# Mongolia: always off-map
#						chose_theater_to_act = yes
#					}
#				}
#				117 = {
#					if = {
#						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } }	# Norway: always off-map
#						chose_theater_to_act = yes
#					}
#				}
#				118 = {
#					if = {
#						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } }	# Ethiopia: always off-map
#						chose_theater_to_act = yes
#					}
#				}
#				119 = {
#					if = {
#						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } }	# Austria: always off-map
#						chose_theater_to_act = yes
#					}
#				}
				120 = {
					if = {
						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } KOB = { OR = { has_country_flag = enable_worldstage_autopilot } exists = no has_government = democratic has_government = democratic_socialism has_government = communism } }
						chose_theater_to_act = yes
					}
				}
#				121 = {
#					if = {
#						limit = { has_state_flag = worldstage_AI_active has_state_flag = { flag = AI_took_an_action days > 30 } SPR = { OR = { has_country_flag = enable_worldstage_autopilot } exists = no has_government = democratic has_government = democratic_socialism has_government = communism } }
#						chose_theater_to_act = yes
#					}
#				}
				# now, other stuff
				world_stage_news_handler = yes
			}
		#	log = "SPECIAL WORLDSTAGE LOG"
		#	every_state = {
		#		limit = { has_variable = theater_owner has_state_flag = theater_is_active }
		#		log = "[GetTheaterName] is active (timer: [?theater_timer] days)"
		#		log = "theater_owner_coalition: [?theater_owner_coalition] // coalition_side_attack: [?coalition_side_attack]"
		#	}
		}
	}
	
	on_daily = {
		effect = {
			if = {
				limit = { is_ai = no }	### PLAYER EFFECTS (THESE ARE WEEKLY FOR AI)
				### UNIFICATION OF JAPAN ###
				if = {
					limit = { unification_candidate = yes }
					unification_get_score = yes
					unification_count_states_southern_japan = yes
					unification_count_states_central_japan = yes
					unification_count_states_northern_japan = yes
					get_all_unification_score_firsts = yes
					unification_count_total_states = yes
					unification_get_highter_score = yes
					every_controlled_state = {
						set_variable = { state_unification_compliance = PREV.country_unification_bonus }
						set_variable = { state_unification_resistance = PREV.country_unification_bonus2 }
					}
				}
				### COALITION STABILITY BONUS ###
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic NOT = { has_government = democratic } }
					set_variable = { coalition_stability_bonus = party_popularity@democratic }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic_socialism NOT = { has_government = democratic_socialism } }
					set_variable = { coalition_stability_bonus = party_popularity@democratic_socialism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_neutrality NOT = { has_government = neutrality } }
					set_variable = { coalition_stability_bonus = party_popularity@neutrality}
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_autocracy NOT = { has_government = autocracy } }
					set_variable = { coalition_stability_bonus = party_popularity@autocracy }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_fascism NOT = { has_government = fascism } }
					set_variable = { coalition_stability_bonus = party_popularity@fascism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_communism NOT = { has_government = communism } }
					set_variable = { coalition_stability_bonus = party_popularity@communism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic_char NOT = { has_government = democratic } }
					set_variable = { coalition_stability_bonus = party_popularity@democratic }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_democratic_socialism_char NOT = { has_government = democratic_socialism } }
					set_variable = { coalition_stability_bonus = party_popularity@democratic_socialism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_neutrality_char NOT = { has_government = neutrality } }
					set_variable = { coalition_stability_bonus = party_popularity@neutrality}
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_autocracy_char NOT = { has_government = autocracy } }
					set_variable = { coalition_stability_bonus = party_popularity@autocracy }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_fascism_char NOT = { has_government = fascism } }
					set_variable = { coalition_stability_bonus = party_popularity@fascism }
				}
				if = {
					limit = { has_idea_with_trait = coalition_with_communism_char NOT = { has_government = communism } }
					set_variable = { coalition_stability_bonus = party_popularity@communism }
				}
				if = {
					limit = { has_idea_with_trait = PRT_monarchist_writer NOT = { has_government = autocracy } }
					set_variable = { coalition_stability_bonus = party_popularity@autocracy }
				}
				if = {
					limit = { any_character = { is_country_leader = yes has_character_flag = coalition_with_fascism_secondary } }
					set_variable = { coalition_stability_bonus = party_popularity@fascism }
				}
				multiply_variable = { coalition_stability_bonus = 0.15 }
				if = {
					limit = {
						NOT = {
							# generic ideas
							has_idea_with_trait = coalition_with_democratic
							has_idea_with_trait = coalition_with_democratic_socialism
							has_idea_with_trait = coalition_with_communism
							has_idea_with_trait = coalition_with_neutrality
							has_idea_with_trait = coalition_with_autocracy
							has_idea_with_trait = coalition_with_fascism
							# generic character
							has_idea_with_trait = coalition_with_democratic_char
							has_idea_with_trait = coalition_with_democratic_socialism_char
							has_idea_with_trait = coalition_with_communism_char
							has_idea_with_trait = coalition_with_neutrality_char
							has_idea_with_trait = coalition_with_autocracy_char
							has_idea_with_trait = coalition_with_fascism_char
							# special character
							has_idea_with_trait = PRT_monarchist_writer
							# secondary leaders (checks character flag on main leader, trait on secondary needs a scripted loc for display)
							any_character = { is_country_leader = yes has_character_flag = coalition_with_fascism_secondary }
						}
					}
					set_variable = { coalition_stability_bonus = 0 }
				}
				### DIVISION LIMIT SYSTEM	###
				calculate_division_limit = yes
				check_division_limit = yes
				### PARTY POPULARITY BONUSES
				if = {
					limit = { has_dynamic_modifier = { modifier = PRO_modifier_ruling_party_popularity } }	# it uses a PRO modifier but can work for every one
					set_temp_variable = { pop_bonus = party_popularity@ruling_party }
					multiply_temp_variable = { pop_bonus = 0.15 }											# attention to scale
					if = {
						limit = { has_idea_with_trait = party_popularity_war_support_bonus }
						set_variable = { PRO_war_support_propaganda_bonus = pop_bonus }						# please dont mind the very specific variable names
					} else = { set_variable = { PRO_war_support_propaganda_bonus = 0 } }
					if = {
						limit = { has_idea_with_trait = party_popularity_policial_power_bonus }
						set_variable = { PRO_politica_power_ban_extremism_bonus = pop_bonus }
					} else = { set_variable = { PRO_politica_power_ban_extremism_bonus = 0 } }
					if = {
						limit = { has_idea_with_trait = party_popularity_army_org_bonus }
						set_variable = { PRO_organization_codes_of_conduct_bonus = pop_bonus }
					} else = { set_variable = { PRO_organization_codes_of_conduct_bonus = 0 } }
					if = {
						limit = { has_idea_with_trait = party_popularity_legitimacy_bonus }
						set_variable = { legitimacy_popularity_bonus = pop_bonus }
					} else = { set_variable = { legitimacy_popularity_bonus = 0 } }
				}
				### WORLD STAGE
				for_each_loop = {
					array = array_worldstage_action_cooldown
					index = this_theater
					value = new_value
					
					subtract_from_variable = { array_worldstage_action_cooldown^this_theater = 1 }
					#log = "[THIS.GetName]: theater nÂº [?this_theater], cooldown = [?array_worldstage_action_cooldown^this_theater]"
				}
				world_stage_get_timer_frame_daily = yes	# timer for each theater resolving
			}
		}
	}
	
	on_monthly = {
		effect = {
		### TRADE CITIES 2.0	###
			every_country = {
				check_trade_cities = yes
			}
		}
		effect = {
		### RELIGION 2.0 ###
			every_controlled_state = {
				state_drift_religion = yes
			}
		}
		### PLANNED ECONOMY ###
		effect = {
			if = {
				limit = { is_ai = yes }	### AI MONTHLY EFFECTS (THESE ARE WEEKLY FOR PLAYERS)
				planned_economy_update = yes
			} 
			else = {
				if = {
					limit = { has_dynamic_modifier = { modifier = planned_economy_modifier } }
					remove_dynamic_modifier = { modifier = planned_economy_modifier }
				}
			}
		}
		### WORLD STAGE ###
		effect = {
			if = {
				limit = { controls_state = 1 }
				### update generic doctrines			##### THIS WHOLE TIHNG MAY BE UNCESSARY, CAN BE REPLACED BY A SCHEDULE EFFECT WITH OFF-MAP AI
				random_list = {
					1 = { add_to_variable = { global.generic_doctrine_bonus_land = 0.1 } }		# updates land doctrine
					17 = {	}																	# nothing happens
				}
				random_list = {
					1 = { add_to_variable = { global.generic_doctrine_bonus_navy = 0.1 } }		# updates navy doctrine
					17 = {	}																	# nothing happens
				}
				random_list = {
					1 = {
						add_to_variable = { global.generic_doctrine_bonus_land = 0.05 }			# updates "air" doctrine
						add_to_variable = { global.generic_doctrine_bonus_navy = 0.05 }
					}
					17 = {	}																	# nothing happens
				}
				clamp_variable = { var = global.generic_doctrine_bonus_land min = 0 max = 1 }
				clamp_variable = { var = global.generic_doctrine_bonus_navy min = 0 max = 1 }
			}
		}
	}
	
	on_war = {
		effect = {
			### PLANNED ECONOMY ###
			if = {
				limit = { has_government = communism }
				planned_economy_update = yes
			}
		}
	}
	
	on_peace = {
		effect = {
			### PLANNED ECONOMY ###
			if = {
				limit = { has_government = communism }
				planned_economy_update = yes
			}
		}
	}
	
	on_capitulation = {
		effect = {
			if = {
				limit = { ROOT = { tag = IMS } }
				clr_global_flag = seto_crisis_active
			}
		}
	}
	
	on_ruling_party_change = {
		effect = {
			### SET OR RESET 1929 CRASH ###
			if = {
				limit = { has_global_flag = crash_1929_global_enabled }
				if = {
					limit = { has_government = communism }
					remove_dynamic_modifier = { modifier = crash_1929_national_spirit }
					if = {
						limit = { has_active_mission = automatic_economic_recovery }
						remove_mission = automatic_economic_recovery
					}
				} else = {
					crash_1929_calculate_effect = yes
					add_dynamic_modifier = {
						modifier = crash_1929_national_spirit
					}
				}
			}
			### PLANNED ECONOMY ###
			if = {
				limit = { has_government = communism }
				planned_economy_set_up = yes
			} else = {
				planned_economy_remove = yes
			}
			### OPINION MODIFIERS
			if = {
				limit = { has_country_leader_with_trait = SHI_tannenbergbund_member_trait NOT = { REI = { has_opinion_modifier = SHI_tannenbergbund_member_modifier } } }
				REI = {
					add_opinion_modifier = {
						target = PREV
						modifier = SHI_tannenbergbund_member_modifier
					}
				}
			}
			if = {
				limit = { has_country_leader_with_trait = KYU_martyrs_of_nagaoka_trait NOT = { SHO = { has_opinion_modifier = KYU_martyrs_of_nagaoka_modifier } } }
				SHO = {
					add_opinion_modifier = {
						target = PREV
						modifier = KYU_martyrs_of_nagaoka_modifier
					}
				}
			}
		}
	}
	
	on_unit_leader_created = {
		effect = {
			ROOT = {
				if = {
					limit = { FROM = { has_idea = advanced_training_spirit } }
					random_list = {
						50 = { }	# nothing happens
						25 = {
							add_unit_leader_trait = commando
							remove_unit_leader_trait = old_guard
							remove_unit_leader_trait = cavalry_officer
							remove_unit_leader_trait = armor_officer
							remove_unit_leader_trait = engineer_officer
							remove_unit_leader_trait = irregulars_officer
							remove_unit_leader_trait = ascari_officer
							remove_unit_leader_trait = militias_officer
							remove_unit_leader_trait = jaeger
						}
						25 = {
							add_unit_leader_trait = hunter_jager
							remove_unit_leader_trait = old_guard
							remove_unit_leader_trait = cavalry_officer
							remove_unit_leader_trait = armor_officer
							remove_unit_leader_trait = engineer_officer
							remove_unit_leader_trait = irregulars_officer
							remove_unit_leader_trait = ascari_officer
							remove_unit_leader_trait = militias_officer
							remove_unit_leader_trait = jaeger
						}
					}
					remove_unit_leader_trait = old_guard
					remove_unit_leader_trait = politically_connected
				}
			}
		}
	}
	
	### TAG-SPECIFIC EFFECTS
	
	on_monthly_PRT = {
		effect = {
			# Rotate Fernando Pessoa's heteronym
			if = {
				limit = {
					has_global_flag = eastereggs_enabled
					NOT = {
						has_idea = PRT_fernando_pessoa_rafael_baldaya
						has_idea = PRT_fernando_pessoa_rafael_baldaya_cthulhu
						has_idea = PRT_fernando_pessoa_alvaro_campos
						has_idea = PRT_fernando_pessoa_joaquim_costa
						has_idea = PRT_fernando_pessoa_joao_craveiro
						has_idea = PRT_fernando_pessoa_ricardo_reis
						has_country_flag = PRT_stop_rotation
						has_country_leader = { character = PRT_fernando_pessoa ruling_only = no }
					}
				}
				fernando_pessoa_heteronym_rotation = yes
			}
		}
	}
	
	on_daily_HIR = {
		effect = {
			set_variable = { hir_net_exports = resource_exported@oil }
			add_to_variable = { hir_net_exports = resource_exported@steel }
			add_to_variable = { hir_net_exports = resource_exported@tungsten }
			add_to_variable = { hir_net_exports = resource_exported@rubber }
			add_to_variable = { hir_net_exports = resource_exported@chromium }
			add_to_variable = { hir_net_exports = resource_exported@aluminium }
			subtract_from_variable = { hir_net_exports = resource_imported@oil }
			subtract_from_variable = { hir_net_exports = resource_imported@steel }
			subtract_from_variable = { hir_net_exports = resource_imported@tungsten }
			subtract_from_variable = { hir_net_exports = resource_imported@rubber }
			subtract_from_variable = { hir_net_exports = resource_imported@chromium }
			subtract_from_variable = { hir_net_exports = resource_imported@aluminium }
			divide_variable = { hir_net_exports = 500 }
			clamp_variable = { var = hir_net_exports min = 0.01 }
			set_variable = { HIR_pp_bonus_trade = hir_net_exports }
			set_variable = { HIR_op_bonus_trade = hir_net_exports }
			set_variable = { HIR_spy_bonus_trade = hir_net_exports }
		}
	}
	
	on_daily_IMS = {
		effect = {
			if = {
				limit = { has_global_flag = seto_crisis_active }
				IMS_get_favor_all = yes
			}
		}
	}
	
	on_daily_CHU = {
		effect = {
			if = {
				limit = {
					check_variable = {
						CHU.chu_democracy_revolt_power_shi > 50
					}
					check_variable = {
						CHU.chu_democracy_revolt_power_shi > CHU.shi_democracy_revolt_power
					}
				}
					SHI = { 
					clr_country_flag = chugoku_democracy_revolt 
					country_event = { id = chugoku.25 } 
					}
					CHU = { 
					set_country_flag = chugoku_democracy_revolt_civil_war_SHI 
					country_event = { id = chugoku.25 } 
					}
			}
			if = {
				limit = {
					check_variable = {
						CHU.chu_democracy_revolt_power_kyu > 50
					}
					check_variable = {
						CHU.chu_democracy_revolt_power_kyu > CHU.kyu_democracy_revolt_power
					}
				}
					KYU = { 
					clr_country_flag = chugoku_democracy_revolt 
					country_event = { id = chugoku.27 } 
					}
					CHU = { 
					set_country_flag = chugoku_democracy_revolt_civil_war_kyu 
					country_event = { id = chugoku.27 } 
					}
			}
			if = {
				limit = {
					check_variable = {
						CHU.kyu_democracy_revolt_power > 50
					}
					check_variable = {
						CHU.kyu_democracy_revolt_power > CHU.chu_democracy_revolt_power_kyu
					}
				}
					KYU = { 
					clr_country_flag = chugoku_democracy_revolt 
					country_event = { id = chugoku.28 }
					}
					CHU = { 
					clr_country_flag = chugoku_democracy_revolt 
					country_event = { id = chugoku.28 }
					}
			}
			if = {
				limit = {
					check_variable = {
						CHU.shi_democracy_revolt_power > 50
					}
					check_variable = {
						CHU.shi_democracy_revolt_power > CHU.chu_democracy_revolt_power_shi
					}
				}
					SHI = { 
					clr_country_flag = chugoku_democracy_revolt 
					country_event = { id = chugoku.26 }
					}
					CHU = { 
					clr_country_flag = chugoku_democracy_revolt 
					country_event = { id = chugoku.26 }
					}
			}
			if = {
				limit = {
					check_variable = {
						CHU.chu_democracy_revolt_power_shi > 50
					}
					check_variable = {
						CHU.chu_democracy_revolt_power_shi > CHU.shi_democracy_revolt_power
					}
				}
					SHI = { clr_country_flag = chugoku_democracy_revolt }
					CHU = { clr_country_flag = chugoku_democracy_revolt }
			}
			if = {
				limit = {
					check_variable = {
						CHU.chu_democracy_revolt_power_kyu > 50
					}
					check_variable = {
						CHU.chu_democracy_revolt_power_kyu > CHU.kyu_democracy_revolt_power
					}
				}
					KYU = { clr_country_flag = chugoku_democracy_revolt }
					CHU = { clr_country_flag = chugoku_democracy_revolt }
			}
		}
	}
}
