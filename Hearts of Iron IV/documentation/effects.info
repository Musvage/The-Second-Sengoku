== EFFECT DOCUMENTATION ==
add_legitimacy - add_legitimacy = 10. Adds legitimacy to scope country. Value has to be 0-100.
Supported scopes: country

Supported targets:

add_stability - Adds the stability to the country in scope. Example: add_stability = 5
Supported scopes: country

Supported targets:

add_manpower - Adds manpower to the country in scope or locally on a state if in state scope
Supported scopes: state country

Supported targets: none

custom_effect_tooltip - Shows just a custom tooltip
Supported scopes: ???

Supported targets:

set_capital - move capital to state
Supported scopes: country

Supported targets:

add_state_core - add core on state
Supported scopes: country

Supported targets:

remove_state_core - remove core on state
Supported scopes: country

Supported targets:

change_tag_from - Changes player to other country
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

add_province_modifier - Adds static modifiers to specified province.
add_province_modifier = {
	static_modifiers = { mod_1 mod_2 }
Select 1 province:
	province = 500
Or use:
	province = {
		id = 500 id = 501 id = 502 (evaluate for specified provinces)
		all_provinces (includes all in current state)
		limit_to_coastal (only coastal provinces)
		limit_to_border (only provinces bordering different country)
		limit_to_naval_base (only provinces with a naval base)
		limit_to_victory_point (only provinces with a VP)
	}
}
Supported scopes: state

Supported targets: none

set_country_flag - set country flag
Supported scopes: country

Supported targets:

clr_country_flag - clear country flag
Supported scopes: country

Supported targets:

set_global_flag - set global flag
Supported scopes: ???

Supported targets:

clr_global_flag - clear global flag
Supported scopes: ???

Supported targets:

remove_building - Removes specified building in specified state or province
Supported scopes: state country

Supported targets: none

release - releases specified country as a puppet
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

every_country - Executes children effects on every country that fulfills the "limit" trigger.
Supported scopes: ???

Supported targets:

random_country - Executes children effects on random country that fulfills the "limit" trigger.
Supported scopes: ???

Supported targets:

every_neighbor_country - Executes children effects on every neighbor country that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

random_neighbor_country - Executes children effects on random neighbor country that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

every_enemy_country - Executes children effects on random enemy country that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

random_enemy_country - Executes children effects on random enemy country that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

country_event - fires a country event
Supported scopes: country

Supported targets:

state_event - fires a state event
Supported scopes: state country

Supported targets: none

remove_province_modifier - Removes a static modifiers to specified province
remove_province_modifier = {
	static_modifiers = { mod_1 mod_2 }
Select 1 province:
	province = 500
Or use:
	province = {
		id = 500 id = 501 id = 502 (evaluate for specified provinces)
		all_provinces (includes all in current state)
		limit_to_coastal (only coastal provinces)
		limit_to_border (only provinces bordering different country)
		limit_to_naval_base (only provinces with a naval base)
		limit_to_victory_point (only provinces with a VP)
	}
}
Supported scopes: state

Supported targets: none

set_variable - Sets a variable to a value or another variable
Example: set_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: ???

Supported targets:

add_ai_strategy - Adds strategy entry to country AI
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

random - a random effect
Supported scopes: ???

Supported targets:

random_list - a random effect
Supported scopes: ???

Supported targets:

white_peace - white peaces the two countries if at war
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

hidden_effect - Effect not shown in tooltips
Supported scopes: state country

Supported targets: none

if - a conditional effect
Supported scopes: ???

Supported targets:

add_state_claim - add claim on state
Supported scopes: country

Supported targets:

remove_state_claim - remove claim on state
Supported scopes: country

Supported targets:

add_opinion_modifier - Add opinion modifier(s) to target(s)
Supported scopes: country

Supported targets: ???

remove_opinion_modifier - Remove opinion modifier from target
Supported scopes: country

Supported targets: ???

create_country_leader - creates a leader and adds it to proper party in country
Supported scopes: country

Supported targets:

log - Print message to game.log - Can be localized
Supported scopes: ???

Supported targets:

create_unit - Create unit effect, just like in OOB,  from effect with specified parameters: owner, prioritize_location.
Example:
AST = {
285 = {
create_unit = {
division = " name = \"The Rats of Tobruk\" division_template = \"Infantry Division\" start_experience_factor = 0.3"
owner = AST
prioritize_location = 12406
}
}
}
Supported scopes: ???

Supported targets:

sound_effect - Plays sound effect
Supported scopes: ???

Supported targets:

promote_leader - promotes general to field marshal
Supported scopes:

Supported targets:

randomize_weather - Randomize weather effect
Supported scopes: ???

Supported targets: ???

division_template - add a division template to country
Supported scopes: country

Supported targets:

set_country_leader_ideology - change the ideology of active leader
Supported scopes: country

Supported targets:

add_country_leader_trait - add trait to active country leader
Supported scopes: country

Supported targets:

remove_country_leader_trait - remove trait from active country leader
Supported scopes: country

Supported targets:

set_political_party - set properties of a political party
Supported scopes: country

Supported targets:

set_politics - set country political status
Supported scopes: country

Supported targets:

add_ideas - add idea(s) to country
Supported scopes: country

Supported targets:

remove_ideas - remove idea(s) from country
Supported scopes: country

Supported targets:

add_political_power - add political power to country
Supported scopes: country

Supported targets:

set_political_power - set political power for country
Supported scopes: country

Supported targets:

set_technology - sets technology level(s) on country
Supported scopes: country

Supported targets:

create_navy_leader - create navy leader for country
Supported scopes: country

Supported targets:

remove_unit_leader_trait - remove trait from unit leader
Supported scopes:

Supported targets:

add_unit_leader_trait - add trait to unit leader
Supported scopes:

Supported targets:

add_namespace - adds new namespace
Supported scopes: ???

Supported targets:

set_state_owner - set owner for state
Supported scopes: country

Supported targets:

puppet - puppets specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

set_state_controller - set controller for state
Supported scopes: country

Supported targets:

transfer_state - set owner and controller for state
Supported scopes: country

Supported targets:

set_state_flag - set state flag
Supported scopes: state

Supported targets: none

clr_state_flag - clear state flag
Supported scopes: state

Supported targets: none

create_faction - create faction of specified name
Supported scopes: country

Supported targets:

add_nuclear_bombs - add nukes to country
Supported scopes: country

Supported targets:

annex_country - 
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

add_building_construction - Starts building construction for amount of levels in specified state or province
Supported scopes: state

Supported targets: none

dismantle_faction - dismantle faction led by the current country
Supported scopes: country

Supported targets:

add_to_faction - adds specified country to faction
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

remove_from_faction - removes specified country from faction
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

give_guarantee - guarantees specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

give_military_access - gives military access to the specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

random_state - Executes children effects on random state that fulfills the "limit" trigger.
Supported scopes: ???

Supported targets:

random_owned_state - Executes children effects on random owned state that fulfills the "limit" trigger. 
prioritize = { <stateID> <stateID> } to pick those states first if they fulfull the limit
Supported scopes: country

Supported targets:

random_neighbor_state - Executes children effects on random neighbor state that fulfills the "limit" trigger.
Supported scopes: state

Supported targets: none

every_state - Executes children effects on every state that fulfills the "limit" trigger.
Supported scopes: ???

Supported targets:

every_owned_state - Executes children effects on every owned state that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

every_neighbor_state - Executes children effects on every neighbor state that fulfills the "limit" trigger.
Supported scopes: state

Supported targets: none

news_event - fires a news event
Supported scopes: country

Supported targets:

declare_war_on - declares war on specified country
Supported scopes: country

Supported targets:

add_scaled_political_power - add political power to country scaled by the difference in IC between the receiver and another country
Supported scopes: country

Supported targets:

hold_election - Immediately holds an election in the target country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

add_popularity - add popularity to an ideology in a country
Supported scopes: country

Supported targets:

remove_ideas_with_trait - Remove all ideas with specified trait from country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

start_civil_war - Given ideology starts a civil war in the country.
start_civil_war = {
	ideology = revolting ideology
	ruling party = ruling party for country
	size = 0-1 Size modifier of the revolt. Affects stockpile, army, air and navy as well
	army_ratio = 0-1 Overrides size modifier for army
	navy_ratio = 0-1 Overrides size modifier for navy
	air_ratio = 0-1 Overrides size modifier for air
	keep_unit_leaders specify ID of unit leaders that remain with the original country
	keep_unit_leaders_trigger Trigger for unit leaders to remain with the original country
	states States that go to the revolter. Use "all" to include all states.
	states_filter States that go to the revolter. Filtering trigger on the states scripted to go to the revolter.
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

retire_country_leader - retires a country leader and removes him as leader of his party, making the next in line the new party and country leader
Supported scopes: country

Supported targets:

kill_country_leader - kills a country leader and removes him completely, making the next in line the new party and country leader
Supported scopes: country

Supported targets:

release_puppet - releases specified country as puppet
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

create_wargoal - creates wargoal for country in scope
Supported scopes: country

Supported targets:

add_claim_by - Add state claim by country.
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

remove_claim_by - Removes state claim by country.
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

add_core_of - Add state as core of country
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

remove_core_of - Removes state as core of country
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

army_experience - add army experience for country
Supported scopes: country

Supported targets:

navy_experience - add naval experience for country
Supported scopes: country

Supported targets:

air_experience - add air experience for country
Supported scopes: country

Supported targets:

save_event_target_as - save an event target
Supported scopes: ???

Supported targets:

save_global_event_target_as - save a global event target
Supported scopes: ???

Supported targets:

clear_global_event_target - clear a global event target
Supported scopes: ???

Supported targets:

clear_global_event_targets - clear all global event targets
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

break - break execution of effects
Supported scopes: state country

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

unlock_national_focus - unlocks a focus for a country
Supported scopes: country

Supported targets:

add_tech_bonus - adds a limited use tech bonus
Supported scopes: country

Supported targets:

set_demilitarized_zone - adds a limited use tech bonus
Supported scopes: state

Supported targets: none

add_research_slot - Adds a research slot (negative values subtracts)
Supported scopes: country

Supported targets:

set_research_slots - Sets the number of research slots
Supported scopes: country

Supported targets:

set_border_war - starts a border war in a state with neighbouring state that also has border war
Supported scopes: state

Supported targets: none

set_equipment_fraction - Modify allequipments by factor
Supported scopes: country

Supported targets:

add_threat - Adds country threat
Supported scopes: country

Supported targets:

send_equipment - Sends to target scope specified amount of equipment.
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

set_rule - Adds rule to country
Supported scopes: country

Supported targets:

diplomatic_relation - Set up a diplomatic relation between two nations
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

effect_tooltip - Shows just tooltip of effects
Supported scopes: state country

Supported targets: ??? none

add_resource - Adds resource production to state
Supported scopes: state country

Supported targets: none

remove_unit_leader - remove a unit leader ( remove_unit_leader=ID )
Supported scopes: country

Supported targets:

add_timed_idea - add time limited idea to country idea, add_timed_idea = { idea = id days = number_of_days }
Supported scopes: country

Supported targets:

end_puppet - Stops specefied country being a puppet of current country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

load_oob - Immediately loads an Order of Battle (OOB) file.

Example:
load_oob = "ENG_1936"
Supported scopes: country

Supported targets:

create_import - Creates trade between two countries
Supported scopes: country

Supported targets:

add_named_threat - Adds country threat
Supported scopes: country

Supported targets:

set_province_controller - set controller for province
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

set_major - sets mandatory major country flag
Supported scopes: country

Supported targets:

create_field_marshal - create field marshal for country
Supported scopes: country

Supported targets:

create_corps_commander - create corps commander for country
Supported scopes: country

Supported targets:

goto_province - Goes to stated province.
Supported scopes: country

Supported targets:

goto_state - Goes to stated state.
Supported scopes: ???

Supported targets:

leave_faction - Country leaves the faction
Supported scopes: country

Supported targets:

complete_national_focus - unlocks a focus for a country
Supported scopes: country

Supported targets:

set_party_name - change partyname for an ideology in a country
Supported scopes: country

Supported targets:

add_extra_state_shared_building_slots - add extra shared building slot to state
Supported scopes: state

Supported targets: none

reverse_add_opinion_modifier - Add opinion modifier(s) to target(s)
Supported scopes: country

Supported targets: ???

add_to_war - adds country to the specified war
Supported scopes: country

Supported targets:

show_ideas_tooltip - show what idea does
Supported scopes: country

Supported targets:

create_equipment_variant - Creates a new equipment variant.
Example:
create_equipment_variant = {
	name = "Yorktown Class"
	type = ship_hull_carrier_2
	parent_version = 1  #default = 0
	obsolete = yes      #default = no
	name_group = ship_name_group_name      #default = empty/none
	role_icon_index = 3      #default just inherits from parent or remains unset
	role_icon_index = 0      #alternative, explicitly unset
	role_icon_index = auto   #uses AI design logic to pick
	upgrades = {        #optional, inherits from parent
		ship_deckspace_upgrade = 1
		carrier_armor_upgrade = 2
	}
	modules = {         #optional, inherits from parent
		fixed_ship_deck_slot_1 = ship_deck_space
		front_1_custom_slot = ship_armor_carrier_deck
		fixed_ship_deck_slot_2 = empty #overrides parent
	}
}
Supported scopes: country

Supported targets:

add_equipment_production - Adds an equipment production
Supported scopes: country

Supported targets:

add_ace - adds an air ace
Supported scopes: country

Supported targets:

random_owned_controlled_state - Executes children effects on random owned state that fulfills the "limit" trigger.
prioritize = { <stateID> <stateID> } to pick those states first if they fulfull the limit
Supported scopes: country

Supported targets:

ai_message - ai message... ?
Supported scopes: country

Supported targets:

every_other_country - Executes children effects on every other country that fulfills the "limit" trigger. Excludes current country
Supported scopes: ???

Supported targets:

random_other_country - Executes children effects on random country that fulfills the "limit" trigger. Excludes current country
Supported scopes: ???

Supported targets:

add_equipment_to_stockpile - Adds equipment to the countries stockpiles.
Example: add_equipment_to_stockpile = { type = strat_bomber_equipment_2 amount = 100 producer = USA }
Supported scopes: country

Supported targets: ???

swap_ideas - swap 2 ideas. 
 Syntax: swap_idea = { remove_idea = <idea> add_idea = <idea> }
Supported scopes: country

Supported targets:

damage_building - Damages buildings in the current state.
Example: damage_building = { type = industrial_complex damage = 2.4 }
Also has the variable province = x when targeting provincial buildings.
Supported scopes: state

Supported targets: ??? none

release_autonomy - releases specified country with specified level of autonomy.
Example:
ENG = {
release_autonomy = {
target=RAJ
autonomy_state=autonomy_puppet
freedom_level=0.5
}
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

set_autonomy - makes autonomy of specified level and country.
Example:
set_autonomy = {
target=ENG
autonomy_state = nautonomy_puppet
freedom_level=0.5
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

add_to_tech_sharing_group - Adds country to technology sharing group of specified name.
Example: add_to_tech_sharing_group = commonwealth_research
Supported scopes: country

Supported targets:

remove_from_tech_sharing_group - Removes country from technology sharing group of specified name.
Example: remove_from_tech_sharing_group = commonwealth_research
Supported scopes: country

Supported targets:

add_autonomy_score - Adds exact freedom score to the autonomy.
Example:
add_autonomy_score={
value=50
localization="LOC_KEY"
}
Supported scopes: country

Supported targets:

modify_tech_sharing_bonus - Modify country bonus for specified technology sharing group.
Example: modify_tech_sharing_bonus  = { id = commonwealth_research bonus = 0.2 }
Supported scopes: country

Supported targets:

add_autonomy_ratio - Adds % freedom score to the autonomy.
Example:
add_autonomy_ratio={
value=0.005
localization="LOC_KEY"
}
Supported scopes: country

Supported targets:

set_cosmetic_tag - Sets country cosmetic tag.
Example: INS = { set_cosmetic_tag = IN1 }
Supported scopes: country

Supported targets:

drop_cosmetic_tag - Drops country cosmetic tag.
Example: INS = { drop_cosmetic_tag }
Supported scopes: country

Supported targets:

transfer_ship - Transfers ship from scope country to target country.
Example:
ENG={
  transfer_ship={
    prefer_name = "HMS Achilles"
    type = light_cruiser
    target = NZL
  }
}
Supported scopes: country

Supported targets:

set_state_category - Sets the category of a state
Example: set_state_category = large_town
Supported scopes: state

Supported targets: none

modify_global_flag - modify global flag. Only modifies if flag already exists.
Example: modify_global_flag = { flag = <name> value = <number> }
Supported scopes: ???

Supported targets:

modify_country_flag - modify country flag. Only modifies if flag already exists.
Example: modify_country_flag = { flag = <name> value = <number> }
Supported scopes: country

Supported targets:

modify_state_flag - modify state flag. Only modifies if flag already exists.
Example: modify_state_flag = { flag = <name> value = <number> }
Supported scopes: state

Supported targets: none

add_state_modifier - Adds a modifier to the state
Example: add_state_modifier = { modifier = { local_non_core_manpower = 0.2 } }
Supported scopes: state

Supported targets: none

set_province_name - set_province_name = { id = <province id> name = <string> } - Set name for a province
Supported scopes: ???

Supported targets:

set_state_name - set_state_name = <string> - Set the current states name
Supported scopes: state

Supported targets: none

reset_province_name - reset name of a province back to localization one.
Supported scopes: ???

Supported targets:

reset_state_name - reset_state_name = yes - Resets the current states name to the original one
Supported scopes: state

Supported targets: none

create_production_license - Creates production license
Example: create_production_license = {
	target = TAG # target for licensing
	cost_factor = 1.0 # cost factor for the deal
	equipment = { # classical equipment reference
		type = light_tank_equipment_2
		version = 0
	}
}
Supported scopes: country

Supported targets:

add_relation_modifier - Adds a static modifier between current scope and target
Example: add_relation_modifier = {
	target = TAG # target of the relation
	modifier = static_modifier_name_here #Name of the modifier added
	}
}
Supported scopes: country

Supported targets: THIS

remove_relation_modifier - Removes a static modifier between current scope and target
Example: add_relation_modifier = {
	target = TAG # target of the relation
	modifier = static_modifier_name_here #Name of the modifier added
	}
}
Supported scopes: country

Supported targets: THIS

set_building_level - Sets specific level of a building construction for amount of levels in specified state or province
Supported scopes: state

Supported targets: none

set_stability - Sets the stability to the country in scope. Example: set_stability = 80
Supported scopes: country

Supported targets:

add_war_support - Adds the war support to the country in scope. Example: add_war_support = 5
Supported scopes: country

Supported targets:

set_war_support - Sets the war support to the country in scope. Example: set_war_support = 80
Supported scopes: country

Supported targets:

random_unit_leader - Executes children effects on random unit leader that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

every_unit_leader - Executes children effects on unit leaders that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

random_army_leader - Executes children effects on random army leader that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

every_army_leader - Executes children effects on army leaders that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

random_navy_leader - Executes children effects on random navy leader that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

every_navy_leader - Executes children effects on navy leaders that fulfills the "limit" trigger.
Supported scopes: country

Supported targets:

transfer_navy - Transfers the entire navy from scope country to target country. Does not support carriers!
Example:
ENG={
	target = NZL
	is_government_in_exile = yes #optional, default is no; the navy will be tagged as exile if this is yes so that it will return to owner if they return from exile.
}
Supported scopes: country

Supported targets:

destroy_ships - Destroys ships of specified country and amount
Example: 
ENG={ 
	destroy_ships = {
		type=light_cruiser
		count=all #or number
	}
}
Supported scopes: country

Supported targets:

set_unit_leader_flag - set unit leader flag
Supported scopes:

Supported targets:

modify_unit_leader_flag - modify unit leader flag. Only modifies if flag already exists.
Example: _modify_unit_leader_flag_ = { flag = <name> value = <number> }
Supported scopes:

Supported targets:

clr_unit_leader_flag - clear unit leader flag
Supported scopes:

Supported targets:

set_nationality - Sets the country that owns current scope general
Supported scopes:

Supported targets:

demote_leader - Demotes field marshal to general
Supported scopes:

Supported targets:

retire - Retires scope unit leader
Supported scopes:

Supported targets:

add_command_power - add command power to country
Supported scopes: country

Supported targets:

unlock_decision_tooltip - show what decision does
Example: unlock_decision_tooltip = some_decision_here
Example:
unlock_decision_tooltip = {
    decision = <some_decision>
    show_effect_tooltip = yes # default is no
    show_modifiers = yes # default is no
}

Supported scopes: country

Supported targets:

add_temporary_buff_to_units - Add buffs to units that are belongs to the army group/navy of this unit leader
Supported scopes:

Supported targets:

boost_planning - Boost planning of units that are belongs to the army group/navy of this unit leader
Supported scopes:

Supported targets:

add_region_efficiency - add efficiency factor to strategic region for from country
Supported scopes:

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

modify_building_resources - Modifies resource output of specific building for this country only
Example: modify_building_resources = {
	building = radar_station
	resource = oil
	amount = 2
}
Supported scopes: country

Supported targets:

global_every_army_leader - Executes children effects on army leaders for every country in the world that fulfills the "limit" trigger. Better to use every_army_leader if you know the country
Supported scopes: country

Supported targets:

add_to_variable - Adds a value or a variable to another one
Example: add_to_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: ???

Supported targets:

subtract_from_variable - Subtracts a value or a variable to another one
Example: subtract_from_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: ???

Supported targets:

multiply_variable - Multiplies a variable to a value or another variable
Example: set_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: ???

Supported targets:

divide_variable - Divies a variable to a value or another variable
Example: divide_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: ???

Supported targets:

clear_variable - Clears a variable
Example: clear_variable = num_dogs
Supported scopes: ???

Supported targets:

add_attack - Adds attack skill to a unit leader
Example: add_attack = 1
Supported scopes:

Supported targets:

add_defense - Adds defense skill to a unit leader
Example: add_defense = 1
Supported scopes:

Supported targets:

add_planning - Adds planning skill to a unit leader
Example: add_planning = 1
Supported scopes:

Supported targets:

unlock_decision_category_tooltip - localizes name of category and displays tooltip that shows it will be unlocked
Supported scopes: country

Supported targets:

activate_mission_tooltip - shows mission will activate and name. Activation needs to be handled manually, effect is just an easier way to display name of mission.
Example: unlock_mission_tooltip = some_mission_here
Supported scopes: country

Supported targets:

load_focus_tree - Sets what focus tree a country uses, retains finished shared focuses.
Supported scopes: country

Supported targets:

add_logistics - Adds logistics skill to a unit leader
Example: add_logistics = 1
Supported scopes:

Supported targets:

add_offsite_building - Add an offsite building to a country
Supported scopes: country

Supported targets:

replace_unit_leader_trait - add trait to unit leader
Supported scopes:

Supported targets:

add_max_trait - Adds a max assignable trait slot for a general
Example: add_max_trait = 1
Supported scopes:

Supported targets:

add_skill_level - Adds a skill level to a unit leader
Example: add_skill_level = 1
Supported scopes:

Supported targets:

add_to_temp_variable - Adds a value or a variable to a temp variable
Example: add_to_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: ???

Supported targets:

subtract_from_temp_variable - Subtracts a value or a variable to a temp variable
Example: subtract_from_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: ???

Supported targets:

multiply_temp_variable - Multiplies a temp variable to a value or another variable
Example: set_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: ???

Supported targets:

divide_temp_variable - Divies a temp variable to a value or another variable
Example: divide_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: ???

Supported targets:

set_temp_variable - Sets a temp variable to a value or another variable
Example: set_temp_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values
}
Supported scopes: ???

Supported targets:

add_timed_unit_leader_trait - add a timed trait to unit leader
Supported scopes:

Supported targets:

clamp_variable - Clamps a variable between two values or variables.
Note that either min or max can be omitted.
The order in which the operations are applied is Max( Min( var, max ), min ).
An error will be logged if max < min as the result will be more often than not undesired (requires the game to run in debug mode).
Example: clamp_variable = {
    var = num_dogs
    min = 0
    max = num_cats
}

Supported scopes: ???

Supported targets:

clamp_temp_variable - Clamps a temp variable a variable bet ween two a values or another variables
Example: clamp_temp_variable = {
var = num_dogs
min = 0
max = num_cats
}
Supported scopes: ???

Supported targets:

start_border_war - start a border war between two states
Supported scopes: ???

Supported targets:

set_border_war_data - update border war properties
Supported scopes: ???

Supported targets:

cancel_border_war - cancel border war between two states
Supported scopes: ???

Supported targets:

set_division_template_lock - Set lock status for a division template
Example: set_division_template_lock = { division_template = <name> is_locked = <bool (default:true)> }
Supported scopes: country

Supported targets:

delete_unit_template_and_units - Delete a template and its units
Example: delete_unit_template_and_units = { division_template = <name> }
Supported scopes: country

Supported targets:

print_variables - prints all variables in scope and temp variables to a file
Example: print_variables = {
file = log_file
text = header_text
append = yes
print_global = yes
var_list = { a b c } #optional
}
Supported scopes: state country

Supported targets: none

activate_mission - Activates mission, ignoring its normal trigger conditions. Cannot activate a mission that is already active. 
Example: activate_mission = some_mission_here
Supported scopes: country

Supported targets:

remove_mission - Removes mission without running complete or timeout effects. 
Example: remove_mission = some_mission_here
Supported scopes: country

Supported targets:

recall_attache - Scope country recalls attache from target country. Example: GER = { recall_attache = CHI } means Germany recalls attache from China.
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

activate_targeted_decision - Activates targeted decisions or mission, ignoring its normal trigger conditions, cooldown and fire only once. Cannot activate if active in interface. 
Example: activate_targeted_decision = { target = TAG decision = decision_id_here
Supported scopes: country

Supported targets:

remove_targeted_decision - Removes targeted decisions or mission. 
Example: remove_targeted_decision = { target = TAG decision = decision_id_here
Supported scopes: country

Supported targets:

modify_timed_idea - Modify amount of days of a timed idea.
 Example: modify_timed_idea = { idea = my_idea_id days = 5 } Adds 5 more days to the idea my_idea_id.
Supported scopes: country

Supported targets:

activate_decision - Activates specified decision for scope country
Supported scopes: country

Supported targets:

set_truce - Sets a truce between scope country and target for days duration. 
Example set_truce = { target = GER days = 90 }
Supported scopes: country

Supported targets:

round_variable - Rounds a variable
Example: round_variable = num_dogs
Supported scopes: ???

Supported targets:

unit_leader_event - fires a unit leader event for owner country
Supported scopes:

Supported targets:

finalize_border_war - finalizes border war between two states, wins or cancels it
Supported scopes: ???

Supported targets:

remove_decision - Remove specified active decision for scope country - Does not run the remove_effect or put the decision on cooldown. Ignores fire_only_once
Supported scopes: country

Supported targets:

swap_ruler_traits - swap 2 traits on current ruler. 
 Syntax: swap_ruler_traits = { remove = <trait> add = <trait> }
Supported scopes: country

Supported targets:

add_random_trait - add random trait from specified list to unit leader. add_random_trait = { old_guard brilliant_strategist inflexible_strategist }
Supported scopes:

Supported targets:

remove_exile_tag - remove exile tag from scope unit leader. remove_exile_tag = yes
Supported scopes:

Supported targets:

set_legitimacy - set_legitimacy = 10. Sets legitimacy on scope country to specified value. Value has to be 0-100.
Supported scopes: country

Supported targets:

become_exiled_in - Become exile in target nation. become_exiled_in = { target = TAG legitimacy = 0-100 (optional) }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

set_faction_name - set_faction_name = NEW_LOC_KEY. Sets the faction name to whatever the new key localises to.
Supported scopes: state country

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

add_maneuver - Adds maneuver skill to a unit leader
Example: add_maneuver = 1
Supported scopes:

Supported targets:

add_coordination - Adds maneuver skill to a unit leader
Example: add_coordination = 1
Supported scopes:

Supported targets:

give_resource_rights - Gives rights to take resources from specified state. give_resource_rights = { receiver = <TAG> state = <id> }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

remove_resource_rights - Remove resource right to state for scope country. remove_resource_rights = ID
Supported scopes: country

Supported targets:

inherit_technology - Copies over technology state from target
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

round_temp_variable - Rounds a temporary variable
Example: round_temp_variable = num_dogs
Supported scopes: ???

Supported targets:

supply_units - Give supply to units being controlled by this leader. 
Example supply_units = 24
Supported scopes:

Supported targets:

set_faction_leader - set current country as leader of its faction
Supported scopes: country

Supported targets:

set_keyed_oob - Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with the given key) on that country.
Only intended to be used within history files.

Example:
set_keyed_oob = {
	key = naval
	name = "ENG_1936_Naval"
}
Supported scopes: country

Supported targets:

set_oob - Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with no key) on that country.
Only intended to be used within history files.

Example:
set_oob = "ENG_1936"
Supported scopes: country

Supported targets:

set_naval_oob - Registers an Order of Battle (OOB) file to be loaded for a country at game start, replacing any previously registered OOB (with key "naval") on that country.
Only intended to be used within history files.

Example:
set_naval_oob = "ENG_1936_Naval"
Supported scopes: country

Supported targets:

add_to_array - Adds an element to an array
Example: add_to_array = {
	array = array_name
	value = 42 #optional, if not defined adds scope
	index = 3 #optional, default is end. otherwise elements are shifted
}
#shorter usage: add_to_array = { array_name = 42 }
Supported scopes: ???

Supported targets:

remove_from_array - Removes an element from an array using value or index
Example: remove_from_array = {
	array = array_name
	value = 42 #optional, use index or this. if neither it removes last element
	index = 3 #optional, use value or this. if neither it removes last element
}
#shorter usage: remove_from_array = { array_name = 42 }
Supported scopes: ???

Supported targets:

clear_array - Clears the contents of array
Example: clear_array = array_name
Supported scopes: ???

Supported targets:

resize_array - Resizes array
Example: resize_array = {
	array = array_name
	value = 42 #optional, if not specified and array grows the new elements are set to this (default 0)
	size = 3 #if higher than old size, new elements are added to end. otherwise last elements are removed to match to new size
}
#shorter usage: resize_array = { array_name = 3 }
Supported scopes: ???

Supported targets:

add_to_temp_array - Adds an element to a temporary array
Example: add_to_temp_array = {
	array = array_name
	value = 42 #optional, if not defined adds scope
	index = 3 #optional, default is end. otherwise elements are shifted
}
#shorter usage: add_to_temp_array = { array_name = 42 }
Supported scopes: ???

Supported targets:

remove_from_temp_array - Removes an element from a temporary array using value or index
Example: remove_from_temp_array = {
	array = array_name
	value = 42 #optional, use index or this. if neither it removes last element
	index = 3 #optional, use value or this. if neither it removes last element
}
#shorter usage: remove_from_temp_array = { array_name = 42 }
Supported scopes: ???

Supported targets:

clear_temp_array - Clears the contents of a temporary array
Example: clear_temp_array = array_name
Supported scopes: ???

Supported targets:

resize_temp_array - Resizes a temp array
Example: resize_temp_array = {
	array = array_name
	value = 42 #optional, if not specified and array grows the new elements are set to this (default 0)
	size = 3 #if higher than old size, new elements are added to end. otherwise last elements are removed to match to new size
}
#shorter usage: resize_temp_array = { array_name = 3 }
Supported scopes: ???

Supported targets:

for_each_loop - Runs a loop on for each element of an array
Example: for_each_loop = {
	array = array_name
	value = value_name #optional (default 'v') current value in array will be stored in this temp variable
	index = index_name #optional (default 'i') current index in array will be stored in this temp variable
	break = break_name #optional (default 'break') set this temp variable to non zero to break the loop
 #effect 1
 #effect 2 ...
}
Supported scopes: ???

Supported targets: ???

add_fuel - add fuel to the country
Supported scopes: country

Supported targets:

set_fuel - set fuel for country
Supported scopes: country

Supported targets:

for_each_scope_loop - Runs a loop on for each element of an array and changes scope to current element in each iteration
Example: for_each_scope_loop = {
	array = array_name
	break = break_name #optional (default 'break') set this temp variable to non zero to break the loop
 #effect 1
 #effect 2 ...
}
Supported scopes: ???

Supported targets: ???

random_scope_in_array - Runs the effect for a random element in array
Example: random_scope_in_array = {
	array = array_name
	limit = { ... trigger ... } a trigger to limit scopes
	break = break_name #optional (default 'break') set this temp variable to non zero to break the loop
 #effect 1
 #effect 2 ...
}
Supported scopes: ???

Supported targets: ???

force_update_dynamic_modifier - updates the modifiers in current scope (use if you don't want to wait for daily update to update them):
force_update_dynamic_modifier = yes

Supported scopes: state country

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

remove_dynamic_modifier - removes a dynamic modifier from country/state/unit leader:
remove_dynamic_modifier = {
    modifier = dynamic_modifier_name
    scope = GER #optional, specify if it is specified while adding the modifier
}

Supported scopes: state country

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

add_dynamic_modifier - adds a dynamic modifier to country/state/unit leader:
add_dynamic_modifier = {
    modifier = dynamic_modifier_name
    scope = GER #optional, state or country tag or a variable contains that. if specified the dynamic variable will target that scope
}

Supported scopes: state country

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

for_loop_effect - Runs a same effects through a loop. example will run the effects for value_name = -3, 0, 3, 6, 9 and then terminate
Example: for_loop = {
	start = -3 (default 0) start value of loop
	end = 10 (default 0) end value of loop
	compare_type = less_than_or_equals (default less_than) comparison type between start and end val
	add = 3 (default 1) value to add to current value after each iteration
	value = value_name #optional (default 'v') current value of iteration will be stored in this temp variable
	break = break_name #optional (default 'break') set this temp variable to non zero to break the loop
 #effect 1
 #effect 2 ...
}
Supported scopes: ???

Supported targets: ???

while_loop_effect - Runs the effect as long as a trigger is true
Example: while_effect = {
	limit = { ... trigger ... } a trigger to test before each iteration
	break = break_name #optional (default 'break') set this temp variable to non zero to break the loop
 #effect 1
 #effect 2 ...
}
Supported scopes: ???

Supported targets: ???

meta_effect - meta effects can be used for building effects from strings and running them. following example will give Germany 42 pp:
meta_effect = {
    text = {
        [COUNTRY] = {
            add_political_power = [POW]
        }
    }
    COUNTRY = "GER"
    POW = 42
}

Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

launch_nuke - launch nuke at a state. usage : 
launch_nuke = { 
   provinve = 42 #will nuke this province if specified
   state = 42 #use either province or state. if state is used it will prefer enemies first while picking a province to nuke. otherwise it will pick one of the neutrals
   controller = GER #if state and controller is specified, the effect will pick a province that is controlled by this tag
   use_nuke = yes #will consume nuke if specified
} 

Supported scopes: country

Supported targets:

scoped_sound_effect - Plays sound effect only on in current scope's player
Supported scopes: country

Supported targets:

find_lowest_in_array - Runs a loop on for each element of an array, finds the lowest value and stores result in temp variables
Example: find_lowest_in_array = {
	array = array_name
	value = value_name #optional (default 'v') lowest value in array will be stored in this temp variable
	index = index_name #optional (default 'i') index of lowest value in array will be stored in this temp variable
}
Supported scopes: ???

Supported targets: ???

find_highest_in_array - Runs a loop on for each element of an array, finds the highest value and stores result in temp variables
Example: find_highest_in_array = {
	array = array_name
	value = value_name #optional (default 'v') highest value in array will be stored in this temp variable
	index = index_name #optional (default 'i') index of highest value in array will be stored in this temp variable
}
Supported scopes: ???

Supported targets: ???

add_mines - Add mines to a strategic region for scoped country.
 add_mines = { region = 42 mines = 100 }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

set_fuel_ratio - Set country's current fuel ratio relative to its capacity
Supported scopes: country

Supported targets:

end_exile - Ends the exile of of the current scope's country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

