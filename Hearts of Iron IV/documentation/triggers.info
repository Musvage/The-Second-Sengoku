== TRIGGER DOCUMENTATION ==
state - check state id
Supported scopes: state

Supported targets: none

if - if_, CIfTrigger, A conditional trigger
if = { limit = { <triggers> } <trigger> }
Supported scopes: ???

Supported targets:

date - checks for a specific date
Supported scopes: ???

Supported targets:

skill - compare leader skill levels
Supported scopes:

Supported targets:

phase - check if we are in this combat phase
Supported scopes:

Supported targets:

and - all inside trigger must be true
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

or - at least one entry inside trigger must be true
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

not - negates content of trigger
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

exists - Check if the current country exist. The country of the scope you are in. Example: DEN = { exists = yes }
Supported scopes: country

Supported targets:

difficulty - check if the difficulty is above or below specified value 0-2 (difficulty enum). Example: difficulty > 0 (above easy)
Supported scopes: ???

Supported targets:

any_neighbor_country - check if any neighbor country meets the trigger
Supported scopes: country

Supported targets:

has_country_flag - has country flag been set.Check flag val date set and days since set.
Example: has_country_flag = test_flag
has_country_flag = { 
	flag = <name> (mandatory)
	value < <int> (optional)
	date > <date> (optional)
	days > <int> (optional)
}
Supported scopes: country

Supported targets: ???

reserves - check amount of reserves
Supported scopes:

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

tag - country tag trigger
Supported scopes: country

Supported targets: ???

any_country - check if any country meets the trigger
Supported scopes: ???

Supported targets:

check_variable - Compares a variable to a number
Supported scopes: ???

Supported targets: ???

region - check state's strategic area id
Supported scopes: state

Supported targets: none

is_subject - Checks if the country is subject of any other country
Supported scopes: country

Supported targets: ???

area - check state's strategic area id
Supported scopes: state

Supported targets: none

threat - check the global threat value. 0-1 value
Supported scopes: ???

Supported targets:

always - always returns specified value
Supported scopes: ???

Supported targets: ???

is_capital - Is scope state a capital. 169 = { is_capital = yes }
Supported scopes: state

Supported targets: none

has_global_flag - has global flag been set.Check flag val date set and days since set.
Example: has_global_flag = test_flag
has_global_flag = { 
	flag = <name> (mandatory)
	value < <int> (optional)
	date > <date> (optional)
	days > <int> (optional)
}
Supported scopes: ???

Supported targets: ???

is_attacker - check if attacker side in combat
Supported scopes:

Supported targets:

has_dlc - Checks if player has a DLC.
Example: has_dlc = "name of the dlc"
Supported scopes: ???

Supported targets:

hidden_trigger - a hidden trigger, anything in it not shown in tooltips
Supported scopes: state country

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_idea - check if country has idea
Supported scopes: country

Supported targets:

any_enemy_country - check if any enemy country meets the trigger
Supported scopes: country

Supported targets:

is_neighbor_of - check if neighbor ( controlled territory ) with specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_opinion - check what opinion the country has towards a specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_opinion_modifier - check if a country has the opinion modifier
Supported scopes: country

Supported targets:

is_subject_of - Checks if the country is subject of specified country
Supported scopes: country

Supported targets: ???

all_neighbor_country - check if all neighbor countries meet the trigger
Supported scopes: country

Supported targets:

all_country - check if all countries meets the trigger
Supported scopes: ???

Supported targets:

all_enemy_country - check if all enemy countries meet the trigger
Supported scopes: country

Supported targets:

night - check if combat is at night
Supported scopes:

Supported targets:

dig_in - check if we have digin level (lowest)
Supported scopes:

Supported targets:

temperature - check combat province temperature
Supported scopes:

Supported targets:

armor - Check that average armor level of combatant is over a certain level
Supported scopes:

Supported targets:

has_war - is country at war
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_controlled_by - check if state is controlled by
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_owned_by - check if state is owned by
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

skill_advantage - compare leader skill levels
Supported scopes:

Supported targets:

owns_state - check owner for state(s)
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

controls_state - check controller for state(s)
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_government - does country government (ruling party) belong to ideology group
Supported scopes: country

Supported targets:

has_state_flag - has state flag been setCheck flag val date set and days since set.
Example: has_state_flag = test_flag
has_state_flag = { 
	flag = <name> (mandatory)
	value < <int> (optional)
	date > <date> (optional)
	days > <int> (optional)
}
Supported scopes: state

Supported targets: ??? none

has_war_with - is countries at war
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

divisions_in_state - checks for amount of divisions in specified state owned by current country.
Supported scopes: country

Supported targets:

country_exists - check if the specified country exist
Supported scopes: ???

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

ships_in_area - checks for amount of ships in specified area
Supported scopes: country

Supported targets:

has_army_size - checks for amount of divisions, additionally of a specified type
Supported scopes: country

Supported targets:

has_navy_size - Checks for amount of ships, additionally of a specified type, archetype, or sub unit definition.

Examples:
	has_navy_size = { size > 10 type = convoy } # Must have more than 10 convoys.
	has_navy_size = { size < 1 archetype = ship_hull_light } # Must not have any ships with light hulls.
	has_navy_size = { size > 39 unit = heavy_cruiser } # Must have 40 or more heavy cruisers.
	has_navy_size = { size < 100 } # Must have fewer than 100 ships of any type.
Supported scopes: country

Supported targets:

num_of_military_factories - check amount of military factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

num_of_civilian_factories - check amount of civilian factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

num_of_naval_factories - check amount of naval factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

num_of_nukes - check amount of nukes
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_manpower - check amount of manpower
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_political_power - check amount of political power
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

num_of_available_military_factories - check amount of available military factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

num_of_available_naval_factories - check amount of available naval factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

num_of_available_civilian_factories - check amount of available civilian factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_in_faction_with - check if member of same faction as specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_in_faction - check if member of any faction
Supported scopes: country

Supported targets:

is_faction_leader - check if country leads a faction
Supported scopes: country

Supported targets:

is_guaranteed_by - check if guaranteed by specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_guaranteed - check if country has guaranteed specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_military_access_to - check country has military access to specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

gives_military_access_to - check if country gives military access to specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

any_state - check if any state meets the trigger
Supported scopes: ???

Supported targets:

any_owned_state - check if any owned state meets the trigger
Supported scopes: country

Supported targets:

any_neighbor_state - check if any neighbor state meets the trigger
Supported scopes: state

Supported targets: none

any_allied_country - Check if any allied country meets the trigger. Does not include the country itself
Supported scopes: country

Supported targets:

all_state - check if all states meets the trigger
Supported scopes: ???

Supported targets:

all_owned_state - check if all owned states meets the trigger
Supported scopes: country

Supported targets:

all_neighbor_state - check if all neighbor states meets the trigger
Supported scopes: state

Supported targets: none

all_allied_country - Check if all allied countries meet the trigger. Does not include the country itself
Supported scopes: country

Supported targets:

surrender_progress - check if a country is close to surrendering
Supported scopes: country

Supported targets:

political_power_daily - Checks if daily political power increase is more or less that specified value 
 political_power_daily > 1.5
Supported scopes: country

Supported targets:

ic_ratio - Compares the ratio of total industrial capacity between the scope country and the one set with 'tag'
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

any_war_score - compares the warscore of all wars in a country to see if any fullfills the comparison condition 0-100 - Example: any_war_score > 40
Supported scopes: country

Supported targets:

has_idea_with_trait - check if country has idea with specified trait
Supported scopes: country

Supported targets:

has_deployed_air_force_size - checks for amount of aircrafts, additionally of a specified type
Supported scopes: country

Supported targets:

is_fighting_in_terrain - check what terrain is in combat
Supported scopes:

Supported targets:

is_defender - check if defender side in combat
Supported scopes:

Supported targets:

has_combat_modifier - check if combatant has modifier
Supported scopes:

Supported targets:

is_winning - check if defender side in combat
Supported scopes:

Supported targets:

fastest_unit - check if fastest unit of combatant is over this limit
Supported scopes:

Supported targets:

recon_advantage - checks if side has an advantage in recon level
Supported scopes:

Supported targets:

has_tech - check if country has technology
Supported scopes: country

Supported targets:

land_doctrine_level - checks researched land doctrine level
Supported scopes: country

Supported targets:

is_ironman - Check if current game is ironman.
Supported scopes: ???

Supported targets:

has_start_date - Compare the initial start date of current game.
Supported scopes: ???

Supported targets:

has_built - checks country has built a set number (at least) of a certain type of building since taking goal
Supported scopes: country

Supported targets:

has_available_idea_with_traits - Checks if country has more than limit, default = 0.
Supported scopes: country

Supported targets:

is_claimed_by - Checks if state is claimed by country
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_core_of - Checks if state is core of country
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_ai - Checks if country is AI controlled.
Supported scopes: country

Supported targets:

has_trait - check if sides leader has trait
Supported scopes:

Supported targets:

has_reserves - check if side has reserves waiting
Supported scopes:

Supported targets:

frontage_full - check if sides front is full or can get more reinforcements
Supported scopes:

Supported targets:

is_lend_leasing - is lend-leasing country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

free_building_slots - checks building for available construction levels
Supported scopes: state

Supported targets: none

is_demilitarized_zone - checks if a state is a demilitarized zone
Supported scopes: state

Supported targets: ??? none

is_border_conflict - checks if a state is in border conflict
Supported scopes: state

Supported targets: ??? none

has_completed_focus - has country completed focus
Supported scopes: country

Supported targets:

has_offensive_war_with - One country has offensive war against other country.
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_defensive_war_with - One country has defensive war against other country.
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_offensive_war - is country at offensive war
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_defensive_war - is country at defensive war
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_coastal - check if state is coastal
Supported scopes: state

Supported targets: none

casualties - Check the amount of casualties a country has suffered in all of it's wars
Supported scopes: country

Supported targets:

custom_trigger_tooltip - Works as an and-trigger with a custom tooltip
Supported scopes: ???

Supported targets:

has_equipment - checks for amount of equipment stored
Supported scopes: country

Supported targets:

num_of_factories - check amount of total factories
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

focus_progress -  = { focus = id progress = 0.5 }
Supported scopes: country

Supported targets:

is_puppet - Checks if the country is puppet of any other country
Supported scopes: country

Supported targets: ???

is_puppet_of - Checks if the country is puppet of specified country
Supported scopes: country

Supported targets: ???

ships_in_state_ports - checks for amount of ships in specified state's ports
Supported scopes: country

Supported targets:

is_major - check if country is a major
Supported scopes: country

Supported targets:

is_on_continent - is state located on continent
Supported scopes: state

Supported targets: none

is_amphibious_invasion - check if combat is at night
Supported scopes:

Supported targets:

strength_ratio - Compares the estimated army strength between the scope country and the one set with 'tag'
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_max_planning - check if side has maximal planning bonus
Supported scopes:

Supported targets:

has_civil_war - check if participant in civil war as revolter or target
Supported scopes: country

Supported targets:

less_combat_width_than_opponent - check if side has more combat width than their opponent
Supported scopes:

Supported targets:

is_fighting_air_units - check if side is fighting air units
Supported scopes:

Supported targets:

has_carrier_airwings_on_mission - check if side has a career with air wings on a mission
Supported scopes:

Supported targets:

has_flanked_opponent - check if side has flanked their opponent
Supported scopes:

Supported targets:

any_claim - check if there is a claim between a country and all others
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_volunteers_amount_from - Compares number of volunteers from the country. Example: has_volunteers_amount_from = { tag = ITA count > 1 }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

num_of_controlled_states - check amount of controlled stats
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

original_tag - original tag is ( for civil wars checks )
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_added_tension_amount - Compare if the country has added above or below the specified ammount of tension
Supported scopes: country

Supported targets:

has_manpower_for_recruit_change_to - check if manpower is enough to switch recruitment laws not to be negative
Supported scopes: country

Supported targets:

ai_liberate_desire - check what liberation desire the country has towards a specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

distance_to - check distance between two states
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

can_research - check if country can research technology
Supported scopes: country

Supported targets:

has_annex_war_goal - Checks a country has annex war goal on another country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

hardness - check lowest/highest hardness level on combatant
Supported scopes:

Supported targets:

has_template_containing_unit - check if country has a division template that contains a specific unit
Supported scopes: country

Supported targets:

is_in_home_area - Checks if the first province in the state is connected to the capital of its owner
Supported scopes: state

Supported targets: ??? none

state_population - check the population in the state
Supported scopes: state

Supported targets: none

ai_irrationality - check the ai irrationality value
Supported scopes: country

Supported targets:

has_war_together_with - Are the countries fighting on the same side of a war
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_capitulated - checks if the country has capitulated
Supported scopes: country

Supported targets:

has_army_manpower - checks for amount of manpower of selected type, additionally of a specified type
Supported scopes: country

Supported targets:

is_owned_and_controlled_by - check if state is owned by
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_tutorial - check if the tutorial is active
Supported scopes: ???

Supported targets:

is_historical_focus_on - check if the historical focus is active
Supported scopes: ???

Supported targets:

original_research_slots - check number of research slots at start of game
Supported scopes: country

Supported targets:

has_wargoal_against - Checks if country has a wargoal against the target. 
Example: ENG = { has_wargoal_against = GER }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_justifying_wargoal_against - Checks if country is justifying a wargoal against the target. 
Example: ENG = { is_justifying_wargoal_against = GER }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_owner_neighbor_of - check if neighbor ( owned territory ) with specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

ai_wants_divisions - Will compare towards the amount of divisions an ai wants to have.
Supported scopes: country

Supported targets:

has_claimed_state_in_peace_conference - Checks if a state has been claimed by target country in an ongoing peace conference
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

num_owned_neighbour_states - Checks if a country owns the amount of states neighbouring the scoped state
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

num_claimed_peace_conference_neighbour_states - Checks if a country owns the amount of states neighbouring the scoped state.
Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_island_state - always returns specified value
Supported scopes: state

Supported targets: ??? none

has_elections - Checks the country's politics on allowing elections. has_elections = yes
Supported scopes: country

Supported targets: ???

alliance_strength_ratio - Compares the estimated army strength between the scope country, his allies and his enemies.
Supported scopes: country

Supported targets:

civilwar_target - civilwar target is ( for civil wars checks )
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_in_peace_conference - Checks if the country is currently in a peaceconference
Supported scopes: country

Supported targets:

has_unit_leader - check if country has unit leader with specified ID. Don't localize this. Tooltip only for debug.
Supported scopes: country

Supported targets:

any_home_area_neighbor_country - check if any neighbor country in the home area meets the trigger
Supported scopes: country

Supported targets:

any_other_country - check if any other country meets the trigger. Excludes current country
Supported scopes: ???

Supported targets:

all_other_country - check if all other countries meets the trigger. Excludes current country
Supported scopes: ???

Supported targets:

has_non_aggression_pact_with - Check if country has non aggression pact with the specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

num_faction_members - Compares the number of members in the faction for the current country. 
 Example: num_faction_members > 10
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

enemies_strength_ratio - Compares the estimated army strength between the scope country and all its enemies
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_custom_difficulty_setting - Returns true if the game has the specified custom difficulty on: 
Example: has_custom_difficulty_setting = TheAxisIndustry
Supported scopes: ???

Supported targets: ???

has_any_custom_difficulty_setting - Returns true if the game has any custom difficulty on
Supported scopes: ???

Supported targets: ???

has_country_custom_difficulty_setting - Returns true if the game has any custom difficulty on the scope nation
Supported scopes: country

Supported targets: ???

is_researching_technology - Checks if the country is currently researching a specific technology.
Example: is_researching_technology = mechanised_infantry
Supported scopes: country

Supported targets:

is_in_tech_sharing_group - Checks if country is member specified technology sharing group.
Example: is_in_technology_sharing_group = commonwealth_research
Supported scopes: country

Supported targets:

has_autonomy_state - check if country currently has an autonomy state, example:
has_autonomy_state = puppet
Supported scopes: country

Supported targets:

compare_autonomy_progress_ratio - check if autonomy progress ratio is higher than value, example:
compare_autonomy_progress_ratio > 0.5
Supported scopes: country

Supported targets:

compare_autonomy_state - check if autonomy state is higher than other one, example:
compare_autonomy_state > puppet
Supported scopes: country

Supported targets:

has_cosmetic_tag - Checks if country has specific cosmetic tag set.
Example: INS = { has_cosmetic_tag = INS1 }
Supported scopes: country

Supported targets:

num_subjects - check the number of subjects of nation
Supported scopes: country

Supported targets:

num_tech_sharing_groups - checks how many groups a nation is a member of
Supported scopes: country

Supported targets:

has_template - Check if country has a division template of specific name
Supported scopes: country

Supported targets:

has_state_category - Check if state has a specific state category
Supported scopes: state

Supported targets: none

has_cavalry_ratio - Check that ratio of cavalry brigades in the composition of a side of combating troops are over a certain level
Supported scopes:

Supported targets:

num_occupied_states - check the number of states occupied by nation
Supported scopes: country

Supported targets:

has_damaged_buildings - check for damaged buildings of nation
Supported scopes: country

Supported targets:

has_resources_amount - checks for amount of resources in specified state
Example:
has_resources_amount = {
	resource = chromium
	amount > 10
	state = 31 (optional - can be used in state scope instead)
Supported scopes: state country

Supported targets: none

has_tech_bonus - checks if the country has a bonus for the specified technology or category
Example:
has_tech_bonus = {
	technology =  <tech>
	category = <tech cat>
	}
Supported scopes: country

Supported targets: ???

has_template_majority_unit - check if country has a division template that is majority of specific unit
Supported scopes: country

Supported targets:

min_planning - check if side has maximal planning bonus
Supported scopes:

Supported targets:

has_country_leader - check if country has leader with specified ID. Don't localize this. Tooltip only for debug.
has_country_leader = {
	id = <ID>
	ruling_only = yes/no (default = yes)
	name = <string>
}
Supported scopes: country

Supported targets:

has_army_experience - Compares current country's army experience with right side value.
 has_army_experience < <value>
Supported scopes: country

Supported targets:

has_air_experience - Compares current country's air experience with right side value.
 has_air_experience < <value>
Supported scopes: country

Supported targets:

has_navy_experience - Compares current country's navy experience with right side value.
 has_navy_experience < <value>
Supported scopes: country

Supported targets:

has_full_control_of_state - check controller for state(s)
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

num_divisions - Will compare towards the amount of divisions a country has control over, if strength matters use has_army_size.
Supported scopes: country

Supported targets:

count_triggers - Returns true if the specified number of sub-triggers return true
count_triggers = { amount = 2 <trigger> <trigger> <trigger> }
Supported scopes: ???

Supported targets:

is_target_of_coup - is_target_of_coup = yes - Returns true if current country is being targeted by a coup from any country.
Supported scopes: country

Supported targets:

is_staging_coup - is_staging_coup = yes - Returns true if current country is staging a coup in another any country.
Supported scopes: country

Supported targets:

has_focus_tree - Does current country have the specified focus tree.
Supported scopes: country

Supported targets:

has_template_ai_majority_unit - check if country has a division template that is majority of specific unit using AI's priorities rather than visual
Supported scopes: country

Supported targets:

has_any_license - Country has any active licenses
Example: has_any_license = yes
Supported scopes: country

Supported targets: ???

has_license - Country has specific active license
Example: has_license = {
	from = TAG # has license from this country, optional
	 #if archetype is specified equipment should not be specified
	archetype = light_tank_equipment #any armor license
	equipment = { # classical equipment reference
		type = light_tank_equipment_2
		version = 0
	}
}
Supported scopes: country

Supported targets: ???

is_licensing_any_to - Current country is licensing something to target country
Example: is_licensing_any_to = ENG
Supported scopes: country

Supported targets: ???

is_licensing_to - Country is licensing specific equipment to target. License is active
Example: is_licensing_to = {
	target = TAG # licensing to this country
	 #if archetype is specified equipment should not be specified
	archetype = light_tank_equipment #any armor license
	equipment = { # classical equipment reference
		type = light_tank_equipment_2
		version = 0
	}
}
Supported scopes: country

Supported targets: ???

ai_has_role_template - check if the ai controlled country has any template for a specific role
Supported scopes: country

Supported targets:

ai_has_role_division - check if the ai controlled country has any fielded divisions for a specific role
Supported scopes: country

Supported targets:

has_relation_modifier - Country has specified relation modifier when dealing with _target_ county
Example: has_relation_modifier = {
	target = TAG # has license from this country, optional
	modifier = static_modifier_here
	}
}
Supported scopes: country

Supported targets: ???

any_province_building_level - In the current state, checks if any province within the specified limit has a building of the specified level.
Supported scopes: state

Supported targets: ??? none

estimated_intel_max_armor - Compares estimated max armor based on intel. Example: estimated_intel_max_armor = { tag = ITA value > 1 }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

estimated_intel_max_piercing - Compares estimated max armor based on intel. Example: estimated_intel_max_piercing = { tag = ITA value > 1 }
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

amount_research_slots - check number of research current research slots 
 amount_research_slots > 2
Supported scopes: country

Supported targets:

manpower_per_military_factory - Number of available manpower per factory the country has. Excluding dockyards.
manpower_per_military_factory < 1000
Supported scopes: country

Supported targets:

amount_taken_ideas - has current country picked specified amount of ideas. Category and slot is optional.
Excludes national_spirit, hidden, law = yes
amount_taken_ideas = {
	amount < <int> (mandatory)
	category = { military_staff } (optional)
	slot = { army_chief political_advisor } (optional)
}
Supported scopes: country

Supported targets:

has_carrier_airwings_in_own_combat - Check if carrier has airplanes that are part of the current combat
Supported scopes:

Supported targets:

naval_strength_ratio - Compares the estimated navy strength between the scope country and the one set with 'tag'
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

enemies_naval_strength_ratio - Compares the estimated navy strength between the scope country and all its enemies
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

alliance_naval_strength_ratio - Compares the estimated naval strength between the scope country, his allies and his enemies.
Supported scopes: country

Supported targets:

has_stability - check value of stability 0-1: Example has_stability < 0.6
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_war_support - check value of war_support 0-1: Example has_war_support < 0.6
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

all_unit_leader - check if all unit leaders meets the trigger.
Supported scopes: country

Supported targets:

any_unit_leader - check if any unit leader meets the trigger.
Supported scopes: country

Supported targets:

all_army_leader - check if all unit leaders meets the trigger.
Supported scopes: country

Supported targets:

any_army_leader - check if any unit leader meets the trigger.
Supported scopes: country

Supported targets:

all_navy_leader - check if all unit leaders meets the trigger.
Supported scopes: country

Supported targets:

any_navy_leader - check if any unit leader meets the trigger.
Supported scopes: country

Supported targets:

is_assigned - is_assigned = yes/no - Checks if the current unit leader is assigned to command an army/navy
Supported scopes:

Supported targets:

num_units - Check number of units commanded by the unit leader 
 num_units > 2
Supported scopes:

Supported targets:

is_field_marshal - is_field_marshal = yes/no - Checks if the current unit leader is a field marshall
Supported scopes:

Supported targets:

has_unit_leader_flag - has unit leader flag been setCheck flag val date set and days since set.
Example: has_unit_leader_flag = test_flag
has_unit_leader_flag = { 
	flag = <name> (mandatory)
	value < <int> (optional)
	date > <date> (optional)
	days > <int> (optional)
}
Supported scopes:

Supported targets: ???

has_decision - check if country has active selected decision
Supported scopes: country

Supported targets:

command_power - Checks if available command power is more or less that specified value 
 command_power > 1.5
Supported scopes: country

Supported targets:

command_power_daily - Checks if daily command power increase is more or less that specified value 
 command_power_daily > 1.5
Supported scopes: country

Supported targets:

is_fully_controlled_by - Checks if state is fully controlled by specified tag
Supported scopes: state

Supported targets: ??? none

has_ability - does unit leader have the abilityCheck if a unit leader has the ability.
Example: has_ability = force_attack
Supported scopes:

Supported targets: ???

has_variable - Checks if a variable exists in a scope
Supported scopes: ???

Supported targets: ???

has_id - check unit leader has specified ID. Don't localize this. Tooltip only for debug.
Supported scopes:

Supported targets:

can_select_trait - check if leader can select a trait
Supported scopes:

Supported targets:

add_to_temp_variable - Adds a value or a variable to a temporary variable
Example: add_to_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger
}
Supported scopes: ???

Supported targets:

subtract_from_temp_variable - Subtracts a value or a variable to a temporary variable
Example: subtract_from_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger
}
Supported scopes: ???

Supported targets:

multiply_temp_variable - Multiplies a temporary variable by a value or another variable
Example: set_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger
}
Supported scopes: ???

Supported targets:

divide_temp_variable - Divies a temporary variable by a value or another variable
Example: divide_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger
}
Supported scopes: ???

Supported targets:

set_temp_variable - Sets a temporary variable to a value or another variable
Example: set_variable = {
var = num_dogs
	value = 42
	tooltip = loc_str_id_with_LEFT_and_RIGHT  #localized text with LEFT and RIGHT tokens in it, tokens will replaced by values. _NOT is added to end for negative trigger
}
Supported scopes: ???

Supported targets:

clamp_temp_variable - clamps a temp variable between two values/variables
Supported scopes: ???

Supported targets:

num_of_civilian_factories_available_for_projects - check amount of civilian factories available for a new project to use
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_event_target - checks if current scope or global scope has the specified event target saved
Supported scopes: ???

Supported targets: ???

political_power_growth - Check the value of political power daily growth.Exacmple: political_power_growth > 0
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_border_war - Checks if a there is any border wars for country/state
Supported scopes: state country

Supported targets: ??? none

is_border_war - Checks if a the combatant or leader has a border war
Supported scopes:

Supported targets: ???

has_border_war_between - Checks if a there is a border war between two states
Supported scopes: ???

Supported targets: ???

has_border_war_with - Checks if a there is a border against a state/country
Supported scopes: state country

Supported targets: ??? none

average_stats - Compares the average stats for a unit leader.
Example: average_stats > 10
Supported scopes:

Supported targets:

attack_skill_level - Compares attack skill level of a unit leader.
Example: attack_skill_level > 5
Supported scopes:

Supported targets:

defense_skill_level - Compares defense skill level of a unit leader.
Example: defense_skill_level > 5
Supported scopes:

Supported targets:

logistics_skill_level - Compares logistics skill level of a unit leader.
Example: logistics_skill_level > 5
Supported scopes:

Supported targets:

planning_skill_level - Compares planning skill level of a unit leader.
Example: planning_skill_level > 5
Supported scopes:

Supported targets:

is_leading_army_group - is_leading_army_group = yes/no - Checks if the current unit leader is leading an army group (not single army)
Supported scopes:

Supported targets:

is_leading_army - is_leading_army = yes/no - Checks if the current unit leader is leading a single army (not army group)
Supported scopes:

Supported targets:

print_variables - prints all variables in scope and temp variables to a file
Example: print_variables = {
file = log_file
text = header_text
append = yes
print_global = yes
var_list = { a b c } #optional
}
Supported scopes: ???

Supported targets:

has_active_mission - check if country has an active mission with specified ID. has_active_mission = my_test_mission
Supported scopes: country

Supported targets:

has_attache - Has attaché from any other country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_attache_from - Has attaché from specified country
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

amount_manpower_in_deployment_queue - Checks for amount manpower currently in deploymentview. amount_manpower_in_training > 10
Supported scopes: country

Supported targets:

army_manpower_in_state - Checks for amount manpower currently the target state with option to specify a type.
Example:
army_manpower_in_state = {
	state = <id> (variables supported)
	amount < <int> (variables supported)
	type > <equipment_type> (armor, infantry, etc.)
Supported scopes: country

Supported targets:

is_exiled_leader - Checks if scope leader is from an exiled government. is_exiled_leader = yes
Supported scopes:

Supported targets:

is_exiled_in - Checks if scope country is a government in exile in target tag. is_exiled_in = ENG
Supported scopes: country

Supported targets: ???

is_hosting_exile - Checks if scope country is hosting target tag as an exile. is_hosting_exile = FRA
Supported scopes: country

Supported targets: ???

is_exiled_leader_from - Checks if scope leader is from specified exiled government. is_exiled_leader_from = FRA
Supported scopes:

Supported targets:

is_exile_host - Checks if scope country is hosting an exile. is_exile_host = yes
Supported scopes: country

Supported targets: ???

is_government_in_exile - Checks if scope country an exiled government. is_government_in_exile = yes
Supported scopes: country

Supported targets: ???

divisions_in_border_state - checks for amount of divisions in specified state owned by current country.
Supported scopes: country

Supported targets:

stockpile_ratio - Compares the ratio of equipment archetype in stockpile vs used. a value of 2 means we have double in stockpile of what is fielded or in training.
Supported scopes: country

Supported targets:

state_strategic_value - Checks for state strategic value
Supported scopes: state

Supported targets: none

state_and_terrain_strategic_value - Checks for state strategic value
Supported scopes: state

Supported targets: none

round_temp_variable - Rounds a temporary variable
Example: round_temp_variable = num_dogs
Supported scopes: ???

Supported targets:

has_subject - Checks if the country has for subject the given country
Supported scopes: country

Supported targets: ???

has_game_rule - Checks if a game rule is set to a particular option.
Example:
has_game_rule = {
	rule = GER_can_remilitarize_rhineland
	option = yes
}
Supported scopes: ???

Supported targets:

game_rules_allow_achievements - Returns true if all of the active game rule options allow achievements.
Supported scopes: ???

Supported targets:

is_in_array - Checks if an element is in array
Example: is_in_array = {
	array = array_name
	value = 42
}
#shorter usage: is_in_array = { array_name = 42 }
Supported scopes: ???

Supported targets:

add_to_temp_array - Adds an element to a temporary array
Example: add_to_temp_array = {
	array = array_name
	value = 42 #optional, if not defined adds scope
	index = 3 #optional, default is end. otherwise elements are shifted
}
#shorter usage: add_to_temp_array = { array_name = 42 }
Supported scopes: ???

Supported targets:

remove_from_temp_array - Removes an element from a temporary array using value or index
Example: remove_from_temp_array = {
	array = array_name
	value = 42 #optional, use index or this. if neither it removes last element
	index = 3 #optional, use value or this. if neither it removes last element
}
#shorter usage: remove_from_temp_array = { array_name = 42 }
Supported scopes: ???

Supported targets:

clear_temp_array - Clears the contents of a temporary array
Example: clear_temp_array = array_name
Supported scopes: ???

Supported targets:

resize_temp_array - Resizes a temp array
Example: resize_temp_array = {
	array = array_name
	value = 42 #optional, if not specified and array grows the new elements are set to this (default 0)
	size = 3 #if higher than old size, new elements are added to end. otherwise last elements are removed to match to new size
}
#shorter usage: resize_temp_array = { array_name = 3 }
Supported scopes: ???

Supported targets:

any_of - Runs a loop on an array and check a trigger for each value, if any true returns true. otherwise returns false
Example: any_of = {
	array = array_name
	value = value_name #optional (default 'value') current value in array will be stored in this temp variable
	index = index_name #optional (default 'index') current index in array will be stored in this temp variable
 #trigger 1
 #trigger 2 ...
}
Supported scopes: ???

Supported targets: ???

all_of - Runs a loop on an array and check a trigger for each value, if any false returns false. otherwise returns true
Example: all_of = {
	array = array_name
	value = value_name #optional (default 'v') current value in array will be stored in this temp variable
	index = index_name #optional (default 'i') current index in array will be stored in this temp variable
 #trigger 1
 #trigger 2 ...
}
Supported scopes: ???

Supported targets: ???

has_fuel - check amount of fuel
example:
has_fuel > 500
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

any_of_scopes - Runs a loop on an array and check a trigger for each scope in it, if any true returns true. otherwise returns false
Example: any_of_scopes = {
	array = array_name
 #trigger 1
 #trigger 2 ...
}
Supported scopes: ???

Supported targets: ???

all_of_scopes - Runs a loop on an array and check a trigger for each scope in it, if any false returns false. otherwise returns true
Example: all_of_scopes = {
	array = array_name
 #trigger 1
 #trigger 2 ...
}
Supported scopes: ???

Supported targets: ???

has_country_leader_with_trait - check if current country has specified trait.
has_country_leader_with_trait = big_fat_idiot
Supported scopes: country

Supported targets:

has_legitimacy - Check scope country legitimacy 0-100: Example has_legitimacy < 60
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_rule - Checks if a rule set for a country.
Example: has_rule = can_puppet
Supported scopes: ???

Supported targets:

state_population_k - check the population in the state in thousands (use to avoid variable overflows)
Supported scopes: state

Supported targets: none

casualties_k - Check the amount of casualties in thousands a country has suffered in all of it's wars
Supported scopes: country

Supported targets:

meta_trigger - meta triggers can be used for building triggers from strings and running them. following example will test if Germany has 42 pp:
meta_trigger = {
    text = {
        [COUNTRY] = {
            political_power > [POW]
        }
    }
    COUNTRY = "GER"
    POW = 42
}

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_dynamic_modifier - Checks if scope has a dynamic modifier.
has_dynamic_modifier = {
    modifier = dynamic_modifier_name
    scope = GER #optional, if the original modifier has been targeted
}

Supported scopes: state country

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

find_lowest_in_array - Runs a loop on for each element of an array, finds the lowest value and stores result in temp variables
Example: find_lowest_in_array = {
	array = array_name
	value = value_name #optional (default 'v') lowest value in array will be stored in this temp variable
	index = index_name #optional (default 'i') index of lowest value in array will be stored in this temp variable
}
Supported scopes: ???

Supported targets: ???

find_highest_in_array - Runs a loop on for each element of an array, finds the highest value and stores result in temp variables
Example: find_highest_in_array = {
	array = array_name
	value = value_name #optional (default 'v') highest value in array will be stored in this temp variable
	index = index_name #optional (default 'i') index of highest value in array will be stored in this temp variable
}
Supported scopes: ???

Supported targets: ???

has_mines - Checks if a region has amount of mines.
has_mines = {
    region = region_id
    amount = amount_of_mines
}

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

naval_strength_comparison - Compares navies of two sides.
naval_strength_comparison = {
	other = GER # by default compares to the from scope
  tooltip = 'key' #tooltip is 'navy strength' by default, the key can be overridden if wanted 
	ratio > 1.5   # default is 1
	sub_unit_def_weights = { # if not specified, it will weigh all ships as 1. otherwise only specified sub unit types will be counted
		carrier = 1
		battleship = 2
	}
}

Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

fuel_ratio - Compares the fuel ratio to a variable.
Example: fuel_ratio > 0.5
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

days_since_last_strategic_bombing - Checks the days since last strategic bombing.
days_since_last_strategic_bombing < 10

Supported scopes: state

Supported targets: none THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

casualties_inflicted_by - Checks the casualties infliced by the speficied country to the scopped country.
E.g. true if Germany has been inflicted more than 200k casualties by Poland:
GER = {
  casualties_inflicted_by = {
    opponent = POL
    thousands > 200
  }
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

has_mined - Checks the mines planted by the country of the parent scope on the coastline of the target countryE.g. true if Germany has more than 1000 mines around Poland coast:
GER = {
  has_mined = {
    target = POL
    value > 1000
  }
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

received_expeditionary_forces - Checks that the country in scope has received the specified amount of expeditionary forces from the specified country
E.g. true if Germany is commaning more than 100 expeditionary forces from Poland:
GER = {
  received_expeditionary_forces = {
    sender = POL
    value > 100
  }
}
Supported scopes: country

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

is_fighting_in_weather - Checks the weather on a combat
Example:
# true if weather is artic water
is_fighting_in_weather = artic_water
# true if weather is either artic_water or snow
is_fighting_in_weather = { artic_water snow }

Supported scopes:

Supported targets: THIS ROOT PREV FROM OWNER CONTROLLER CAPITAL

